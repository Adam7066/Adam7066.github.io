<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Note on 小十的部落格</title><link>https://blog.smallten.me/tags/note/</link><description>Recent content in Note on 小十的部落格</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 05 Apr 2022 03:44:06 +0800</lastBuildDate><atom:link href="https://blog.smallten.me/tags/note/index.xml" rel="self" type="application/rss+xml"/><item><title>教育概論-05：教育的理論基礎 - 心理學 II</title><link>https://blog.smallten.me/p/introduction_to_education-05/</link><pubDate>Tue, 05 Apr 2022 03:44:06 +0800</pubDate><guid>https://blog.smallten.me/p/introduction_to_education-05/</guid><description>&lt;h1 id="新行為主義學派學習理論">&lt;a href="#%e6%96%b0%e8%a1%8c%e7%82%ba%e4%b8%bb%e7%be%a9%e5%ad%b8%e6%b4%be%e5%ad%b8%e7%bf%92%e7%90%86%e8%ab%96" class="header-anchor">&lt;/a>新行為主義學派學習理論
&lt;/h1>&lt;ul>
&lt;li>代表人物：班杜拉(A. Bandura)&lt;/li>
&lt;li>又稱為「新行為主義」&lt;/li>
&lt;li>又稱為「三元學習論」（&lt;font color=red>社會學習論&lt;/font>）
&lt;ul>
&lt;li>&lt;font color=blue>學習是三者 (P x E x B) 彼此互動後的結果&lt;/font>
&lt;ul>
&lt;li>P (Peron): 個體對環境的認知&lt;/li>
&lt;li>E (Environment): 外在環境刺激&lt;/li>
&lt;li>B (Behavior): 個體所表現的行為&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>認為增強並不是刺激反應聯結的最重要因素，只是一種對環境訊息的認知而已。人在刺激與反應聯結之間，會有一段具有&lt;font color=blue>中介作用的認知歷程&lt;/font>。&lt;/li>
&lt;li>學習並非全然來自於個體實際經驗&lt;/li>
&lt;li>個體的行為會受別人的影響而改變&lt;/li>
&lt;li>故特別強調「&lt;font color=red>觀察學習&lt;/font>」與「&lt;font color=red>模仿&lt;/font>」。&lt;/li>
&lt;li>透過觀察而模仿，包括下列幾種類型：
&lt;ul>
&lt;li>「&lt;font color=blue>直接模仿&lt;/font>」：直接看到並模仿&lt;/li>
&lt;li>「&lt;font color=blue>綜合模仿&lt;/font>」：綜合好幾次的模仿經驗才模仿&lt;/li>
&lt;li>「&lt;font color=blue>象徵模仿&lt;/font>」：學習到行為背後象徵的意義&lt;/li>
&lt;li>「&lt;font color=blue>抽象模仿&lt;/font>」：學習到抽象的原理原則&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>被觀察者稱為「&lt;font color=red>楷模&lt;/font>」（Model），學習楷模行為的過程稱為「&lt;font color=red>模仿&lt;/font>」（Modeling）&lt;/li>
&lt;li>&lt;font color=blue>模仿學習 (替代式學習)&lt;/font>：個體經由觀察他人的行為改變歷程和行為改變結果（&lt;font color=red>替代性增強&lt;/font>），而間接學習到的行為改變。&lt;/li>
&lt;li>在同樣的社會情境中，不同學習者未必會經由觀察而學到同樣的社會行為&lt;/li>
&lt;li>兒童模仿的主要對象：
&lt;ul>
&lt;li>&lt;font color=blue>重要他人&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>同性別&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>表現傑出的同儕&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>同年齡與社會階層&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>觀察學習階段：
&lt;ul>
&lt;li>&lt;font color=blue>注意&lt;/font>：注意到楷模本身 (是否是重要他人? 是否重複出現?)&lt;/li>
&lt;li>&lt;font color=blue>記憶(保持)&lt;/font>：將觀察的結果記憶保留下來&lt;/li>
&lt;li>&lt;font color=blue>再生&lt;/font>：學會了如法泡製該行為&lt;/li>
&lt;li>&lt;font color=blue>動機&lt;/font>：於適當時機將學到的行為表現出來&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="新行為主義理論的教育應用">&lt;a href="#%e6%96%b0%e8%a1%8c%e7%82%ba%e4%b8%bb%e7%be%a9%e7%90%86%e8%ab%96%e7%9a%84%e6%95%99%e8%82%b2%e6%87%89%e7%94%a8" class="header-anchor">&lt;/a>新行為主義理論的教育應用
&lt;/h1>&lt;h2 id="班杜拉-bandura---觀察學習理論">&lt;a href="#%e7%8f%ad%e6%9d%9c%e6%8b%89-bandura---%e8%a7%80%e5%af%9f%e5%ad%b8%e7%bf%92%e7%90%86%e8%ab%96" class="header-anchor">&lt;/a>班杜拉 (Bandura) - 觀察學習理論
&lt;/h2>&lt;ul>
&lt;li>按照學習者的個別差異，&lt;font color=blue>安排適當的楷模&lt;/font>&lt;/li>
&lt;li>注意學習者觀察的四大歷程 (一切學習以&lt;font color=blue>引起注意&lt;/font>為基礎)&lt;/li>
&lt;li>提升學習者的自我效能&lt;/li>
&lt;li>培養學習者的自我調節能力而達到&lt;font color=red>自律&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>身教重於言教&lt;/font>&lt;/li>
&lt;li>使用「&lt;font color=red>漣漪效應&lt;/font>」（庫寧，J. Kounin）&lt;/li>
&lt;/ul>
&lt;h1 id="認知主義學派學習理論">&lt;a href="#%e8%aa%8d%e7%9f%a5%e4%b8%bb%e7%be%a9%e5%ad%b8%e6%b4%be%e5%ad%b8%e7%bf%92%e7%90%86%e8%ab%96" class="header-anchor">&lt;/a>認知主義學派學習理論
&lt;/h1>&lt;ul>
&lt;li>主要觀點：
&lt;ul>
&lt;li>注意到人類行為的&lt;font color=blue>內在歷程&lt;/font>解釋&lt;/li>
&lt;li>主張學習乃是&lt;font color=blue>內在知識狀態&lt;/font>的改變，而&lt;font color=blue>非外顯行為反應的改變&lt;/font>&lt;/li>
&lt;li>學習是個體在學習情境中，應用已有的認知結構去&lt;font color=red>認識&lt;/font>、&lt;font color=red>辨別&lt;/font>，以致&lt;font color=red>理解&lt;/font>外在事物間的關係，增加自己的經驗，從而&lt;font color=blue>擴大、提升自己的認知結構&lt;/font>，在既有知識基礎上獲得新知的歷程。&lt;/li>
&lt;li>認為學習是&lt;font color=red>內發的&lt;/font>與&lt;font color=red>主動的&lt;/font>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="發現學習論">&lt;a href="#%e7%99%bc%e7%8f%be%e5%ad%b8%e7%bf%92%e8%ab%96" class="header-anchor">&lt;/a>發現學習論
&lt;/h2>&lt;ul>
&lt;li>代表人物：布魯納 (Bruner)&lt;/li>
&lt;li>Bruner - &lt;font color=red>表徵系統論&lt;/font>：
&lt;ul>
&lt;li>&lt;font color=blue>動作表徵&lt;/font>：運用動作來認識世界。&lt;/li>
&lt;li>&lt;font color=blue>形象表徵&lt;/font>：以實際物體存留於記憶中的心象來獲得知識。&lt;/li>
&lt;li>&lt;font color=blue>符號表徵&lt;/font>：運用符號、語言來獲得知識。&lt;/li>
&lt;li>正確或錯誤答案皆具「&lt;font color=red>回饋&lt;/font>」價值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="意義學習論意義接受學習">&lt;a href="#%e6%84%8f%e7%be%a9%e5%ad%b8%e7%bf%92%e8%ab%96%e6%84%8f%e7%be%a9%e6%8e%a5%e5%8f%97%e5%ad%b8%e7%bf%92" class="header-anchor">&lt;/a>意義學習論（意義接受學習）
&lt;/h2>&lt;ul>
&lt;li>代表人物：奧蘇貝爾 (Ausubel)&lt;/li>
&lt;li>理論觀點：
&lt;ul>
&lt;li>教師教學必須&lt;font color=blue>配合學生的認知結構&lt;/font>，以產生「&lt;font color=blue>有意義的學習&lt;/font>」。&lt;/li>
&lt;li>&lt;font color=red>要領概念&lt;/font>
&lt;ul>
&lt;li>係指對事物的整體而長期概念&lt;/li>
&lt;li>就是人的先備知識。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=red>附屬概念&lt;/font>
&lt;ul>
&lt;li>係指對事務的細部、短暫概念&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>「&lt;font color=red>前導組織&lt;/font>」的提供：係指將新知識中的主要概念整理出來，作為學生學習新知識之前的理解，此舉將有助於新知識與舊知識相互串結。&lt;/li>
&lt;li>教材的呈現採取「&lt;font color=blue>漸進分化&lt;/font>」（從一般概念到詳細內容講解）與「&lt;font color=blue>統整協調&lt;/font>」（將分化知識加以統整）兩個原則。&lt;/li>
&lt;/ul>
&lt;h2 id="訊息處理理論學習信息加工論">&lt;a href="#%e8%a8%8a%e6%81%af%e8%99%95%e7%90%86%e7%90%86%e8%ab%96%e5%ad%b8%e7%bf%92%e4%bf%a1%e6%81%af%e5%8a%a0%e5%b7%a5%e8%ab%96" class="header-anchor">&lt;/a>訊息處理理論（學習信息加工論）
&lt;/h2>&lt;ul>
&lt;li>意義：個體學習歷程中，從接受刺激到反映的心裡歷程，稱為訊息處理過程。&lt;/li>
&lt;li>理論觀點：
&lt;ul>
&lt;li>&lt;font color=red>感官收錄&lt;/font>：係指因為感官所收錄的極短暫記憶。&lt;/li>
&lt;li>&lt;font color=red>短期記憶&lt;/font>：因感官收錄，經過注意之後所存的短期記憶。其中能再透過「運作記憶」，以對訊息作更深層的理解。&lt;/li>
&lt;li>&lt;font color=red>長期記憶&lt;/font>：透過「複習」，使得短期記憶能進入長期記憶。包括「&lt;font color=blue>情節記憶&lt;/font>」（生活情節的實況記憶）與「&lt;font color=blue>語意記憶&lt;/font>」（語文所表達的意義之記憶，包括&lt;font color=blue>陳述性知識&lt;/font>與&lt;font color=blue>程序性知識&lt;/font>）。(G. Miller - &lt;font color=blue>意元集組&lt;/font>)&lt;/li>
&lt;li>訊息處理過程：輸入、編碼(多碼)、貯存、檢索(&lt;font color=red>舌尖效應&lt;/font>)、解碼、輸出。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="認知主義理論的教育應用">&lt;a href="#%e8%aa%8d%e7%9f%a5%e4%b8%bb%e7%be%a9%e7%90%86%e8%ab%96%e7%9a%84%e6%95%99%e8%82%b2%e6%87%89%e7%94%a8" class="header-anchor">&lt;/a>認知主義理論的教育應用
&lt;/h1>&lt;h2 id="啟發式教學法">&lt;a href="#%e5%95%9f%e7%99%bc%e5%bc%8f%e6%95%99%e5%ad%b8%e6%b3%95" class="header-anchor">&lt;/a>啟發式教學法
&lt;/h2>&lt;ul>
&lt;li>理論基礎：布魯納的發現學習論&lt;/li>
&lt;li>特點：
&lt;ul>
&lt;li>安排&lt;font color=red>具結構性&lt;/font>的學習環境。&lt;/li>
&lt;li>教師事前講解明確、清楚。&lt;/li>
&lt;li>再由學生&lt;font color=blue>主動學習探索&lt;/font>。&lt;/li>
&lt;li>提供&lt;font color=blue>螺旋式課程&lt;/font>（邏輯組織化、加深加廣）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可能限制
&lt;ul>
&lt;li>學生必先具有相當的&lt;font color=red>先備知識&lt;/font>與&lt;font color=red>先備技能&lt;/font>，否則無從主動從事發現學習，故較不適合小學中低年級。&lt;/li>
&lt;li>自行探索遭遇疑難時，若求助教師卻又不得要領，恐會減低其求知動機。&lt;/li>
&lt;li>團體討論時間常被能言善道的少數學生所佔據，影響其他兒童學習機會。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="講解式教學法">&lt;a href="#%e8%ac%9b%e8%a7%a3%e5%bc%8f%e6%95%99%e5%ad%b8%e6%b3%95" class="header-anchor">&lt;/a>講解式教學法
&lt;/h2>&lt;ul>
&lt;li>理論基礎：奧蘇貝爾的意義學習論&lt;/li>
&lt;li>講解式教學法（&lt;font color=blue>闡釋性教學&lt;/font>）之特點，包括三階段：
&lt;ul>
&lt;li>提供前導組織&lt;/li>
&lt;li>呈現教材&lt;/li>
&lt;li>講解教材（採取「漸進分化」與「統整協調」)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="後設認知">&lt;a href="#%e5%be%8c%e8%a8%ad%e8%aa%8d%e7%9f%a5" class="header-anchor">&lt;/a>後設認知
&lt;/h2>&lt;ul>
&lt;li>理論基礎：訊息處理理論&lt;/li>
&lt;li>後設認知（Metacognition）意涵：
&lt;ul>
&lt;li>後設認知是指一個人對&lt;font color=blue>自己認知的歷程、結果的再認知&lt;/font>。&lt;/li>
&lt;li>後設認知包括三方面的認知
&lt;ul>
&lt;li>後設認知&lt;font color=red>知識&lt;/font>&lt;/li>
&lt;li>後設認知&lt;font color=red>經驗&lt;/font>&lt;/li>
&lt;li>後設認知&lt;font color=red>技能&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="人本主義學派學習理論">&lt;a href="#%e4%ba%ba%e6%9c%ac%e4%b8%bb%e7%be%a9%e5%ad%b8%e6%b4%be%e5%ad%b8%e7%bf%92%e7%90%86%e8%ab%96" class="header-anchor">&lt;/a>人本主義學派學習理論
&lt;/h1>&lt;ul>
&lt;li>理論基礎
&lt;ul>
&lt;li>受當&lt;font color=blue>存在主義&lt;/font>與&lt;font color=blue>現象學&lt;/font>等等&lt;font color=blue>以人為本&lt;/font>的哲學思想派別影響&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>學派主要觀點
&lt;ul>
&lt;li>重視個體的&lt;font color=blue>獨特性&lt;/font>與&lt;font color=blue>價值性&lt;/font>&lt;/li>
&lt;li>重視人的主觀意識經驗&lt;/li>
&lt;li>人具有&lt;font color=blue>學習的潛能&lt;/font>，以及對外界事物具&lt;font color=blue>好奇心&lt;/font>&lt;/li>
&lt;li>人性的最高價值在於&lt;font color=blue>自我實現與自我超越&lt;/font>，故個體行為受到自我實現與自我超越需求的驅使&lt;/li>
&lt;li>有別於行為主義側重行為或認知學派側重行為與知識學習，人本主義較&lt;font color=blue>關心學習歷程的感受&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="馬斯洛-maslow---需求層次論">&lt;a href="#%e9%a6%ac%e6%96%af%e6%b4%9b-maslow---%e9%9c%80%e6%b1%82%e5%b1%a4%e6%ac%a1%e8%ab%96" class="header-anchor">&lt;/a>馬斯洛 (Maslow) - 需求層次論
&lt;/h2>&lt;ul>
&lt;li>人類需求層次為
&lt;ul>
&lt;li>基本需求
&lt;ul>
&lt;li>生理需求&lt;/li>
&lt;li>安全需求&lt;/li>
&lt;li>愛與隸屬需求&lt;/li>
&lt;li>尊嚴需求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>衍生需求
&lt;ul>
&lt;li>認知需求&lt;/li>
&lt;li>審美需求&lt;/li>
&lt;li>自我實現需求&lt;/li>
&lt;li>自我超越需求&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>重視學習的&lt;font color=blue>內發&lt;/font>，而非靠外鑠，亦即從&lt;font color=blue>學生的需求&lt;/font>著手，引導學生學習&lt;/li>
&lt;li>&lt;font color=red>高峰經驗&lt;/font>：係指個人在朝目標努力過程中，當獲致成功的時刻，心理的感受與滿足感&lt;/li>
&lt;/ul>
&lt;h2 id="康布斯-combs---場知覺論">&lt;a href="#%e5%ba%b7%e5%b8%83%e6%96%af-combs---%e5%a0%b4%e7%9f%a5%e8%a6%ba%e8%ab%96" class="header-anchor">&lt;/a>康布斯 (Combs) - 場知覺論
&lt;/h2>&lt;ul>
&lt;li>&lt;font color=red>知覺&lt;/font>：係指人對環境的感受，與認知心理學的「知覺」不同。&lt;/li>
&lt;li>教師必須深入理解&lt;font color=blue>學生所處的情境&lt;/font>，才能體會其知覺感受&lt;/li>
&lt;li>改變學生行為不能僅從外在行為作改變，而應該觸及&lt;font color=red>知覺&lt;/font>與&lt;font color=red>價值&lt;/font>層次。&lt;/li>
&lt;li>實施&lt;font color=red>情意教育&lt;/font>的重要理論基礎。&lt;/li>
&lt;/ul>
&lt;h2 id="羅杰斯-rogers---人本治療學派">&lt;a href="#%e7%be%85%e6%9d%b0%e6%96%af-rogers---%e4%ba%ba%e6%9c%ac%e6%b2%bb%e7%99%82%e5%ad%b8%e6%b4%be" class="header-anchor">&lt;/a>羅杰斯 (Rogers) - 人本治療學派
&lt;/h2>&lt;ul>
&lt;li>&lt;font color=red>以學生為中心&lt;/font>：學校教育應該以學生為中心。&lt;/li>
&lt;li>「&lt;font color=red>自由學習&lt;/font>」原則：人天生具有&lt;font color=blue>學習的潛力&lt;/font>，教學要能提供學生&lt;font color=blue>無威脅的學習情境&lt;/font>。&lt;/li>
&lt;li>強調&lt;font color=blue>「真誠一致」、「無條件積極關注」、「同理心」&lt;/font>等師生互動關係。&lt;/li>
&lt;/ul>
&lt;h1 id="人本主義理論的教育應用">&lt;a href="#%e4%ba%ba%e6%9c%ac%e4%b8%bb%e7%be%a9%e7%90%86%e8%ab%96%e7%9a%84%e6%95%99%e8%82%b2%e6%87%89%e7%94%a8" class="header-anchor">&lt;/a>人本主義理論的教育應用
&lt;/h1>&lt;h2 id="教育主張">&lt;a href="#%e6%95%99%e8%82%b2%e4%b8%bb%e5%bc%b5" class="header-anchor">&lt;/a>教育主張
&lt;/h2>&lt;ul>
&lt;li>強調「&lt;font color=red>以學生為中心&lt;/font>」的教育理念&lt;/li>
&lt;li>學習是&lt;font color=blue>學生主動自願選擇&lt;/font>的結果，當教師教學讓學生感到有興趣時，學生才會自動學習&lt;/li>
&lt;li>學習貴在激發學生學習的&lt;font color=blue>潛能與創意&lt;/font>&lt;/li>
&lt;li>反獨重知識技能學習之缺失，認為學習不該侷限於知識與技能層面，也要包括&lt;font color=red>情意&lt;/font>層面&lt;/li>
&lt;li>學校為學生而設、教師為學生而教，宜提供&lt;font color=blue>自由與開放&lt;/font>之學習環境&lt;/li>
&lt;li>培養各種&lt;font color=red>人味兒&lt;/font>之人文素養 (如真誠、關懷、讚許、同理心等等)&lt;/li>
&lt;li>重視&lt;font color=red>全人教育&lt;/font>理念&lt;/li>
&lt;/ul>
&lt;h2 id="教育實踐方式">&lt;a href="#%e6%95%99%e8%82%b2%e5%af%a6%e8%b8%90%e6%96%b9%e5%bc%8f" class="header-anchor">&lt;/a>教育實踐方式
&lt;/h2>&lt;ul>
&lt;li>教學上的&lt;font color=blue>自由學習&lt;/font> (Freedom to Learn)&lt;/li>
&lt;li>&lt;font color=blue>合作學習&lt;/font> (Cooperative Learning)&lt;/li>
&lt;li>&lt;font color=blue>價值澄清教學法&lt;/font> (Value Clarification)&lt;/li>
&lt;li>&lt;font color=blue>開放教育&lt;/font> (Open Education)&lt;/li>
&lt;li>&lt;font color=blue>道德教育&lt;/font> (Moral Education)&lt;/li>
&lt;li>實際學校例子：英國夏山學校 (Summerhill) 、臺灣森林小學、毛毛蟲小學等等&lt;font color=blue>學校型態實驗教育&lt;/font>&lt;/li>
&lt;li>所受批判：當教師被學生打的時候？&lt;/li>
&lt;/ul></description></item><item><title>教育概論-04：教育的理論基礎 - 心理學 I</title><link>https://blog.smallten.me/p/introduction_to_education-04/</link><pubDate>Tue, 05 Apr 2022 02:25:06 +0800</pubDate><guid>https://blog.smallten.me/p/introduction_to_education-04/</guid><description>&lt;h1 id="發展理論">&lt;a href="#%e7%99%bc%e5%b1%95%e7%90%86%e8%ab%96" class="header-anchor">&lt;/a>發展理論
&lt;/h1>&lt;h2 id="身心發展研究">&lt;a href="#%e8%ba%ab%e5%bf%83%e7%99%bc%e5%b1%95%e7%a0%94%e7%a9%b6" class="header-anchor">&lt;/a>身心發展研究
&lt;/h2>&lt;ul>
&lt;li>影響人類發展的因素有：&lt;font color=blue>遺傳、環境、成熟、學習&lt;/font>&lt;/li>
&lt;li>個體出生前及出生後屬於生理的部分，受遺傳因素影響較大；而出生後屬於心理的部分及成熟階段，則受環境因素影響較大。&lt;/li>
&lt;li>個體幼稚階段及成熟階段屬於共同、基本的行為，受成熟因素影響較大；而特殊、複雜的行為，則受學習因素影響較大。&lt;/li>
&lt;/ul>
&lt;h2 id="認知發展研究">&lt;a href="#%e8%aa%8d%e7%9f%a5%e7%99%bc%e5%b1%95%e7%a0%94%e7%a9%b6" class="header-anchor">&lt;/a>認知發展研究
&lt;/h2>&lt;h3 id="piaget-的認知發展論">&lt;a href="#piaget-%e7%9a%84%e8%aa%8d%e7%9f%a5%e7%99%bc%e5%b1%95%e8%ab%96" class="header-anchor">&lt;/a>Piaget 的認知發展論
&lt;/h3>&lt;ul>
&lt;li>&lt;font color=red>基模&lt;/font>（schema）：又可稱作「認知結構」，個人透過基本行為模式，以對環境中的事物作出反應，進而獲得知識。故為個人用以了解世界的方式，且隨著經驗增多而趨於複雜。&lt;/li>
&lt;li>&lt;font color=red>適應&lt;/font>與&lt;font color=red>平衡&lt;/font>：「適應」代表個體在面臨外在環境的衝擊後，改變既有基模來適應環境，又可包括「&lt;font color=blue>同化&lt;/font>」與「&lt;font color=blue>調適&lt;/font>」兩種適應策略，前者將新經驗納入舊經驗之中，認知架構並無多大變化，後者則調整個人認知架構，以適應外在環境的要求；「平衡」係指個體透過「適應」的歷程，以使身心恢復穩定狀態。&lt;/li>
&lt;li>認知發展期：
&lt;ul>
&lt;li>&lt;font color=blue>感覺動作期&lt;/font>（0-2歲）
&lt;ul>
&lt;li>ex. 把東西塞嘴巴&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=blue>前運思期&lt;/font>（2-7歲）
&lt;ul>
&lt;li>不太能想像，需看實物理解&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=blue>具體運思期&lt;/font>（7-11歲）&lt;/li>
&lt;li>&lt;font color=blue>形式運思期&lt;/font>（11歲以上）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="vygotsky-的認知發展論">&lt;a href="#vygotsky-%e7%9a%84%e8%aa%8d%e7%9f%a5%e7%99%bc%e5%b1%95%e8%ab%96" class="header-anchor">&lt;/a>Vygotsky 的認知發展論
&lt;/h3>&lt;ul>
&lt;li>認為「&lt;font color=red>社會文化&lt;/font>」是影響認知發展的要素。&lt;/li>
&lt;li>「認知思維」與「&lt;font color=blue>自我語言&lt;/font>」之間，具有密切的關係，認為兒童的自我中心語言能幫助調和兒童的思維與行動，進而增進認知的發展。&lt;/li>
&lt;li>提出「&lt;font color=blue>近側發展區&lt;/font>」（可能發展區）的概念，係指介於兒童自己實力所能到達的水準與經別人協助之後所能到達的水準二者間的差距。&lt;/li>
&lt;li>主張透過「&lt;font color=red>鷹架作用&lt;/font>」，對兒童的學習提供必要的協助，以增進兒童認知的發展。&lt;/li>
&lt;/ul>
&lt;h2 id="社會發展研究">&lt;a href="#%e7%a4%be%e6%9c%83%e7%99%bc%e5%b1%95%e7%a0%94%e7%a9%b6" class="header-anchor">&lt;/a>社會發展研究
&lt;/h2>&lt;h3 id="erikson-的心理社會期發展論人格發展論">&lt;a href="#erikson-%e7%9a%84%e5%bf%83%e7%90%86%e7%a4%be%e6%9c%83%e6%9c%9f%e7%99%bc%e5%b1%95%e8%ab%96%e4%ba%ba%e6%a0%bc%e7%99%bc%e5%b1%95%e8%ab%96" class="header-anchor">&lt;/a>Erikson 的心理社會期發展論（人格發展論）
&lt;/h3>&lt;ul>
&lt;li>認為個體的社會發展，來自於與社會環境互動之後所產生&lt;/li>
&lt;li>個體在與社會環境互動過程中，會產生「&lt;font color=red>發展危機&lt;/font>」，且隨著年齡階段的不同，而有不同的發展危機存在。&lt;/li>
&lt;li>「發展危機」階段包括：
&lt;ul>
&lt;li>「信任對不信任」（0-1歲）&lt;/li>
&lt;li>「自主行動對羞怯懷疑」（1-3歲）&lt;/li>
&lt;li>「自動自發對退縮愧疚」（3-6歲）&lt;/li>
&lt;li>「&lt;font color=blue>勤奮進取對自貶自卑&lt;/font>」（6歲至青春期）&lt;/li>
&lt;li>「&lt;font color=blue>自我統合對角色混亂&lt;/font>」（青年期）&lt;/li>
&lt;li>「友愛親密對孤僻疏離」（成年期）&lt;/li>
&lt;li>「精力充沛對頹廢遲滯」（中年期）&lt;/li>
&lt;li>「完美無缺對悲觀絕望」（老年期）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="kohlberg的道德發展論">&lt;a href="#kohlberg%e7%9a%84%e9%81%93%e5%be%b7%e7%99%bc%e5%b1%95%e8%ab%96" class="header-anchor">&lt;/a>Kohlberg的道德發展論
&lt;/h3>&lt;ul>
&lt;li>迥異於Piaget的道德觀點，Piaget認為道德發展從「無律」、「他律」到「自律」，Kohlberg則提倡「&lt;font color=red>三期六段論&lt;/font>」。
&lt;ul>
&lt;li>「&lt;font color=blue>道德成規前期&lt;/font>」（9歲以前）（自我中心取向）：
&lt;ul>
&lt;li>階段一 - 避免懲罰與服從權威&lt;/li>
&lt;li>階段二 - 利益交換取向&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>「&lt;font color=blue>道德成規期&lt;/font>」（10-20歲以前）（社會中心取向）：
&lt;ul>
&lt;li>階段三 - 尋求認可&lt;/li>
&lt;li>階段四 - 遵守法規&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>「&lt;font color=blue>道德成規後期&lt;/font>」（20歲以後）（獨立自主判斷取向）：
&lt;ul>
&lt;li>階段五 - 重視基本人權，不死板遵守法律&lt;/li>
&lt;li>階段六 - 追求人性尊嚴與社會正義&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>補充資料：&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E6%B5%B7%E5%9B%A0%E8%8C%A8%E5%81%B7%E8%8D%AF" target="_blank" rel="noopener"
>海因茨偷藥&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>主要是運用&lt;font color=red>道德兩難式教學&lt;/font>，以判斷學生的道德發展階段。&lt;/li>
&lt;/ul>
&lt;h1 id="行為主義學派學習理論">&lt;a href="#%e8%a1%8c%e7%82%ba%e4%b8%bb%e7%be%a9%e5%ad%b8%e6%b4%be%e5%ad%b8%e7%bf%92%e7%90%86%e8%ab%96" class="header-anchor">&lt;/a>行為主義學派學習理論
&lt;/h1>&lt;h2 id="學派主要觀點">&lt;a href="#%e5%ad%b8%e6%b4%be%e4%b8%bb%e8%a6%81%e8%a7%80%e9%bb%9e" class="header-anchor">&lt;/a>學派主要觀點
&lt;/h2>&lt;ul>
&lt;li>透過客觀方式分析人類行為，而構成行為的基礎為個體的&lt;font color=red>反應&lt;/font>。&lt;/li>
&lt;li>個體的反應主要來自於&lt;font color=blue>外在環境的刺激&lt;/font>，因此個體的行為並非全為遺傳，而是可以透過外在環境刺激的提供，型塑所欲行為。&lt;/li>
&lt;li>強調&lt;font color=blue>刺激與反應連結&lt;/font>間的關係，並提供&lt;font color=red>增強物&lt;/font>，以保留所欲目標。&lt;/li>
&lt;/ul>
&lt;h2 id="古典制約">&lt;a href="#%e5%8f%a4%e5%85%b8%e5%88%b6%e7%b4%84" class="header-anchor">&lt;/a>古典制約
&lt;/h2>&lt;ul>
&lt;li>&lt;font color=red>搭配本能&lt;/font>&lt;/li>
&lt;li>Pavlov「狗唾液實驗」：
&lt;ul>
&lt;li>CS（鈴聲）-&amp;gt; 唾液不分泌&lt;/li>
&lt;li>UCS（食物）-&amp;gt; 唾液分泌&lt;/li>
&lt;li>CS（鈴聲）-&amp;gt; 唾液分泌&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Watson「教育萬能論」：重視心理學的科學化，認為古典制約原則可適用於人類行為上，因此主張「教育萬能論」。&lt;/li>
&lt;/ul>
&lt;h2 id="操作制約">&lt;a href="#%e6%93%8d%e4%bd%9c%e5%88%b6%e7%b4%84" class="header-anchor">&lt;/a>操作制約
&lt;/h2>&lt;ul>
&lt;li>&lt;font color=red>透過設計&lt;/font>&lt;/li>
&lt;li>Thorndike「貓取食實驗」：（學習心理學之父）
&lt;ul>
&lt;li>&lt;font color=red>嘗試錯誤&lt;/font>：與 Pavlov 的刺激反應聯結不同，Thorndike 是從動物的多種反應中，選定某特定動作，給予增強，以強化該行為出現的機會，從嘗試錯誤中提升正確的機率（&lt;font color=blue>後效強化&lt;/font>）。&lt;/li>
&lt;li>&lt;font color=red>學習律&lt;/font>：&lt;font color=blue>練習律&lt;/font>（不斷練習）、&lt;font color=blue>準備律&lt;/font>（身心準備狀態）、&lt;font color=blue>效果律&lt;/font>（預期反應出現後的獎賞）。&lt;/li>
&lt;li>&lt;font color=red>學習遷移&lt;/font>：將舊情境的刺激反應聯結，運用在新的情境中，但二者情境必須相類似（同元素論）。
&lt;ul>
&lt;li>ex. 把學校學到的知識用於生活&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Skinner 操作制約「Skinner 箱」：（極端行為主義者）
&lt;ul>
&lt;li>亦強調從個人的多種反應中，選定某特定動作，給予增強，以強化該行為出現的機會，從嘗試錯誤中提升正確的機率（&lt;font color=blue>後效強化&lt;/font>）。&lt;/li>
&lt;li>凡能使個人增加「操作性反應」頻率的一切安排，皆可稱之為「&lt;font color=red>增強物&lt;/font>」。&lt;/li>
&lt;li>增強又可分為「&lt;font color=blue>立即增強&lt;/font>與&lt;font color=blue>延宕增強&lt;/font>」與「&lt;font color=blue>連續增強&lt;/font>與&lt;font color=blue>部分增強&lt;/font>」。&lt;/li>
&lt;li>行為塑造：係指運用分解動作方式，配合「後效強化」，使個體學習一系列的動作。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>操作制約原則：
&lt;ul>
&lt;li>&lt;font color=red>增強&lt;/font>：運用增強物，使某反應獲得增強，以提升其出現頻率（正增強與負增強）。&lt;/li>
&lt;li>&lt;font color=red>刺激類化&lt;/font>與&lt;font color=red>辨別&lt;/font>：
&lt;ul>
&lt;li>「刺激類化」係指對相同的刺激產生相同的制約反應&lt;/li>
&lt;li>「刺激辨別」係指只對強化過的刺激有所反應。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=red>消弱&lt;/font>：制約反應出現後，無給予增強物，一段時間後，將會使制約反應消失。&lt;/li>
&lt;li>&lt;font color=red>自發恢復&lt;/font>：係指消弱之後，雖未給予增強物，但仍可能會有制約反應出現，但為期不會太久。&lt;/li>
&lt;li>&lt;font color=red>高級制約&lt;/font>：係指將第一級制約轉變成第二級制約，如此反覆進行，稱之為「高級制約」作用。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="要點歸結">&lt;a href="#%e8%a6%81%e9%bb%9e%e6%ad%b8%e7%b5%90" class="header-anchor">&lt;/a>要點歸結
&lt;/h2>&lt;ul>
&lt;li>學習是&lt;font color=blue>外顯行為改變&lt;/font>的歷程&lt;/li>
&lt;li>對學習時內在心理歷程的變化，並不予以解釋&lt;/li>
&lt;li>強調&lt;font color=blue>外在環境&lt;/font>刺激對學習的影響&lt;/li>
&lt;li>教學應研訂&lt;font color=blue>可觀察、可測量&lt;/font>的行為目標來指引教學過程&lt;/li>
&lt;li>鼓勵在教學過程中&lt;font color=blue>善用獎勵與懲罰&lt;/font>來改變行為，以促進學習&lt;/li>
&lt;/ul>
&lt;h1 id="行為主義理論應用">&lt;a href="#%e8%a1%8c%e7%82%ba%e4%b8%bb%e7%be%a9%e7%90%86%e8%ab%96%e6%87%89%e7%94%a8" class="header-anchor">&lt;/a>行為主義理論應用
&lt;/h1>&lt;h2 id="行為改變技術">&lt;a href="#%e8%a1%8c%e7%82%ba%e6%94%b9%e8%ae%8a%e6%8a%80%e8%a1%93" class="header-anchor">&lt;/a>行為改變技術
&lt;/h2>&lt;ul>
&lt;li>行為改變技術定義：應用行為學習論來&lt;font color=red>改變&lt;/font>個體已有行為或&lt;font color=red>矯治&lt;/font>不良行為之技術&lt;/li>
&lt;/ul>
&lt;h3 id="正增強-負增強">&lt;a href="#%e6%ad%a3%e5%a2%9e%e5%bc%b7-%e8%b2%a0%e5%a2%9e%e5%bc%b7" class="header-anchor">&lt;/a>正增強 (負增強)
&lt;/h3>&lt;ul>
&lt;li>定義：在兒童表現某一種正確的行為之後，立即給予酬賞(移除討厭事物)，用以增進或增加某一行為的能力。&lt;/li>
&lt;li>學生在校的可能增強物
&lt;ul>
&lt;li>&lt;font color=blue>社會性增強物&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>物質性增強物&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>活動性增強物&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>代幣制增強物&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="忽視法">&lt;a href="#%e5%bf%bd%e8%a6%96%e6%b3%95" class="header-anchor">&lt;/a>忽視法
&lt;/h3>&lt;ul>
&lt;li>定義：故意不理會他人的行為&lt;/li>
&lt;/ul>
&lt;h3 id="過度矯正法">&lt;a href="#%e9%81%8e%e5%ba%a6%e7%9f%af%e6%ad%a3%e6%b3%95" class="header-anchor">&lt;/a>過度矯正法
&lt;/h3>&lt;ul>
&lt;li>定義：指&lt;font color=blue>塑造一個比錯誤發生前更好情境&lt;/font>的一種方式，也是讓學生學會自我負責的方式，亦即立刻透過一種具有「教育功能」的活動來懲罰個體。&lt;/li>
&lt;li>例如：學生若打破教室玻璃，除了得賠玻璃錢外，還必須從此負責玻璃的清潔工作。&lt;/li>
&lt;/ul>
&lt;h2 id="編序教學法">&lt;a href="#%e7%b7%a8%e5%ba%8f%e6%95%99%e5%ad%b8%e6%b3%95" class="header-anchor">&lt;/a>編序教學法
&lt;/h2>&lt;ul>
&lt;li>定義：將教材按照&lt;font color=blue>從簡而繁、由淺入深&lt;/font>的順序設計，就像階梯一樣，循序漸升，最後達到預定的教學目標，且學生在學習過程中，能&lt;font color=blue>立即核對&lt;/font>結果，便能&lt;font color=red>增強&lt;/font>學習效果。&lt;/li>
&lt;li>原則：
&lt;ul>
&lt;li>確定學生的&lt;font color=red>起點行為&lt;/font>以及&lt;font color=red>終點行為&lt;/font>&lt;/li>
&lt;li>將教材細分成很多小單元，個單元彼此有關聯性，且由易而難&lt;/li>
&lt;li>每個小單元代表一個步階，代表一個概念或問題，並有正確答案（&lt;font color=red>連續漸進法&lt;/font>）&lt;/li>
&lt;li>回答之後立即出現正確答案，使學生從回饋中得以核對自己的反應（&lt;font color=red>後效強化&lt;/font>）（&lt;font color=blue>電腦輔助教學,CAI&lt;/font>）&lt;/li>
&lt;li>自我主動學習、自我掌握學習速度（&lt;font color=red>個別化教學&lt;/font>）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>優點：
&lt;ul>
&lt;li>改進教材組織，由易而難、循序漸進，以利學生學習&lt;/li>
&lt;li>符合個別化教學習的原則，充分適應個別差異&lt;/li>
&lt;li>維持學習動機，排除外因干擾&lt;/li>
&lt;li>易於&lt;font color=blue>診斷學習困難&lt;/font>和&lt;font color=blue>進行補救教學&lt;/font>&lt;/li>
&lt;li>學習者可立即獲知答案對錯之結果，符合立即增強的原理&lt;/li>
&lt;li>效果因人而異，能力較高個性獨立的學生，較適合編序教學。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>缺點：
&lt;ul>
&lt;li>強調教材學習，限制創造思考的發展&lt;/li>
&lt;li>學習多靠視覺與動作，&lt;font color=blue>缺乏教育歷程中的社會功能&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>教材編製不易&lt;/font>，普遍採用困難&lt;/li>
&lt;li>學生&lt;font color=blue>完成作業進度不一&lt;/font>，可能導致學習進度和連續性訓練的問題&lt;/li>
&lt;li>&lt;font color=blue>缺乏師生互動&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>教育概論-03：教育的理論基礎 - 哲學 II</title><link>https://blog.smallten.me/p/introduction_to_education-03/</link><pubDate>Tue, 05 Apr 2022 00:40:30 +0800</pubDate><guid>https://blog.smallten.me/p/introduction_to_education-03/</guid><description>&lt;ul>
&lt;li>教師（學科）取向的哲學派別：&lt;a class="link" href="./#%e7%90%86%e6%80%a7%e4%b8%bb%e7%be%a9" >理性主義&lt;/a>、&lt;a class="link" href="./#%e7%b6%93%e9%a9%97%e4%b8%bb%e7%be%a9" >經驗主義&lt;/a>、&lt;a class="link" href="./#%e6%89%b9%e8%a9%95%e4%b8%bb%e7%be%a9" >批評主義&lt;/a>&lt;/li>
&lt;li>學生（興趣）取向的哲學派別：&lt;a class="link" href="./#%e5%af%a6%e7%94%a8%e4%b8%bb%e7%be%a9" >實用主義&lt;/a>、&lt;a class="link" href="./#%e5%ad%98%e5%9c%a8%e4%b8%bb%e7%be%a9" >存在主義&lt;/a>&lt;/li>
&lt;li>社會（批判）取向的哲學派別：&lt;a class="link" href="./#%e5%be%8c%e7%8f%be%e4%bb%a3%e4%b8%bb%e7%be%a9" >後現代主義&lt;/a>、&lt;a class="link" href="./#%e6%89%b9%e5%88%a4%e7%90%86%e8%ab%96" >批判理論&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="教師學科取向的哲學派別">&lt;a href="#%e6%95%99%e5%b8%ab%e5%ad%b8%e7%a7%91%e5%8f%96%e5%90%91%e7%9a%84%e5%93%b2%e5%ad%b8%e6%b4%be%e5%88%a5" class="header-anchor">&lt;/a>教師（學科）取向的哲學派別
&lt;/h1>&lt;h2 id="理性主義">&lt;a href="#%e7%90%86%e6%80%a7%e4%b8%bb%e7%be%a9" class="header-anchor">&lt;/a>理性主義
&lt;/h2>&lt;ul>
&lt;li>代表人物：蘇格拉底(Socrates) 、柏拉圖(Plato)、亞里斯多德(Aristotle) 、笛卡兒（Descartes）&lt;/li>
&lt;/ul>
&lt;h3 id="哲學觀">&lt;a href="#%e5%93%b2%e5%ad%b8%e8%a7%80" class="header-anchor">&lt;/a>哲學觀
&lt;/h3>&lt;ul>
&lt;li>形上學：
&lt;ul>
&lt;li>世界是二元劃分的，一為表層世界（&lt;font color=red>現象界&lt;/font>），另一則是終極的觀念世界（&lt;font color=red>觀念界&lt;/font>）。（&lt;font color=red>洞穴寓言&lt;/font>）&lt;/li>
&lt;li>個體特殊的、&lt;font color=red>變動的&lt;/font>感覺經驗存在於現象界，而&lt;font color=red>永恆不變的&lt;/font>觀念（&lt;font color=blue>真、善、美、正義、幸福&lt;/font>等等）則存在於觀念界。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>知識論：
&lt;ul>
&lt;li>知識是&lt;font color=blue>永恆、普遍性&lt;/font>的存在，並只存在於終極的觀念世界&lt;/li>
&lt;li>透過&lt;font color=blue>天啟、頓悟&lt;/font>而獲得知識&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>價值論
&lt;ul>
&lt;li>倫理生活必須與「普遍道德律」結合。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="教育主張">&lt;a href="#%e6%95%99%e8%82%b2%e4%b8%bb%e5%bc%b5" class="header-anchor">&lt;/a>教育主張
&lt;/h3>&lt;ul>
&lt;li>教育目的：
&lt;ul>
&lt;li>著重&lt;font color=blue>理性的啟發&lt;/font>、訓練學生&lt;font color=blue>天生的官能&lt;/font>、找尋真理。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=red>博雅教育&lt;/font>：具知識、文雅與善良的人&lt;/li>
&lt;li>課程內容：
&lt;ul>
&lt;li>重視&lt;font color=blue>傳統學科、人文學科&lt;/font>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>教學方法：
&lt;ul>
&lt;li>&lt;font color=blue>頓悟&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>詰問法（產婆法）&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>演繹法&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>形式訓練說&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="師生關係">&lt;a href="#%e5%b8%ab%e7%94%9f%e9%97%9c%e4%bf%82" class="header-anchor">&lt;/a>師生關係
&lt;/h3>&lt;ul>
&lt;li>強調&lt;font color=red>教師的重要性&lt;/font>，教師是促進學生改變的關鍵，教育的動力來自於教師，而非學生。&lt;/li>
&lt;/ul>
&lt;h2 id="經驗主義">&lt;a href="#%e7%b6%93%e9%a9%97%e4%b8%bb%e7%be%a9" class="header-anchor">&lt;/a>經驗主義
&lt;/h2>&lt;ul>
&lt;li>代表人物：培根(Bacon)、洛克(Locke)&lt;/li>
&lt;/ul>
&lt;h3 id="哲學觀-1">&lt;a href="#%e5%93%b2%e5%ad%b8%e8%a7%80-1" class="header-anchor">&lt;/a>哲學觀
&lt;/h3>&lt;ul>
&lt;li>形上學：
&lt;ul>
&lt;li>終極實體不存在於心靈中，而是依循自然法則運作之事物。&lt;/li>
&lt;li>&lt;font color=blue>心靈是經驗的產物&lt;/font>&lt;/li>
&lt;li>心靈的增長來自於經驗的融合&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>知識論：
&lt;ul>
&lt;li>主張&lt;font color=blue>人心如白板&lt;/font>&lt;/li>
&lt;li>知識主要來源為&lt;font color=blue>感官經驗&lt;/font>&lt;/li>
&lt;li>&lt;font color=red>歸納法（新工具）&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>知識就是力量&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>破除四大偶像&lt;/font>：種族偶像、洞穴偶像、市場偶像、劇場偶像&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>價值論：
&lt;ul>
&lt;li>價值隨著時空而改變&lt;/li>
&lt;li>倫理學基於&lt;font color=red>自然規律&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="教育主張-1">&lt;a href="#%e6%95%99%e8%82%b2%e4%b8%bb%e5%bc%b5-1" class="header-anchor">&lt;/a>教育主張
&lt;/h3>&lt;ul>
&lt;li>教育目的：
&lt;ul>
&lt;li>讓學習者&lt;font color=blue>獲得實質的知識&lt;/font>&lt;/li>
&lt;li>適應社會以及自然&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>課程內容：
&lt;ul>
&lt;li>側重於「&lt;font color=red>實物&lt;/font>」，講求唯實學科與自然學科&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>教學方法：
&lt;ul>
&lt;li>重視&lt;font color=blue>實物教學法&lt;/font>以及&lt;font color=blue>旅行體驗&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>科學研究實驗&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="師生關係-1">&lt;a href="#%e5%b8%ab%e7%94%9f%e9%97%9c%e4%bf%82-1" class="header-anchor">&lt;/a>師生關係
&lt;/h3>&lt;ul>
&lt;li>以&lt;font color=blue>學生的需求及興趣&lt;/font>為主，&lt;font color=red>教師屬於輔導角色&lt;/font>&lt;/li>
&lt;li>教師必須要考量到學生的&lt;font color=blue>自願性與個別差異&lt;/font>&lt;/li>
&lt;/ul>
&lt;h2 id="批評主義">&lt;a href="#%e6%89%b9%e8%a9%95%e4%b8%bb%e7%be%a9" class="header-anchor">&lt;/a>批評主義
&lt;/h2>&lt;ul>
&lt;li>理性主義與經驗主義的調和者&lt;/li>
&lt;li>代表人物：康德 (I. Kant)&lt;/li>
&lt;/ul>
&lt;h3 id="哲學觀-2">&lt;a href="#%e5%93%b2%e5%ad%b8%e8%a7%80-2" class="header-anchor">&lt;/a>哲學觀
&lt;/h3>&lt;ul>
&lt;li>知識：&lt;font color=red>先天形式&lt;/font>（內在理性範疇） + &lt;font color=red>後天經驗&lt;/font>（外在感官經驗）&lt;/li>
&lt;li>內在知識範疇包括十二種形式：&lt;font color=blue>量、質、關係、樣式&lt;/font>範疇&lt;/li>
&lt;li>知識的形式具有&lt;font color=red>一致性&lt;/font>，但知識的內容則沒有一致性標準 (&lt;font color=red>主體建構&lt;/font>而來)&lt;/li>
&lt;/ul>
&lt;h3 id="教育啟示">&lt;a href="#%e6%95%99%e8%82%b2%e5%95%9f%e7%a4%ba" class="header-anchor">&lt;/a>教育啟示
&lt;/h3>&lt;ul>
&lt;li>教育必須要&lt;font color=red>學思並重&lt;/font>
&lt;ul>
&lt;li>提升學生的&lt;font color=blue>自我反省&lt;/font>能力&lt;/li>
&lt;li>提升學生&lt;font color=blue>正確辨識知識&lt;/font>的能力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="學生興趣取向的哲學派別">&lt;a href="#%e5%ad%b8%e7%94%9f%e8%88%88%e8%b6%a3%e5%8f%96%e5%90%91%e7%9a%84%e5%93%b2%e5%ad%b8%e6%b4%be%e5%88%a5" class="header-anchor">&lt;/a>學生（興趣）取向的哲學派別
&lt;/h1>&lt;h2 id="實用主義">&lt;a href="#%e5%af%a6%e7%94%a8%e4%b8%bb%e7%be%a9" class="header-anchor">&lt;/a>實用主義
&lt;/h2>&lt;ul>
&lt;li>代表人物：杜威&lt;/li>
&lt;/ul>
&lt;h3 id="哲學觀-3">&lt;a href="#%e5%93%b2%e5%ad%b8%e8%a7%80-3" class="header-anchor">&lt;/a>哲學觀
&lt;/h3>&lt;ul>
&lt;li>形上學：
&lt;ul>
&lt;li>&lt;font color=red>經驗&lt;/font>在於擴充的心靈內涵&lt;/li>
&lt;li>&lt;font color=red>智慧&lt;/font>是心靈的最高表現&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>知識論：
&lt;ul>
&lt;li>知識來自於&lt;font color=blue>個體與環境的互動&lt;/font>，是一個&lt;font color=blue>經驗不斷的重組與改造&lt;/font>的過程。&lt;/li>
&lt;li>知識的特質：&lt;font color=blue>繼續性、工具性、試驗性、行動性、創造性&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>價值論：
&lt;ul>
&lt;li>價值發生於是否有用（&lt;font color=blue>有用者為真&lt;/font>），且是&lt;font color=red>不斷變化&lt;/font>的&lt;/li>
&lt;li>人性是可變的 (人沒有固定的善惡)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="教育主張-2">&lt;a href="#%e6%95%99%e8%82%b2%e4%b8%bb%e5%bc%b5-2" class="header-anchor">&lt;/a>教育主張
&lt;/h3>&lt;ul>
&lt;li>教育目的：
&lt;ul>
&lt;li>&lt;font color=red>教育無目的&lt;/font>（僅有內在目的，而無外在目的）&lt;/li>
&lt;li>&lt;font color=red>教育即生長&lt;/font>（讓學習者成長與發展的持續過程）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>課程內容：
&lt;ul>
&lt;li>教育要提供&lt;font color=blue>活生生的生活經驗&lt;/font>（&lt;font color=blue>活動課程&lt;/font>）&lt;/li>
&lt;li>教育內容必須要與&lt;font color=blue>興趣&lt;/font>及努力融合&lt;/li>
&lt;li>教育知識必須要能&lt;font color=blue>運用於生活之中&lt;/font>（教育即生活）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>教學方法：
&lt;ul>
&lt;li>&lt;font color=red>做中學&lt;/font> (實際操作與體驗)&lt;/li>
&lt;li>&lt;font color=red>問題教學法&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="師生關係-2">&lt;a href="#%e5%b8%ab%e7%94%9f%e9%97%9c%e4%bf%82-2" class="header-anchor">&lt;/a>師生關係
&lt;/h3>&lt;ul>
&lt;li>教師為輔導者&lt;/li>
&lt;li>學生為主體者&lt;/li>
&lt;/ul>
&lt;h2 id="存在主義">&lt;a href="#%e5%ad%98%e5%9c%a8%e4%b8%bb%e7%be%a9" class="header-anchor">&lt;/a>存在主義
&lt;/h2>&lt;ul>
&lt;li>代表人物：祁克果、尼采、海德格&lt;/li>
&lt;/ul>
&lt;h3 id="哲學觀-4">&lt;a href="#%e5%93%b2%e5%ad%b8%e8%a7%80-4" class="header-anchor">&lt;/a>哲學觀
&lt;/h3>&lt;ul>
&lt;li>形上學：
&lt;ul>
&lt;li>&lt;font color=blue>存在先於本質&lt;/font>：人的本質是個體主動建構而來。&lt;/li>
&lt;li>&lt;font color=blue>解決人類基本問題&lt;/font>：人的焦慮感、疏離感等等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>知識論：
&lt;ul>
&lt;li>強調主觀的真理，&lt;font color=blue>無任何先驗真理&lt;/font>存在&lt;/li>
&lt;li>真理是個體的內在生活體驗，是&lt;font color=blue>自我主動建構&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>價值論：
&lt;ul>
&lt;li>重視個人的&lt;font color=red>獨特性&lt;/font>以及&lt;font color=red>情性&lt;/font>&lt;/li>
&lt;li>強調個人&lt;font color=blue>自主意志、自主抉擇與負責、參與性&lt;/font>&lt;/li>
&lt;li>在憂慮中產生價值&lt;/li>
&lt;li>思考死亡的意義&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="教育觀">&lt;a href="#%e6%95%99%e8%82%b2%e8%a7%80" class="header-anchor">&lt;/a>教育觀
&lt;/h3>&lt;ul>
&lt;li>教育目的：
&lt;ul>
&lt;li>旨在培養&lt;font color=blue>自由且負責&lt;/font>的人&lt;/li>
&lt;li>培養人的氣質 (&lt;font color=blue>人味兒&lt;/font>的知情意教育)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>課程內容：
&lt;ul>
&lt;li>透過各種文學、藝術、舞蹈、戲劇等讓學生表現自我&lt;/li>
&lt;li>&lt;font color=blue>情感教育、生命教育&lt;/font>亦是重點&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>教學方法：
&lt;ul>
&lt;li>重視師生為「&lt;font color=red>吾與汝&lt;/font>」(I-Thou)的&lt;font color=blue>相互主體性關係&lt;/font>&lt;/li>
&lt;li>讓學生盡情的開展、表現自我。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="社會批判取向的哲學派別">&lt;a href="#%e7%a4%be%e6%9c%83%e6%89%b9%e5%88%a4%e5%8f%96%e5%90%91%e7%9a%84%e5%93%b2%e5%ad%b8%e6%b4%be%e5%88%a5" class="header-anchor">&lt;/a>社會（批判）取向的哲學派別
&lt;/h1>&lt;h2 id="後現代主義">&lt;a href="#%e5%be%8c%e7%8f%be%e4%bb%a3%e4%b8%bb%e7%be%a9" class="header-anchor">&lt;/a>後現代主義
&lt;/h2>&lt;ul>
&lt;li>代表人物：李歐塔、布希亞、羅狄&lt;/li>
&lt;/ul>
&lt;h3 id="哲學觀-5">&lt;a href="#%e5%93%b2%e5%ad%b8%e8%a7%80-5" class="header-anchor">&lt;/a>哲學觀
&lt;/h3>&lt;ul>
&lt;li>&lt;font color=blue>反對任何後設敘述&lt;/font>，主張顛覆知識本源&lt;/li>
&lt;li>知識論以&lt;font color=blue>虛無或相對主義&lt;/font>出現&lt;/li>
&lt;li>溝通僅在&lt;font color=red>悖理邏輯&lt;/font>與&lt;font color=red>破除理體 (logos)&lt;/font>&lt;/li>
&lt;li>讓所有人能夠&lt;font color=red>發聲&lt;/font>。&lt;/li>
&lt;li>重視&lt;font color=blue>去中心化、反傳統、反權威&lt;/font>，呈現&lt;font color=red>多元化&lt;/font>的個體&lt;/li>
&lt;li>訴求&lt;font color=red>個人主體性&lt;/font>的發揚。&lt;/li>
&lt;/ul>
&lt;h3 id="教育觀-1">&lt;a href="#%e6%95%99%e8%82%b2%e8%a7%80-1" class="header-anchor">&lt;/a>教育觀
&lt;/h3>&lt;ul>
&lt;li>教育目的：
&lt;ul>
&lt;li>培養學生&lt;font color=blue>尊重他人&lt;/font>、&lt;font color=blue>肯定自我&lt;/font>的胸襟&lt;/li>
&lt;li>&lt;font color=red>批判性思考&lt;/font>能力&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>課程內容：
&lt;ul>
&lt;li>主張課程宜&lt;font color=blue>打破學科邊際&lt;/font>&lt;/li>
&lt;li>提供&lt;font color=blue>動態循環且多元&lt;/font>的課程&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>教學方法：
&lt;ul>
&lt;li>教師為&lt;font color=blue>轉化型知識份子&lt;/font>&lt;/li>
&lt;li>提供&lt;font color=blue>無宰制之溝通環境&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="批判理論">&lt;a href="#%e6%89%b9%e5%88%a4%e7%90%86%e8%ab%96" class="header-anchor">&lt;/a>批判理論
&lt;/h2>&lt;ul>
&lt;li>代表人物：阿多諾、哈伯瑪斯&lt;/li>
&lt;/ul>
&lt;h3 id="哲學觀-6">&lt;a href="#%e5%93%b2%e5%ad%b8%e8%a7%80-6" class="header-anchor">&lt;/a>哲學觀
&lt;/h3>&lt;ul>
&lt;li>重視&lt;font color=blue>意識型態的批判&lt;/font>，強調&lt;font color=blue>個人的自覺與自決&lt;/font>以促成&lt;font color=blue>自主且自律&lt;/font>的個體 。&lt;/li>
&lt;li>知識論為&lt;font color=blue>真理共識觀&lt;/font>，強調互為主體性的&lt;font color=red>理性論辯&lt;/font>， 以建立共識。&lt;/li>
&lt;li>&lt;font color=blue>批判工具理性以及科技理性&lt;/font>的不當。&lt;/li>
&lt;li>重視&lt;font color=blue>良好溝通環境的型塑&lt;/font>，以增進溝通協調。&lt;/li>
&lt;/ul>
&lt;h3 id="教育觀-2">&lt;a href="#%e6%95%99%e8%82%b2%e8%a7%80-2" class="header-anchor">&lt;/a>教育觀
&lt;/h3>&lt;ul>
&lt;li>教育目的：在於維護人類理性，建構個人與社群間的&lt;font color=red>和諧&lt;/font>關係。&lt;/li>
&lt;li>課程內容：以人為主體，鼓勵&lt;font color=red>多元參與&lt;/font>，在溝通的歷程中，&lt;font color=blue>拋棄意識型態&lt;/font>。&lt;/li>
&lt;li>教學方法：提供學生&lt;font color=blue>無宰制的環境&lt;/font>，使學生能達到&lt;font color=blue>質疑、反省、解放與&lt;/font>&lt;font color=red>重構&lt;/font>。&lt;/li>
&lt;/ul></description></item><item><title>教育概論-02：教育的理論基礎 - 哲學 I</title><link>https://blog.smallten.me/p/introduction_to_education-02/</link><pubDate>Mon, 04 Apr 2022 22:20:40 +0800</pubDate><guid>https://blog.smallten.me/p/introduction_to_education-02/</guid><description>&lt;h1 id="哲學探討的議題">&lt;a href="#%e5%93%b2%e5%ad%b8%e6%8e%a2%e8%a8%8e%e7%9a%84%e8%ad%b0%e9%a1%8c" class="header-anchor">&lt;/a>哲學探討的議題
&lt;/h1>&lt;h2 id="形上學">&lt;a href="#%e5%bd%a2%e4%b8%8a%e5%ad%b8" class="header-anchor">&lt;/a>形上學
&lt;/h2>&lt;ul>
&lt;li>人的本質、世界的本質、宇宙的生成、生與死等等 (「物理學之後」 metaphysics)&lt;/li>
&lt;li>包括宇宙論、神學、人類學及存在論。&lt;/li>
&lt;li>天意 -&amp;gt; 神（有神論：多神、一神；無神論：科學）、鬼&lt;/li>
&lt;li>你如何知道你現在不是再做夢？&lt;/li>
&lt;/ul>
&lt;h2 id="知識論">&lt;a href="#%e7%9f%a5%e8%ad%98%e8%ab%96" class="header-anchor">&lt;/a>知識論
&lt;/h2>&lt;ul>
&lt;li>知識的本質、獲得知識的方法、如何判斷知識等等&lt;/li>
&lt;li>包括知識是相對、絕對？永恆、暫存？如何獲得知識？&lt;/li>
&lt;li>星座&lt;/li>
&lt;li>「下星期會下雨」 這句子現在這一課是 True or False ? 還是 not True or not False ?&lt;/li>
&lt;/ul>
&lt;h2 id="價值論">&lt;a href="#%e5%83%b9%e5%80%bc%e8%ab%96" class="header-anchor">&lt;/a>價值論
&lt;/h2>&lt;ul>
&lt;li>道德與美感&lt;/li>
&lt;li>包括倫理學（道德）與美學&lt;/li>
&lt;li>同性 -&amp;gt; 道德議題&lt;/li>
&lt;li>五月天的歌有什麼好聽的，要花 3800 元去買一張票？&lt;/li>
&lt;li>如果不知道小孩是否願意出生，那麼生育 / 墮胎孩子是否錯誤？&lt;/li>
&lt;/ul>
&lt;h1 id="哲學的意義">&lt;a href="#%e5%93%b2%e5%ad%b8%e7%9a%84%e6%84%8f%e7%be%a9" class="header-anchor">&lt;/a>哲學的意義
&lt;/h1>&lt;ul>
&lt;li>哲學是&lt;font color=blue>愛智&lt;/font>：哲學一詞為希臘語「愛」與「智」字詞的結合。(Philosophy)
&lt;ul>
&lt;li>愛智之術與愛智者&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>哲學是&lt;font color=blue>科學的科學&lt;/font>：旨在建立一切學術的原理原則。
&lt;ul>
&lt;li>Kant: 沒有科學的哲學是空的，沒有哲學的科學是盲的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>哲學是&lt;font color=blue>規約&lt;/font>：哲學旨在建立一套行為規範或價值判斷的規準。
&lt;ul>
&lt;li>網路詐騙？ 網路謠言？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>哲學是&lt;font color=blue>思辯&lt;/font>：哲學為一種思辯的活動，涉及心靈的內省、直觀等等主觀心智活動。&lt;/li>
&lt;li>哲學是&lt;font color=blue>分析&lt;/font>：哲學是一種分析活動，強調釐清哲學領域各種隱晦不明的字詞。
&lt;ul>
&lt;li>你說的是什麼？ 你怎麼知道的？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>哲學是&lt;font color=blue>綜合&lt;/font>：哲學是一種全面活動，包括規約、思辯與分析等等。&lt;/li>
&lt;li>哲學作為一種態度：
&lt;ul>
&lt;li>&lt;font color=blue>自我省察&lt;/font>&lt;/li>
&lt;li>洞察見解&lt;/li>
&lt;li>兼容並蓄&lt;/li>
&lt;li>通權達變&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="哲學的價值與功能">&lt;a href="#%e5%93%b2%e5%ad%b8%e7%9a%84%e5%83%b9%e5%80%bc%e8%88%87%e5%8a%9f%e8%83%bd" class="header-anchor">&lt;/a>哲學的價值與功能
&lt;/h1>&lt;ul>
&lt;li>從哲學的&lt;font color=red>特質&lt;/font>來評估
&lt;ul>
&lt;li>以人類崇高的理性為基準&lt;/li>
&lt;li>具有高度涵養性的價值&lt;/li>
&lt;li>&lt;font color=blue>主客觀方法並用&lt;/font>&lt;/li>
&lt;li>充滿積極、向上、奮發、進步的精神&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>從哲學的&lt;font color=red>功能&lt;/font>來判斷
&lt;ul>
&lt;li>思想和行為的導引&lt;/li>
&lt;li>智慧的啟迪和增進&lt;/li>
&lt;li>意志的鼓舞和砥礪&lt;/li>
&lt;li>&lt;font color=blue>情性的陶冶和培育&lt;/font>&lt;/li>
&lt;li>社會生活的增進與促進&lt;/li>
&lt;li>人性尊嚴的顯示和提高&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="哲學與教育的關係">&lt;a href="#%e5%93%b2%e5%ad%b8%e8%88%87%e6%95%99%e8%82%b2%e7%9a%84%e9%97%9c%e4%bf%82" class="header-anchor">&lt;/a>哲學與教育的關係
&lt;/h1>&lt;ul>
&lt;li>「教育哲學」的意義：&lt;font color=blue>對教育問題作哲學式的探討&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>哲學是教育的原理原則&lt;/font>
&lt;ul>
&lt;li>教育許多面向涉及哲學問題（形上、知識、價值等等），需哲學給予提示。&lt;/li>
&lt;li>包括教育目的、課程內容、教學方法、師生關係、學校功能、訓輔工作等等。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=blue>教育是哲學的實驗室&lt;/font>
&lt;ul>
&lt;li>哲學家的思想需藉助教育的實踐&lt;/li>
&lt;li>哲學思想藉由教育方能彰顯出價值&lt;/li>
&lt;li>哲學家大都也是教育家&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="教育哲學的三個主要教育啟示">&lt;a href="#%e6%95%99%e8%82%b2%e5%93%b2%e5%ad%b8%e7%9a%84%e4%b8%89%e5%80%8b%e4%b8%bb%e8%a6%81%e6%95%99%e8%82%b2%e5%95%9f%e7%a4%ba" class="header-anchor">&lt;/a>教育哲學的三個主要教育啟示
&lt;/h1>&lt;ul>
&lt;li>教育目的&lt;/li>
&lt;li>課程內容&lt;/li>
&lt;li>教學方法&lt;/li>
&lt;/ul>
&lt;h1 id="西方各時期重要教育措施與思想">&lt;a href="#%e8%a5%bf%e6%96%b9%e5%90%84%e6%99%82%e6%9c%9f%e9%87%8d%e8%a6%81%e6%95%99%e8%82%b2%e6%8e%aa%e6%96%bd%e8%88%87%e6%80%9d%e6%83%b3" class="header-anchor">&lt;/a>西方各時期重要教育措施與思想
&lt;/h1>&lt;h2 id="希臘時期">&lt;a href="#%e5%b8%8c%e8%87%98%e6%99%82%e6%9c%9f" class="header-anchor">&lt;/a>希臘時期
&lt;/h2>&lt;h3 id="雅典教育">&lt;a href="#%e9%9b%85%e5%85%b8%e6%95%99%e8%82%b2" class="header-anchor">&lt;/a>雅典教育
&lt;/h3>&lt;ul>
&lt;li>重視人文教育，教育為少數公民所獨享，故屬於一種貴族式教育，女子只接受家事教育。&lt;/li>
&lt;/ul>
&lt;h3 id="斯巴達教育">&lt;a href="#%e6%96%af%e5%b7%b4%e9%81%94%e6%95%99%e8%82%b2" class="header-anchor">&lt;/a>斯巴達教育
&lt;/h3>&lt;ul>
&lt;li>重視身體的鍛鍊，培養服從、守法、愛國等等情操，且亦重視女子教育。&lt;/li>
&lt;/ul>
&lt;h2 id="羅馬時期">&lt;a href="#%e7%be%85%e9%a6%ac%e6%99%82%e6%9c%9f" class="header-anchor">&lt;/a>羅馬時期
&lt;/h2>&lt;ul>
&lt;li>重視&lt;font color=red>實用&lt;/font>效益取向&lt;/li>
&lt;li>教育內容採取「修辭教育」&lt;/li>
&lt;li>教育對象為十五、十六歲的貴族子弟。&lt;/li>
&lt;/ul>
&lt;h2 id="中世紀時期">&lt;a href="#%e4%b8%ad%e4%b8%96%e7%b4%80%e6%99%82%e6%9c%9f" class="header-anchor">&lt;/a>中世紀時期
&lt;/h2>&lt;ul>
&lt;li>重視宣揚教義，此取問答法解說教義。&lt;/li>
&lt;li>教育設施為教義問答學校、修道院。&lt;/li>
&lt;li>教育內容為「&lt;font color=red>七藝&lt;/font>」：
&lt;ul>
&lt;li>&lt;font color=red>三學&lt;/font>：文法、修辭、辯證&lt;/li>
&lt;li>&lt;font color=red>四藝&lt;/font>：算數、幾何、天文、音樂&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>除宗教教育之外，還有武士教育（侍童、護衛、武 士）、藝徒教育（學徒、技師、師傅，而武士教育與藝徒教育都不隸屬於基督教教會範疇。&lt;/li>
&lt;li>大學的興起：三所母大學
&lt;ul>
&lt;li>&lt;font color=blue>巴黎大學（神學）&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>波隆大學（法學）&lt;/font>&lt;/li>
&lt;li>&lt;font color=blue>沙列諾大學（醫學）&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>教育活動主要掌握在&lt;font color=red>教會&lt;/font>手中。&lt;/li>
&lt;/ul>
&lt;h2 id="文藝復興時期">&lt;a href="#%e6%96%87%e8%97%9d%e5%be%a9%e8%88%88%e6%99%82%e6%9c%9f" class="header-anchor">&lt;/a>文藝復興時期
&lt;/h2>&lt;ul>
&lt;li>重視復興希臘、羅馬之古文學，鑽研古希臘文。&lt;/li>
&lt;li>&lt;font color=blue>人本思想&lt;/font>取代神本思想。&lt;/li>
&lt;li>強調&lt;font color=blue>現世生活&lt;/font>以及人世美感，故又稱&lt;font color=red>人文主義&lt;/font>&lt;/li>
&lt;li>以地方語言進行文學的創作，首創「雙重翻譯」（古文與方言）式教學。&lt;/li>
&lt;li>教育對象以&lt;font color=blue>社會上層子弟&lt;/font>為主。&lt;/li>
&lt;li>學校所教受的課程內容多為無關實用的文字知識，與社會生產相脫離，且只有少數子弟才能受此文雅教育。&lt;/li>
&lt;/ul>
&lt;h2 id="宗教改革時期">&lt;a href="#%e5%ae%97%e6%95%99%e6%94%b9%e9%9d%a9%e6%99%82%e6%9c%9f" class="header-anchor">&lt;/a>宗教改革時期
&lt;/h2>&lt;ul>
&lt;li>馬丁路德主張由人民自行閱讀、解釋教義，而其中關鍵在於「&lt;font color=blue>識字教育&lt;/font>」，故導致普及教育的盛行，&lt;font color=red>小學教育&lt;/font>的興起。&lt;/li>
&lt;li>促使教會開始重視教育事業。&lt;/li>
&lt;/ul>
&lt;h2 id="唯實論與自然主義時期">&lt;a href="#%e5%94%af%e5%af%a6%e8%ab%96%e8%88%87%e8%87%aa%e7%84%b6%e4%b8%bb%e7%be%a9%e6%99%82%e6%9c%9f" class="header-anchor">&lt;/a>唯實論與自然主義時期
&lt;/h2>&lt;ul>
&lt;li>對人文主義所導致的文學形式主義之反動。&lt;/li>
&lt;li>注重古文內容，但不拘文字形式。&lt;/li>
&lt;li>注重&lt;font color=blue>具體生活經驗世界&lt;/font>以及實際生活。&lt;/li>
&lt;li>重視&lt;font color=red>感官&lt;/font>功能，透過感官來獲得知識。&lt;/li>
&lt;li>&lt;font color=red>培根 - 歸納法&lt;/font> 的出現。&lt;/li>
&lt;/ul>
&lt;h2 id="十八世紀啟蒙運動時期">&lt;a href="#%e5%8d%81%e5%85%ab%e4%b8%96%e7%b4%80%e5%95%9f%e8%92%99%e9%81%8b%e5%8b%95%e6%99%82%e6%9c%9f" class="header-anchor">&lt;/a>十八世紀（啟蒙運動時期）
&lt;/h2>&lt;ul>
&lt;li>&lt;font color=red>科學主義&lt;/font>盛行，為&lt;font color=red>理性&lt;/font>充分開展的時代。&lt;/li>
&lt;li>將人重新劃為自人的範疇。&lt;/li>
&lt;li>講求天賦人權，人生而平等。&lt;/li>
&lt;/ul>
&lt;h2 id="十九世紀">&lt;a href="#%e5%8d%81%e4%b9%9d%e4%b8%96%e7%b4%80" class="header-anchor">&lt;/a>十九世紀
&lt;/h2>&lt;ul>
&lt;li>&lt;font color=red>民族主義&lt;/font>、工業主義、自由主義、&lt;font color=red>資本主義&lt;/font>盛行。&lt;/li>
&lt;li>教育重要的功能在於&lt;font color=blue>形塑國家認同&lt;/font>。&lt;/li>
&lt;li>教材內容側重於國家自身文化。&lt;/li>
&lt;li>普及教育的提倡。&lt;/li>
&lt;/ul>
&lt;h2 id="二十二十一世紀">&lt;a href="#%e4%ba%8c%e5%8d%81%e4%ba%8c%e5%8d%81%e4%b8%80%e4%b8%96%e7%b4%80" class="header-anchor">&lt;/a>二十、二十一世紀
&lt;/h2>&lt;ul>
&lt;li>民主主義：培養&lt;font color=red>民主&lt;/font>素養的國民。&lt;/li>
&lt;li>共產主義：培養政治順民。&lt;/li>
&lt;/ul></description></item><item><title>教育概論-01：教育的相關意涵</title><link>https://blog.smallten.me/p/introduction_to_education-01/</link><pubDate>Mon, 04 Apr 2022 21:12:17 +0800</pubDate><guid>https://blog.smallten.me/p/introduction_to_education-01/</guid><description>&lt;h1 id="教育的意義">&lt;a href="#%e6%95%99%e8%82%b2%e7%9a%84%e6%84%8f%e7%be%a9" class="header-anchor">&lt;/a>教育的意義
&lt;/h1>&lt;h2 id="中文字義">&lt;a href="#%e4%b8%ad%e6%96%87%e5%ad%97%e7%be%a9" class="header-anchor">&lt;/a>中文字義
&lt;/h2>&lt;ul>
&lt;li>說文解字謂：「&lt;font color=red>教&lt;/font>，上所施，下所效（模仿）也；&lt;font color=red>育&lt;/font>，養子使作善也。」&lt;/li>
&lt;li>禮記學記：「教也者，長善而救其失者也。」&lt;/li>
&lt;li>中庸：「&lt;font color=blue>天命之謂性，率性之謂道，修道之謂教&lt;/font>。」&lt;/li>
&lt;li>孟子。盡心篇：「得天下英才而教育之，三樂也」（&lt;font color=blue>「教育」一詞使用之始&lt;/font>）&lt;/li>
&lt;/ul>
&lt;h2 id="西方字義">&lt;a href="#%e8%a5%bf%e6%96%b9%e5%ad%97%e7%be%a9" class="header-anchor">&lt;/a>西方字義
&lt;/h2>&lt;ul>
&lt;li>「教育」一詞，英、法文皆為「Education」，皆是由拉丁字詞「Educare」轉化而來。&lt;/li>
&lt;li>「E」在拉丁文中有「出」的含意在，「ducare」則有「引」之意味，故二者合起來有「引出」之意。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>中西字義之比較：
&lt;ul>
&lt;li>中國對於教育的詮釋較側重於「&lt;font color=red>道德良善&lt;/font>」、「&lt;font color=red>倫理&lt;/font>」。&lt;/li>
&lt;li>西方對於教育的詮釋較側重於「&lt;font color=red>引導&lt;/font>」、「&lt;font color=red>開展&lt;/font>」。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="廣義的教育">&lt;a href="#%e5%bb%a3%e7%be%a9%e7%9a%84%e6%95%99%e8%82%b2" class="header-anchor">&lt;/a>廣義的教育
&lt;/h2>&lt;ul>
&lt;li>係指外在的自然環境以及社會環境對於個人所施予的各種影響，故若利用自然或是社會環境來改造經驗，既可稱之為教育。&lt;/li>
&lt;li>此種教育形式較傾向於&lt;font color=blue>無特定目的&lt;/font>、計畫以及制度，亦無特定的教學環境以及行政組織，故亦可稱之為「&lt;font color=red>生活教育&lt;/font>」。&lt;/li>
&lt;/ul>
&lt;h2 id="狹義的教育">&lt;a href="#%e7%8b%b9%e7%be%a9%e7%9a%84%e6%95%99%e8%82%b2" class="header-anchor">&lt;/a>狹義的教育
&lt;/h2>&lt;ul>
&lt;li>專指&lt;font color=blue>有意實施&lt;/font>的教育，因此較傾向於&lt;font color=blue>有特定目的&lt;/font>、計畫、制度與教學組織。&lt;/li>
&lt;li>此種教育類型如現今的學校體制，有固定的教材、教師以及規劃過後的教育環境。&lt;/li>
&lt;/ul>
&lt;h2 id="從學科的觀點出發">&lt;a href="#%e5%be%9e%e5%ad%b8%e7%a7%91%e7%9a%84%e8%a7%80%e9%bb%9e%e5%87%ba%e7%99%bc" class="header-anchor">&lt;/a>從學科的觀點出發
&lt;/h2>&lt;ul>
&lt;li>哲學：教育有助於「&lt;font color=blue>使人成為人&lt;/font>」，前者的「人」指的是未歷經磨練的自然人，後者的「人」指的是成熟的「社會人」&lt;/li>
&lt;li>心理學：教育有助於個體達到&lt;font color=blue>自我實現與超越&lt;/font>&lt;/li>
&lt;li>社會學：教育有助於個體進行&lt;font color=blue>社會化&lt;/font>，融入社會生活&lt;/li>
&lt;li>生物學：教育有助於個人經驗重組與改造，以&lt;font color=blue>適應環境&lt;/font>。&lt;/li>
&lt;li>經濟學：教育有助於開發國家的人力，以促進&lt;font color=blue>經濟發展&lt;/font>。&lt;/li>
&lt;li>文化學：教育有助於個體的&lt;font color=blue>文化陶冶&lt;/font>，進而促進文化的選擇、保存、傳遞、創造與更新。&lt;/li>
&lt;/ul>
&lt;h1 id="教育本質">&lt;a href="#%e6%95%99%e8%82%b2%e6%9c%ac%e8%b3%aa" class="header-anchor">&lt;/a>教育本質
&lt;/h1>&lt;ul>
&lt;li>內涵性：係指教育同時具有行動的過程以及結果，而教育內涵通常&lt;font color=blue>依據學者的觀點而有所不同&lt;/font>，所以也會導致&lt;font color=blue>不同的行動過程以及結果&lt;/font>。&lt;/li>
&lt;li>時代性：教育的意義也會隨著&lt;font color=blue>時代的不同而有所改變&lt;/font>，所以教育的目的、內容、教學也會有所不同。
&lt;ul>
&lt;li>問題：常用過去的知識，教現在的學生，使其接受未來的時代。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="教育功能">&lt;a href="#%e6%95%99%e8%82%b2%e5%8a%9f%e8%83%bd" class="header-anchor">&lt;/a>教育功能
&lt;/h1>&lt;ul>
&lt;li>依層次分
&lt;ul>
&lt;li>個人層次：維持個體生存，發展個人能力&lt;/li>
&lt;li>社會層次：傳遞社會文化，促進社會進步&lt;/li>
&lt;li>國家層次：促進國家建設，延續民族生命&lt;/li>
&lt;li>世界層次：改善人類生活，促進世界和平&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="教育隱喻">&lt;a href="#%e6%95%99%e8%82%b2%e9%9a%b1%e5%96%bb" class="header-anchor">&lt;/a>教育隱喻
&lt;/h1>&lt;ul>
&lt;li>&lt;font color=blue>教育即接生&lt;/font>：強調由內而外的引導過程，而非由外而內的灌輸或訓練。
&lt;ul>
&lt;li>&lt;font color=red>產婆法&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=blue>教育即塑造&lt;/font>：強調教育的外塑功能，主張「教育萬能論」，亦即「給我一打的小孩，我將可以把他們培養成我所想要的行為與表現」。
&lt;ul>
&lt;li>教育心裡學 -&amp;gt; 行為學 -&amp;gt; &lt;font color=red>&amp;ldquo;增強&amp;rdquo;&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=blue>教育即雕刻&lt;/font>：強調教育的過程如同雕刻大理石一般，要依照其材質以及紋路來雕刻之，重視學生的個別差異。&lt;/li>
&lt;li>&lt;font color=blue>教育即生長&lt;/font>：認為教育的過程與園丁栽培花木一般，學校為花園，教師為園丁，學生為花草，重視學生的主動、活潑及自然性。
&lt;ul>
&lt;li>教育哲學 -&amp;gt; &lt;font color=red>杜威&lt;/font>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;font color=blue>教育即撞鐘&lt;/font>：比喻教師為鐘，學生為撞鐘者，撞大力則得大聲，撞小力則得小聲，相當重視學生的主動積極學習以及教師的豐富學識。&lt;/li>
&lt;/ul>
&lt;h1 id="教育規準">&lt;a href="#%e6%95%99%e8%82%b2%e8%a6%8f%e6%ba%96" class="header-anchor">&lt;/a>教育規準
&lt;/h1>&lt;h2 id="r-s-peters">&lt;a href="#r-s-peters" class="header-anchor">&lt;/a>R. S. Peters
&lt;/h2>&lt;ul>
&lt;li>觀念分析學派學者&lt;/li>
&lt;li>目的：提供作為判別教育活動的依據&lt;/li>
&lt;li>必須要符合三大規準，才可稱作是「教育」：
&lt;ul>
&lt;li>&lt;font color=blue>合認知（求真）&lt;/font>：教師教導學生必須以事實真理為基礎前提，培養學生批判思考、明辨是非之能力。&lt;/li>
&lt;li>&lt;font color=blue>合價值（求善）&lt;/font>：教育活動與歷程必須植基於合理、有意義以及道德良知之上。&lt;/li>
&lt;li>&lt;font color=blue>合自願（求美）&lt;/font>：教育活動與歷程必須考量到學生的身心發展以及其自由意志，不可強迫之。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="教育概念分析">&lt;a href="#%e6%95%99%e8%82%b2%e6%a6%82%e5%bf%b5%e5%88%86%e6%9e%90" class="header-anchor">&lt;/a>教育概念分析
&lt;/h1>&lt;h2 id="i-scheffler">&lt;a href="#i-scheffler" class="header-anchor">&lt;/a>I. Scheffler
&lt;/h2>&lt;ul>
&lt;li>觀念分析學者&lt;/li>
&lt;li>針對教育的內涵進行整理：
&lt;ul>
&lt;li>「&lt;font color=blue>複合性&lt;/font>」概念：教育概念抽象且複雜，活動範圍廣泛，包括學習、訓導、輔導、考試、課程、學生、教師等等，都與教育有關。&lt;/li>
&lt;li>「&lt;font color=blue>爭議性&lt;/font>」概念：教育的意義分歧，有時也會與灌輸、訓練等概念相互混淆。&lt;/li>
&lt;li>「&lt;font color=blue>多樣態&lt;/font>」概念：教育歷程是多樣的，如教、學、輔、訓、評等等，故不是單純或單一的活動。&lt;/li>
&lt;li>「&lt;font color=blue>工作（任務）-成效&lt;/font>」概念：教育同時包括過程以及結果，無論是外在目的還是內在目的，教育都需要有成效才有意義。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="教育非教育與反教育之比較">&lt;a href="#%e6%95%99%e8%82%b2%e9%9d%9e%e6%95%99%e8%82%b2%e8%88%87%e5%8f%8d%e6%95%99%e8%82%b2%e4%b9%8b%e6%af%94%e8%bc%83" class="header-anchor">&lt;/a>教育、非教育與反教育之比較
&lt;/h1>&lt;ul>
&lt;li>教育：若有助於個人生命潛能開展、增進個人的自尊、自信者，皆可稱之為「教育」。&lt;/li>
&lt;li>&lt;font color=blue>非教育&lt;/font>：若未對個人產生教育之正向或負向作用者，可謂之為「非教育」。&lt;/li>
&lt;li>&lt;font color=blue>反教育&lt;/font>：不利於個人，甚至阻礙個人發展，未能符合價值、認知、自願者，可稱之為「反教育」&lt;/li>
&lt;/ul></description></item><item><title>程式設計(二)-08：Linux List</title><link>https://blog.smallten.me/p/computer_programming_2-08/</link><pubDate>Tue, 13 Jul 2021 22:25:50 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_2-08/</guid><description>&lt;ul>
&lt;li>linuxlist.h&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define LIST_HEAD_INIT(name) { &amp;amp;(name), &amp;amp;(name) }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Insert a new entry between two known consecutive entries.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * This is only for internal list manipulation where we know
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * the prev/next entries already!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">__list_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">new&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_add - add a new entry
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @new: new entry to be added
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @head: list head to add it after
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Insert a new entry after the specified head.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * This is good for implementing stacks.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">list_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">__list_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_add_tail - add a new entry
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @new: new entry to be added
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @head: list head to add it before
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Insert a new entry before the specified head.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * This is useful for implementing queues.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">list_add_tail&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">__list_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">new&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Delete a list entry by making the prev/next entries
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * point to each other.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * This is only for internal list manipulation where we know
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * the prev/next entries already!
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">__list_del&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">next&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">prev&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">prev&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_del - deletes entry from list.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @entry: the element to delete from the list.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Note: list_empty() on entry does not return true after this, the entry is
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * in an undefined state.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">__list_del_entry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">__list_del&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="nf">list_del&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">__list_del_entry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">entry&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">entry&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">prev&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_empty - tests whether a list is empty
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @head: the list to test.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kr">inline&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">list_empty&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">head&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">head&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">next&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">head&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define offsetof(TYPE, MEMBER) ((size_t)&amp;amp;((TYPE *)0)-&amp;gt;MEMBER)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define container_of(ptr, type, member) ({ \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> void *__mptr = (void *)(ptr); \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> ((type *)(__mptr - offsetof(type, member))); })
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_entry - get the struct for this entry
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @ptr: the &amp;amp;struct list_head pointer.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @type: the type of the struct this is embedded in.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @member: the name of the list_head within the struct.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define list_entry(ptr, type, member) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> container_of(ptr, type, member)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_first_entry - get the first element from a list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @ptr: the list head to take the element from.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @type: the type of the struct this is embedded in.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @member: the name of the list_head within the struct.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Note, that list is expected to be not empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define list_first_entry(ptr, type, member) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> list_entry((ptr)-&amp;gt;next, type, member)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_last_entry - get the last element from a list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @ptr: the list head to take the element from.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @type: the type of the struct this is embedded in.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @member: the name of the list_head within the struct.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> *
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * Note, that list is expected to be not empty.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define list_last_entry(ptr, type, member) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> list_entry((ptr)-&amp;gt;prev, type, member)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_for_each - iterate over a list
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @pos: the &amp;amp;struct list_head to use as a loop cursor.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @head: the head for your list.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define list_for_each(pos, head) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> for (pos = (head)-&amp;gt;next; pos != (head); pos = pos-&amp;gt;next)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">/**
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * list_for_each_prev - iterate over a list backwards
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @pos: the &amp;amp;struct list_head to use as a loop cursor.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> * @head: the head for your list.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define list_for_each_prev(pos, head) \
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp"> for (pos = (head)-&amp;gt;prev; pos != (head); pos = pos-&amp;gt;prev)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>main.c&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;span class="lnt">58
&lt;/span>&lt;span class="lnt">59
&lt;/span>&lt;span class="lnt">60
&lt;/span>&lt;span class="lnt">61
&lt;/span>&lt;span class="lnt">62
&lt;/span>&lt;span class="lnt">63
&lt;/span>&lt;span class="lnt">64
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;#34;linuxlist.h&amp;#34;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_sCharacter&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">32&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">hp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">mp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">exp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">atk&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">def&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">ats&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">adf&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">spd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">sCharacter&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">sCharacter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">allocCharacter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sCharacter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">newComer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sCharacter&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">id&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">id&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">26&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;A&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">26&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">hp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">mp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">exp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">atk&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">def&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">ats&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">adf&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">spd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">rand&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">100&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">newComer&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">printCharacter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sCharacter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%04d) &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">id&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%8s &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">one&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">hp&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">&amp;lt;=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">one&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">spd&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="n">ptr&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%3d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">LIST_HEAD&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">char_list_head&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">srand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sCharacter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">newComer&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">allocCharacter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">list_add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">newComer&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">char_list_head&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">list_head&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">listptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">list_for_each&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">char_list_head&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sCharacter&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">cptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">list_entry&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">listptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sCharacter&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">list&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printCharacter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="cm">/*
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> list_for_each_prev(listptr, &amp;amp;char_list_head) {
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> sCharacter *cptr = list_entry(listptr, sCharacter, list);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> printCharacter(cptr);
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> }
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm"> */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>程式設計(二)-07：Some Tricks</title><link>https://blog.smallten.me/p/computer_programming_2-07/</link><pubDate>Tue, 13 Jul 2021 21:39:10 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_2-07/</guid><description>&lt;h1 id="predefined-macros">&lt;a href="#predefined-macros" class="header-anchor">&lt;/a>Predefined Macros
&lt;/h1>&lt;h2 id="standard-predefined-macros">&lt;a href="#standard-predefined-macros" class="header-anchor">&lt;/a>Standard Predefined Macros
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;line: %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__LINE__&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;file: %s &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__FILE__&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;function: %s &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__FUNCTION__&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// gcc
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;function: %s &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__func__&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// C99
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;time: %s &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__TIME__&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;date: %s &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__DATE__&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;STDC: %d &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__STDC__&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;STDC_VERSION: %ld &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__STDC_VERSION__&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;TIMESTAMP: %s &lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">__TIMESTAMP__&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>我們可以怎麼使用這些 Macros ?
&lt;ul>
&lt;li>&lt;code>fprintf(stderr, &amp;quot;Internal␣error: at %s, line %d. ver %s %s&amp;quot;, __FILE__, __LINE__, __DATE__, __TIME__);&lt;/code>&lt;/li>
&lt;li>Define when Compiling
&lt;ul>
&lt;li>&lt;code>gcc -D__DEBUG__ debug.c&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World!!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef __DEBUG__
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;debug!!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Other GCC Predefined MACROs
&lt;ul>
&lt;li>&lt;a class="link" href="https://gcc.gnu.org/onlinedocs/cpp/Common-Predefined-Macros.html" target="_blank" rel="noopener"
>Common Predefined Macros&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="comparing-unsigned-integers">&lt;a href="#comparing-unsigned-integers" class="header-anchor">&lt;/a>Comparing Unsigned Integers
&lt;/h1>&lt;ul>
&lt;li>When comparisons between signed and unsigned integers, C will force the signed type to unsigned.&lt;/li>
&lt;li>C99 and C11 section 6.3.1.8.&lt;/li>
&lt;li>It is hard to debug since it looks so nature.&lt;/li>
&lt;/ul>
&lt;h1 id="call-functions-at-program-termination">&lt;a href="#call-functions-at-program-termination" class="header-anchor">&lt;/a>Call Functions at Program Termination
&lt;/h1>&lt;h3 id="atexit">&lt;a href="#atexit" class="header-anchor">&lt;/a>atexit
&lt;/h3>&lt;p>&lt;code>int atexit(void (*function)(void));&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Register a Function to be Called at Normal Process Termination&lt;/li>
&lt;li>The atexit() function registers the given function to be called at normal process termination, either via exit(3) or via return from the program’s main(). Functions so registered are called in the reverse order of their registration; no arguments are passed.&lt;/li>
&lt;li>The atexit() function returns the value 0 if successful; otherwise it returns a nonzero value.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Goodbye Foo!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">bar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Goodbye Bar!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">wchar_t&lt;/span>&lt;span class="o">*&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">atexit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">bar&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">atexit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">foo&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="system-and-more">&lt;a href="#system-and-more" class="header-anchor">&lt;/a>system and more
&lt;/h1>&lt;h3 id="system-execute-a-shell-command">&lt;a href="#system-execute-a-shell-command" class="header-anchor">&lt;/a>System: Execute a Shell Command
&lt;/h3>&lt;p>&lt;code>int system(const char *command);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The system() library function uses fork(2) to create a child process that executes the shell command specified in command.&lt;/li>
&lt;li>system() returns after the command has been completed.&lt;/li>
&lt;/ul>
&lt;h4 id="fork">&lt;a href="#fork" class="header-anchor">&lt;/a>fork
&lt;/h4>&lt;ul>
&lt;li>fork() creates a new process by duplicating the calling process.&lt;/li>
&lt;li>This is an important function. However, I will not talk too much about this function but you will learn more in System Programming.
&lt;img src="https://blog.smallten.me/p/computer_programming_2-07/computer_programming_2-07-01.jpg"
width="599"
height="429"
srcset="https://blog.smallten.me/p/computer_programming_2-07/computer_programming_2-07-01_hu7770491627571627118.jpg 480w, https://blog.smallten.me/p/computer_programming_2-07/computer_programming_2-07-01_hu2663075692407547203.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="139"
data-flex-basis="335px"
>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>system() is a &lt;font color=red>blocking&lt;/font> function.
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">system&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;while true; do echo &amp;#39;Hit CTRL+C&amp;#39;; sleep 1; done&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>The system() returns &lt;code>-1&lt;/code> means &lt;font color=blue>your system cannot fork another process instead of your command fails.&lt;/font>
&lt;ul>
&lt;li>You can try a command to delete a non-existing file.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Every system call is &lt;font color=red>independent&lt;/font>.
&lt;ul>
&lt;li>So you cannot setup an environment variable and hope other other system calls use this variable.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="popen">&lt;a href="#popen" class="header-anchor">&lt;/a>popen
&lt;/h3>&lt;p>&lt;code>FILE *popen(const char *command, const char *type);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The popen() function opens a process by creating a pipe, forking, and invoking the shell.&lt;/li>
&lt;li>The popen() function returns NULL if the fork(2) or pipe(2) calls fail, or if it cannot allocate memory.&lt;/li>
&lt;li>別忘了使用 &lt;code>pclose&lt;/code>.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">512&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pPing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">counter&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">pPing&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">popen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;ping -c 4 www.google.com&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pPing&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;error end&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">exit&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">512&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pPing&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">counter&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;--- %d ---&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">counter&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">pclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pPing&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="assert">&lt;a href="#assert" class="header-anchor">&lt;/a>assert
&lt;/h1>&lt;ul>
&lt;li>In computer programming, an assertion is a statement that a &lt;font color=red>predicate&lt;/font> (Boolean-valued function, i.e. a true-false expression) is always true at that point in code execution.&lt;/li>
&lt;li>It can &lt;strong>help&lt;/strong> a programmer read the code, help a compiler compile it, or help the program detect its own defects.&lt;/li>
&lt;li>If the assertion check is not in fact true, an assertion failure, &lt;font color=blue>the program considers itself to be broken&lt;/font> and typically deliberately &lt;strong>crashes&lt;/strong> or throws an assertion failure exception.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;code>void assert(scalar expression);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The macro assert() prints an error message to standard error and terminates the program by calling abort(3) if expression is false.&lt;/li>
&lt;li>The purpose of this macro is to help programmers find bugs in their programs.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;assert.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">fd&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fopen&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;file.txt&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;r&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">assert&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fclose&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">fd&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>我可以簡單的使用 &lt;code>if-else&lt;/code> 去確認並回傳值。那為什麼還要使用 &lt;code>assert&lt;/code>?
&lt;ul>
&lt;li>這取決於您是否可以優雅地處理錯誤。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Note:
&lt;ul>
&lt;li>一般來說，&lt;code>assert&lt;/code> 被用在開發階段。&lt;/li>
&lt;li>當發佈時，請移除所有 &lt;code>assert&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="qsort">&lt;a href="#qsort" class="header-anchor">&lt;/a>qsort
&lt;/h1>&lt;p>&lt;code>void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The qsort() function sorts an array with nmemb elements of size size. The base argument points to the start of the array.&lt;/li>
&lt;li>The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. If two members compare as equal, their order in the sorted array is undefined.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">88&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">56&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">25&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">cmpfunc&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Before sorting the list is:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">qsort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">values&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">cmpfunc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;After sorting the list is:&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">values&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="libcurl">&lt;a href="#libcurl" class="header-anchor">&lt;/a>libcurl
&lt;/h1>&lt;ul>
&lt;li>安裝: &lt;code>sudo apt-get install libcurl4 libcurl4-openssl-dev&lt;/code>&lt;/li>
&lt;li>使用: &lt;a class="link" href="https://curl.se/libcurl/c/example.html" target="_blank" rel="noopener"
>Example codes&lt;/a>&lt;/li>
&lt;li>編譯: &lt;code>gcc -I curl-7.63.0/include -L curl-7.63.0/lib/.libs/ opendata.c -lcurl&lt;/code> (需依照情況自行修改)
&lt;ul>
&lt;li>Makefile:
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CFLAGS&lt;/span> &lt;span class="o">=&lt;/span> -O3 -Wall
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">INCLUDE&lt;/span> &lt;span class="o">=&lt;/span> -I curl-7.63.0/include
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LIB&lt;/span> &lt;span class="o">=&lt;/span> -L curl-7.63.0/lib/.libs/
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">opendata&lt;/span>.&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gcc &lt;span class="si">${&lt;/span>&lt;span class="nv">CFLAGS&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">INCLUDE&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">LIB&lt;/span>&lt;span class="si">}&lt;/span> opendata.c -o opendata -lcurl
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rm -f opendata
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>程式設計(二)-06：Macro</title><link>https://blog.smallten.me/p/computer_programming_2-06/</link><pubDate>Tue, 13 Jul 2021 20:47:06 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_2-06/</guid><description>&lt;h1 id="preprocessor-預處理器">&lt;a href="#preprocessor-%e9%a0%90%e8%99%95%e7%90%86%e5%99%a8" class="header-anchor">&lt;/a>Preprocessor 預處理器
&lt;/h1>&lt;ul>
&lt;li>在編譯器將您的源代碼編譯為組語前，還有一個稱為預處理的附加階段。&lt;/li>
&lt;li>Objective: Produce a source code file with preprocessing commands properly sorted out.
&lt;img src="https://blog.smallten.me/p/computer_programming_2-06/computer_programming_2-06-01.jpg"
width="896"
height="385"
srcset="https://blog.smallten.me/p/computer_programming_2-06/computer_programming_2-06-01_hu4112501705419255426.jpg 480w, https://blog.smallten.me/p/computer_programming_2-06/computer_programming_2-06-01_hu18138717548076460322.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="232"
data-flex-basis="558px"
>&lt;/li>
&lt;li>Preprocessor commands are known as &lt;font color=blue>Directives&lt;/font>.&lt;/li>
&lt;li>Preprocessor provides certain features, which are called &lt;font color=blue>preprocessor directives&lt;/font>.&lt;/li>
&lt;li>Preprocessor directive 以 &lt;code>#&lt;/code> 為開頭。(例如：&lt;code>#include &amp;lt;stdio.h&amp;gt;&lt;/code>)&lt;/li>
&lt;li>Preprocessor directives 可以被放在程式中的任何地方。但建議放在開頭，並且每個必須獨立一行。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define MACRO_DEMO 123
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;demo:␣%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">MACRO_DEMO&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>以 &lt;code>gcc -E main.c&lt;/code> 查看預處理後的狀態。&lt;/li>
&lt;/ul>
&lt;h1 id="macro-巨集">&lt;a href="#macro-%e5%b7%a8%e9%9b%86" class="header-anchor">&lt;/a>Macro 巨集
&lt;/h1>&lt;ul>
&lt;li>&lt;code>#define&lt;/code> is known as &lt;font color=blue>macro expansion&lt;/font>.&lt;/li>
&lt;li>General Form: &lt;code>#define macro_template macro_expansion&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="macro-expansion">&lt;a href="#macro-expansion" class="header-anchor">&lt;/a>Macro Expansion
&lt;/h2>&lt;ul>
&lt;li>Preprocessor searches for macro definition.&lt;/li>
&lt;li>After finding macro definition, it searches the whole program for &lt;strong>macro_template&lt;/strong>.&lt;/li>
&lt;li>&lt;font color=red>Replace&lt;/font> every &lt;strong>macro_template&lt;/strong> with &lt;strong>macro_expansion&lt;/strong>.
&lt;ul>
&lt;li>Replacement will not occur if the template is in a quoted string.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Notes:
&lt;ul>
&lt;li>通常 macro_template 會使用&lt;font color=blue>大寫字母&lt;/font>&lt;/li>
&lt;li>不要使用分號 &lt;code>;&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>為什麼要用巨集?
&lt;ul>
&lt;li>為了寫出更高效率的程式。&lt;/li>
&lt;li>提高程式的可讀性。&lt;/li>
&lt;li>定義的巨集名稱可作為其他定義的一部分。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>巨集可以像函式一樣擁有 arguments。&lt;/li>
&lt;li>Notes：
&lt;ul>
&lt;li>在定義巨集時，參數和名稱之間不允許有空格。&lt;/li>
&lt;li>Macro expansions 應該用括號括起來。&lt;/li>
&lt;li>使用 &lt;code>\&lt;/code> 將巨集拆分為多行。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="macro-vs-function">&lt;a href="#macro-vs-function" class="header-anchor">&lt;/a>Macro vs. Function
&lt;/h2>&lt;h3 id="macro">&lt;a href="#macro" class="header-anchor">&lt;/a>Macro
&lt;/h3>&lt;ul>
&lt;li>單純替換&lt;/li>
&lt;li>雖然你可能沒感覺，但比函式更快。&lt;/li>
&lt;/ul>
&lt;h3 id="function">&lt;a href="#function" class="header-anchor">&lt;/a>Function
&lt;/h3>&lt;ul>
&lt;li>傳遞參數 -&amp;gt; 執行 -&amp;gt; 回傳結果&lt;/li>
&lt;li>支援&lt;font color=red>遞迴&lt;/font>&lt;/li>
&lt;/ul>
&lt;h2 id="inline-functions">&lt;a href="#inline-functions" class="header-anchor">&lt;/a>inline Functions
&lt;/h2>&lt;ul>
&lt;li>&lt;code>inline&lt;/code> is a CPP keyword.&lt;/li>
&lt;li>C includes this keyword from C99. Though GNU C (and some other compilers) had inline functions long before standard C.&lt;/li>
&lt;li>Comparison:
&lt;ol>
&lt;li>inline is just a suggestion.&lt;/li>
&lt;li>inline will check types.&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>I will not talk too much about this keyword since it is different from CPP. I do not want to mislead you.&lt;/li>
&lt;li>If you are interested in this topic, please read &lt;a class="link" href="http://www.greenend.org.uk/rjk/tech/inline.html" target="_blank" rel="noopener"
>here&lt;/a>.&lt;/li>
&lt;/ul>
&lt;h1 id="file-inclusion">&lt;a href="#file-inclusion" class="header-anchor">&lt;/a>File Inclusion
&lt;/h1>&lt;ul>
&lt;li>Why File Inclusion?
&lt;ul>
&lt;li>Divide a program in multiple files.
&lt;ul>
&lt;li>Each file contains related functions.&lt;/li>
&lt;li>How to classify functions. Up to you.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Some functions or macros are required in lot of programs.
&lt;ul>
&lt;li>Put them in a file. Make them a library.&lt;/li>
&lt;li>Include them when you need them.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>What does Inclusion Mean?
&lt;ul>
&lt;li>Nothing but simply &lt;font color=blue>copy and paste&lt;/font>.&lt;/li>
&lt;li>&lt;font color=blue>Nested Inclusion&lt;/font> is supported.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="conditional-compilation">&lt;a href="#conditional-compilation" class="header-anchor">&lt;/a>Conditional Compilation
&lt;/h1>&lt;ul>
&lt;li>Write one code to run on different environments.
&lt;ul>
&lt;li>&lt;code>#if&lt;/code>: if.&lt;/li>
&lt;li>&lt;code>#else&lt;/code>: else.&lt;/li>
&lt;li>&lt;code>#elif&lt;/code>: else if.&lt;/li>
&lt;li>&lt;code>#endif&lt;/code>: end if.&lt;/li>
&lt;li>&lt;code>#ifdef&lt;/code>: if defined.&lt;/li>
&lt;li>&lt;code>#ifndef&lt;/code>: if not defined.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="ifdef-and-endif">&lt;a href="#ifdef-and-endif" class="header-anchor">&lt;/a>ifdef and endif
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifdef macroname
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span> &lt;span class="n">statement&lt;/span> &lt;span class="n">sequence&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果 macroname 被定義了，那麼 &lt;code>#ifdef&lt;/code> 和 &lt;code>#endif&lt;/code> 之間的程式將被執行。&lt;/li>
&lt;li>範例：
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifndef TEST_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define TEST_H
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>但也可用 &lt;code>#pragma once&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>gcc -D OS_LINUX os_dependent.c&lt;/code>&lt;/li>
&lt;li>&lt;code>-D&lt;/code>: Predefine name as a macro, with definition 1.&lt;/li>
&lt;li>So one code can be executed on different OSs. What you need to do is to build your code with different definitions.&lt;/li>
&lt;li>This is a very useful technique. Let’s see a real case (&lt;a class="link" href="https://github.com/DaveGamble/cJSON/blob/master/cJSON.h" target="_blank" rel="noopener"
>cJSON&lt;/a>).&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>請自行去了解 &lt;code>#&lt;/code> 及 &lt;code>##&lt;/code> 在巨集中的作用。&lt;/li>
&lt;/ul></description></item><item><title>程式設計(二)-05：Variable Length Arguments List</title><link>https://blog.smallten.me/p/computer_programming_2-05/</link><pubDate>Mon, 12 Jul 2021 21:57:26 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_2-05/</guid><description>&lt;h1 id="program-argument">&lt;a href="#program-argument" class="header-anchor">&lt;/a>Program Argument
&lt;/h1>&lt;h3 id="argc-argv">&lt;a href="#argc-argv" class="header-anchor">&lt;/a>argc, argv
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;argc: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">argc&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;argv[%d]: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>誰呼叫了 main 函式?&lt;/li>
&lt;li>誰提供了 &lt;code>argc&lt;/code> 和 &lt;code>argv&lt;/code> 到 main 函式?&lt;/li>
&lt;li>Is &lt;code>main()&lt;/code> the actual starting entry point?
&lt;ul>
&lt;li>No! Actually, the process start from &lt;code>_start&lt;/code> which is defined in &lt;code>crt1.o&lt;/code>.&lt;/li>
&lt;li>等等&amp;hellip; 我並沒有使用 &lt;code>crt1.o&lt;/code> 呀!&lt;/li>
&lt;li>實際上是有的。請查看 &lt;code>gcc -v&lt;/code>
&lt;code>$ nm /usr/lib/x86_64-linux-gnu/crt1.o&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Simplified C Linking Process
&lt;img src="https://blog.smallten.me/p/computer_programming_2-05/computer_programming_2-05-01.jpg"
width="903"
height="657"
srcset="https://blog.smallten.me/p/computer_programming_2-05/computer_programming_2-05-01_hu2549156091622310294.jpg 480w, https://blog.smallten.me/p/computer_programming_2-05/computer_programming_2-05-01_hu2642025421943501073.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="137"
data-flex-basis="329px"
>&lt;/li>
&lt;li>main() 是如何取得 argc, argv 的?
&lt;ul>
&lt;li>Actually, &lt;code>_start&lt;/code> will prepare argc and argv first.&lt;/li>
&lt;li>Then &lt;code>_start&lt;/code> will register main function to &lt;code>__libc_start_main&lt;/code>.&lt;/li>
&lt;li>&lt;code>_start&lt;/code> will call &lt;code>__libc_start_main&lt;/code> and &lt;code>__libc_start_main&lt;/code> will call main.&lt;/li>
&lt;li>More details will be described in Assembly.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="getopt">&lt;a href="#getopt" class="header-anchor">&lt;/a>getopt
&lt;/h3>&lt;p>&lt;code>int getopt(int argc, char * const argv[], const char *optstring);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The getopt() function parses the command-line arguments. Its arguments argc and argv are the argument count and array as passed to the main() function on program invocation. An element of argv that starts with ’-’ (and is not exactly ”-” or ”–”) is an option element. The characters of this element (aside from the initial ’-’) are option characters. If getopt() is called repeatedly, it returns successively each of the option characters from each of the option elements.&lt;/li>
&lt;li>提醒：這是一個 &lt;code>POSIX 標準&lt;/code>而不是 C 標準。&lt;/li>
&lt;li>extern 變數
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">optarg&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">extern&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">optind&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">opterr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optopt&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>這意味著我們可以在程式中使用這些變數。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">getopt&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;ab:&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: -a&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: -b, %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optarg&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;?&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: ?&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: unknown&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>optstring
&lt;ul>
&lt;li>optstring 是一個包含合法選項字符的字符串。&lt;/li>
&lt;li>Example: &lt;code>&amp;quot;abc&amp;quot;&lt;/code> implies supporting &lt;code>-a&lt;/code>, &lt;code>-b&lt;/code>, &lt;code>-c&lt;/code>.&lt;/li>
&lt;li>&lt;code>-ab&lt;/code>, &lt;code>-bc&lt;/code>, &lt;code>-ac&lt;/code>, &lt;code>-abc&lt;/code> are also supported.&lt;/li>
&lt;li>如果這樣的字符後跟一個冒號，則意味著該選項需要一個參數。 &lt;code>optarg&lt;/code> 為參數值。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>回傳值
&lt;ul>
&lt;li>如果成功找到選項，則 getopt() 回傳選項字符。&lt;/li>
&lt;li>如果所有命令行選項都已解析，則 getopt() 回傳 -1。&lt;/li>
&lt;li>如果 getopt() 遇到不在 optstring 中的選項字符，則返回 &lt;code>'?'&lt;/code>。&lt;/li>
&lt;li>如果 getopt() 遇到缺少參數的選項，則返回值取決於 optstring 中的第一個字符：
&lt;ul>
&lt;li>如果是&lt;code>':'&lt;/code>，則返回&lt;code>':'&lt;/code>；&lt;/li>
&lt;li>否則返回&lt;code>'?'&lt;/code>。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="getopt_long">&lt;a href="#getopt_long" class="header-anchor">&lt;/a>getopt_long
&lt;/h3>&lt;p>&lt;code>int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The getopt_long() function works like getopt() except that it also accepts long options, started with two dashes. If the program accepts only long options, then optstring should be specified as an empty string (””), not NULL. Long option names may be abbreviated if the abbreviation is unique or is an exact match for some defined option. A long option may take a parameter, of the form –arg=param or –arg param.&lt;/li>
&lt;li>If longindex is not NULL, it points to a variable which is set to the index of the long option relative to longopts.&lt;/li>
&lt;li>struct option
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">option&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">has_arg&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">flag&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">val&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>name: the name of the long option.&lt;/li>
&lt;li>has_arg:
&lt;ul>
&lt;li>0: no arguments.&lt;/li>
&lt;li>1: required arguments.&lt;/li>
&lt;li>2: optional arguments.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>flag: specifies how results are returned for a long option.&lt;/li>
&lt;li>val: the value to return, or to load into the variable pointed to by flag.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;getopt.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">option&lt;/span> &lt;span class="n">long_options&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;all&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;break&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="s">&amp;#34;cancel&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">},&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">getopt_long&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">argv&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;abc:&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">long_options&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;index: %d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">switch&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">c&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;a&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: -a&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;b&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: -b&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;c&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: -c, %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">optarg&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="sc">&amp;#39;?&amp;#39;&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: ?&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;option: unknown&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="variable-length-arguments">&lt;a href="#variable-length-arguments" class="header-anchor">&lt;/a>Variable Length Arguments
&lt;/h1>&lt;ul>
&lt;li>可變長度參數是一項功能，允許函數接收任意數量的參數。&lt;/li>
&lt;li>可變數量的參數由三個點表示 &lt;code>...&lt;/code>。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdarg.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">va_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">va_list&lt;/span> &lt;span class="n">ap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">last&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">type&lt;/span> &lt;span class="nf">va_arg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">va_list&lt;/span> &lt;span class="n">ap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">type&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">va_end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">va_list&lt;/span> &lt;span class="n">ap&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">va_copy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">va_list&lt;/span> &lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">va_list&lt;/span> &lt;span class="n">src&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Actually, they are macros instead of functions.&lt;/li>
&lt;li>範例一： printargs.c
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdarg.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="cm">/* print all args one at a time until a negative argument is seen;
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cm">all args are assumed to be of int type */&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">printargs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">arg1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">va_list&lt;/span> &lt;span class="n">ap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">va_start&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">ap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arg1&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arg1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">va_arg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int32_t&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">va_end&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">ap&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">putchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="sc">&amp;#39;\n&amp;#39;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printargs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">14&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">84&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">97&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">48&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printargs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">84&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">51&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printargs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printargs&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>範例二： avg.c
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdarg.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="nf">average&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">va_list&lt;/span> &lt;span class="n">valist&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">va_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">valist&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="nf">va_arg&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">valist&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int32_t&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">va_end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">valist&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">double&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Average of { 3, 4 } = %lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">average&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">4&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Average of { 5, 10, 15 } = %lf&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="nf">average&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">3&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">15&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul></description></item><item><title>程式設計(二)-04：File Processing-02</title><link>https://blog.smallten.me/p/computer_programming_2-04/</link><pubDate>Sat, 08 May 2021 17:23:11 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_2-04/</guid><description>&lt;ul>
&lt;li>如何顯示 BMP 檔 ?
&lt;ul>
&lt;li>有很多 libraries 可以幫助您做到這一點。實際上，您應該使用它們而不是從頭開始開發。&lt;/li>
&lt;li>如何在螢幕上顯示圖像？
&lt;ul>
&lt;li>您必須至少學習一個 GUI 庫，例如 Gtk、Qt 等。&lt;/li>
&lt;li>我的建議：Qt。但是，這是一個 C++ 框架。&lt;/li>
&lt;li>了解如何使用 GUI 平台提供的功能顯示圖像。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="gtk">&lt;a href="#gtk" class="header-anchor">&lt;/a>GTK
&lt;/h1>&lt;ul>
&lt;li>GTK（以前稱為 GTK+、GIMP ToolKit）是一個免費的開源跨平台的部件工具箱 (widget toolkit)，用於創建圖形用戶界面（GUIs）。&lt;/li>
&lt;li>GTK 是用 C 語言所編寫的物件導向的部件工具箱。它使用 GObject（即 GLib 物件系統）進行物件導向。
&lt;ul>
&lt;li>因此，不要告訴我 C 不能物件導向。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安裝：sudo apt install libgtk-3-dev&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="sdl">&lt;a href="#sdl" class="header-anchor">&lt;/a>SDL
&lt;/h1>&lt;ul>
&lt;li>Simple DirectMedia Layer&lt;/li>
&lt;li>SDL是跨平台的軟件開發庫，為計算機多媒體硬件組件提供硬件抽象層。
&lt;ul>
&lt;li>視頻&lt;/li>
&lt;li>聲音的&lt;/li>
&lt;li>輸入設備&lt;/li>
&lt;li>光盤&lt;/li>
&lt;li>螺紋&lt;/li>
&lt;li>共享對象加載&lt;/li>
&lt;li>聯網&lt;/li>
&lt;li>計時器&lt;/li>
&lt;li>3D圖形&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>軟體開發者可以使用它來編寫高性能的電腦遊戲和其他多媒體應用程式。&lt;/li>
&lt;li>SDL 架構 / 範例&lt;/li>
&lt;/ul>
&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-01.jpg"
width="789"
height="663"
srcset="https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-01_hu15376884360290216737.jpg 480w, https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-01_hu2515003578839042156.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="119"
data-flex-basis="285px"
> &lt;img src="https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-02.jpg"
width="799"
height="506"
srcset="https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-02_hu7992973231419426355.jpg 480w, https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-02_hu4098019237280995977.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="157"
data-flex-basis="378px"
>&lt;/p>
&lt;ul>
&lt;li>SDL Object
&lt;ul>
&lt;li>&lt;code>SDL_Window&lt;/code>：包含有關 Window 本身的所有信息的結構：大小、位置、全螢幕、邊框等。&lt;/li>
&lt;li>&lt;code>SDL_Renderer&lt;/code>：處理所有渲染的結構。它與 &lt;code>SDL_Window&lt;/code> 綁定在一起，因此只能在該 &lt;code>SDL_Window&lt;/code> 中呈現。&lt;/li>
&lt;li>&lt;code>SDL_Textures&lt;/code> 和 &lt;code>SDL_Surface&lt;/code>：&lt;code>SDL_Renderer&lt;/code> 渲染&lt;code>SDL_Texture&lt;/code>(存儲一個元素的像素資訊)。這是 &lt;code>SDL_Surface&lt;/code> 的新版本，他們幾乎相同。
&lt;ul>
&lt;li>重要的區別是 &lt;code>SDL_Surface&lt;/code> 使用軟件渲染（通過CPU），而 &lt;code>SDL_Texture&lt;/code> 使用硬件渲染（通過GPU）。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>安裝：&lt;code>sudo apt-get install libsdl2-dev libsdl2-image-dev&lt;/code>&lt;/li>
&lt;li>Makefile
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-Makefile" data-lang="Makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CFLAGS&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="sb">`&lt;/span>sdl2-config --libs --cflags&lt;span class="sb">`&lt;/span> -ggdb3 -O0 --std&lt;span class="o">=&lt;/span>c99 -Wall -lSDL2_image -lm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">example&lt;/span>.&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gcc example.c -o example &lt;span class="k">$(&lt;/span>CFLAGS&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rm example
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="file-descriptor">&lt;a href="#file-descriptor" class="header-anchor">&lt;/a>File Descriptor
&lt;/h1>&lt;ul>
&lt;li>POSIX C Implementation
&lt;ul>
&lt;li>C 標准定義了語法和標準庫，但不規範實現。&lt;/li>
&lt;li>所以在 Linux 中，fopen、fclose、printf、scanf、fprintf、fscanf、fread 和 fwrite 是通過低階 API 實現的：
&lt;ul>
&lt;li>open&lt;/li>
&lt;li>read&lt;/li>
&lt;li>write&lt;/li>
&lt;li>close&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>現在，我們將使用這些較低級別的 API 來訪問文件。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="open-close">&lt;a href="#open-close" class="header-anchor">&lt;/a>open, close
&lt;/h3>&lt;p>&lt;code>int open(const char *pathname, int flags);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>Given a pathname for a file, open() returns a file descriptor, a small, nonnegative integer for use in subsequent system calls.&lt;/li>
&lt;li>open() returns the new file descriptor, or -1 if an error occurred.&lt;/li>
&lt;li>The argument flags must include one of the following access modes: &lt;code>O_RDONLY&lt;/code>, &lt;code>O_WRONLY&lt;/code>, or &lt;code>O_RDWR&lt;/code>.
&lt;code>int close(int fd);&lt;/code>&lt;/li>
&lt;li>close() closes a file descriptor, so that it no longer refers to any file and may be reused. close() returns zero on success. On error, -1 is returned, and errno is set appropriately.&lt;/li>
&lt;li>For more flags, please read manual.&lt;/li>
&lt;/ul>
&lt;h3 id="read-write">&lt;a href="#read-write" class="header-anchor">&lt;/a>read, write
&lt;/h3>&lt;p>&lt;code>ssize_t read(int fd, void *buf, size_t count);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>read() attempts to read up to count bytes from file descriptor fd into the buffer starting at buf. On files that support seeking, the read operation commences at the current file offset, and the file offset is incremented by the number of bytes read. If the current file offset is at or past the end of file, no bytes are read, and read() returns zero.
&lt;code>ssize_t write(int fd, const void *buf, size_t count);&lt;/code>&lt;/li>
&lt;li>write() writes up to count bytes from the buffer pointed buf to the file referred to by the file descriptor fd.&lt;/li>
&lt;li>How about seek? use &lt;code>lseek&lt;/code>.&lt;/li>
&lt;/ul>
&lt;h3 id="fstat">&lt;a href="#fstat" class="header-anchor">&lt;/a>fstat
&lt;/h3>&lt;p>&lt;code>int fstat(int fd, struct stat *buf);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>These functions return information about a file, in the buffer pointed to by buf.&lt;/li>
&lt;/ul>
&lt;h1 id="mmap">&lt;a href="#mmap" class="header-anchor">&lt;/a>mmap
&lt;/h1>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-03.png"
width="504"
height="373"
srcset="https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-03_hu10062544659553517583.png 480w, https://blog.smallten.me/p/computer_programming_2-04/computer_programming_2-04-03_hu4603969150392364191.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="135"
data-flex-basis="324px"
>&lt;/p>
&lt;p>&lt;code>void *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>mmap() creates a new mapping in the virtual address space of the calling process. The starting address for the new mapping is specified in addr. The length argument specifies the length of the mapping.&lt;/li>
&lt;li>If addr is NULL, then the kernel chooses the address at which to create the mapping.&lt;/li>
&lt;li>現在您可以將返回地址視為一個大陣列，您可以直接訪問數據，包括修改數值。&lt;/li>
&lt;li>在使用 mmap 後，請記得要 &lt;code>munmap&lt;/code>。&lt;/li>
&lt;li>&lt;code>mmap()&lt;/code> 不是標準 C 的函式&lt;/li>
&lt;li>&lt;code>MapViewOfFile&lt;/code> function is somewhat equivalent to mmap in Windows.&lt;/li>
&lt;/ul></description></item><item><title>程式設計(二)-03：File Processing-01</title><link>https://blog.smallten.me/p/computer_programming_2-03/</link><pubDate>Fri, 02 Apr 2021 17:58:22 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_2-03/</guid><description>&lt;h1 id="file">&lt;a href="#file" class="header-anchor">&lt;/a>File
&lt;/h1>&lt;ul>
&lt;li>C 將每個檔案視為一個連續的 bytes stream&lt;/li>
&lt;li>每個檔案以 &lt;code>end-of-file&lt;/code> 為結尾，這是由系統提供而不是文件。
&lt;img src="https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-01.jpg"
width="812"
height="100"
srcset="https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-01_hu7527752010453324051.jpg 480w, https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-01_hu5946345389551410217.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="812"
data-flex-basis="1948px"
>&lt;/li>
&lt;li>It looks like there is an additional byte appended to the file. However, that additional byte does not exist. Instead, it is a signal raised by your system.&lt;/li>
&lt;li>&lt;code>int feof(FILE *stream);&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="file-stream">&lt;a href="#file-stream" class="header-anchor">&lt;/a>File Stream
&lt;/h2>&lt;ul>
&lt;li>Streams 提供了更高級別的介面(interface)讓你存取資料。
&lt;ul>
&lt;li>&lt;code>fprintf&lt;/code>&lt;/li>
&lt;li>&lt;code>fscanf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>事實上，你已經使用過 file stream !
&lt;ul>
&lt;li>三種標準流
&lt;ol>
&lt;li>標準輸入 0 (standard input.)&lt;/li>
&lt;li>標準輸出 1 (standard output.)&lt;/li>
&lt;li>標準錯誤 2 (standard error.)&lt;/li>
&lt;/ol>
&lt;/li>
&lt;li>真的嗎? 哪時候呀?&lt;/li>
&lt;li>&lt;code>scanf&lt;/code> -&amp;gt; scanf() 從標準輸入流中讀取輸入&lt;/li>
&lt;li>&lt;code>scanf&lt;/code> 的實作
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">fmt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">va_list&lt;/span> &lt;span class="n">ap&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">va_start&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ap&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">vfscanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">stdin&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">fmt&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ap&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">va_end&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ap&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="file-descriptor">&lt;a href="#file-descriptor" class="header-anchor">&lt;/a>File Descriptor
&lt;/h2>&lt;ul>
&lt;li>File descriptor 為輸出入的操作提供了原始的低級介面(interface)。&lt;/li>
&lt;li>在 Linux 中，任何東西都可以被視為一個檔案。
&lt;ul>
&lt;li>Network socker&lt;/li>
&lt;li>Device driver&lt;/li>
&lt;li>Inter-process communication&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>支援哪些操作?
&lt;ul>
&lt;li>&lt;code>open&lt;/code>、&lt;code>read&lt;/code>、&lt;code>write&lt;/code>、&lt;code>close&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>如果要控制某些詳細的設定，你需要使用 file descriptor 而不是 file stream。&lt;/li>
&lt;/ul>
&lt;h3 id="file-stream-vs-file-descriptor">&lt;a href="#file-stream-vs-file-descriptor" class="header-anchor">&lt;/a>File Stream vs. File Descriptor
&lt;/h3>&lt;ul>
&lt;li>Structure:
&lt;ul>
&lt;li>Stream: &lt;code>FILE *&lt;/code>&lt;/li>
&lt;li>Descriptor: &lt;code>int&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>可以用 file stream 實現的，就一定可以用 file descriptor 實現，其逆不真。&lt;/li>
&lt;li>File streams 有更多方便的介面(interface)給你使用。&lt;/li>
&lt;/ul>
&lt;h2 id="io-redirection">&lt;a href="#io-redirection" class="header-anchor">&lt;/a>I/O Redirection
&lt;/h2>&lt;h3 id="stdout">&lt;a href="#stdout" class="header-anchor">&lt;/a>stdout
&lt;/h3>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-02.jpg"
width="890"
height="552"
srcset="https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-02_hu481598910743009187.jpg 480w, https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-02_hu13114987398873744076.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="161"
data-flex-basis="386px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;code>&amp;gt;&lt;/code> filename
&lt;ul>
&lt;li>重導向 stdout 到一個檔案&lt;/li>
&lt;li>如果檔案不存在就創建文件，否則就將其覆蓋&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;gt;&amp;gt;&lt;/code> filename
&lt;ul>
&lt;li>重導向 stdout 到一個檔案&lt;/li>
&lt;li>如果檔案不存在就創建文件，否則就加在後方&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>&amp;gt;&lt;/code> filename&lt;/li>
&lt;li>&lt;code>1&amp;gt;&lt;/code> filename
&lt;ul>
&lt;li>Redirect stdout to file &amp;ldquo;filename&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;gt;&amp;gt;&lt;/code> filename&lt;/li>
&lt;li>&lt;code>1&amp;gt;&amp;gt;&lt;/code> filename
&lt;ul>
&lt;li>Redirect and append stdout to file &amp;ldquo;filename&amp;rdquo;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>2&amp;gt;&lt;/code> filename
&lt;ul>
&lt;li>Redirect stderr to file ”filename.”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>2&amp;gt;&amp;gt;&lt;/code> filename
&lt;ul>
&lt;li>Redirect and append stderr to file ”filename.”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;amp;&amp;gt;&lt;/code> filename
&lt;ul>
&lt;li>Redirect stdout, stderr to file ”filename.”&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="stdin">&lt;a href="#stdin" class="header-anchor">&lt;/a>stdin
&lt;/h3>&lt;p>&lt;code>$ . / abs &amp;lt; number.txt&lt;/code>&lt;/p>
&lt;h1 id="text-file-processing">&lt;a href="#text-file-processing" class="header-anchor">&lt;/a>Text File Processing
&lt;/h1>&lt;h3 id="fopen">&lt;a href="#fopen" class="header-anchor">&lt;/a>fopen
&lt;/h3>&lt;p>&lt;code>FILE *fopen(const char *path, const char *mode);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>path：檔案路徑&lt;/li>
&lt;li>mode：
&lt;ul>
&lt;li>&lt;code>r&lt;/code>：read&lt;/li>
&lt;li>&lt;code>w&lt;/code>：write&lt;/li>
&lt;li>&lt;code>a&lt;/code>：append&lt;/li>
&lt;li>更多的選項在手冊中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Return：&lt;code>FILE *&lt;/code>
&lt;ul>
&lt;li>成功的話，FILE pointer 將被回傳&lt;/li>
&lt;li>如果失敗的話，將回傳 NULL 並且 errno 被設置為表明 error&lt;/li>
&lt;li>永遠記得確認回傳的 pointer!&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="fprintf">&lt;a href="#fprintf" class="header-anchor">&lt;/a>fprintf
&lt;/h3>&lt;ul>
&lt;li>幾乎和&lt;code>printf&lt;/code>相同，除了你需要給 FILE stream pointer。&lt;/li>
&lt;/ul>
&lt;h3 id="end-of-file-indicator">&lt;a href="#end-of-file-indicator" class="header-anchor">&lt;/a>End-of-File Indicator
&lt;/h3>&lt;ul>
&lt;li>Linu/Mac OS X/UNIX：&lt;code>&amp;lt;Ctrl&amp;gt; d&lt;/code>&lt;/li>
&lt;li>Windows：&lt;code>&amp;lt;Ctrl&amp;gt; z + enter&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="fclose">&lt;a href="#fclose" class="header-anchor">&lt;/a>fclose
&lt;/h3>&lt;p>&lt;code>int fclose(FILE *stream);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>&lt;code>fclose()&lt;/code>&lt;/li>
&lt;li>The fclose() function flushes the stream pointed to by stream (writing any buffered output data using fflush(3)) and closes the underlying file descriptor.&lt;/li>
&lt;li>也就是說，當你 close 時，在 buffer 中的資料將被寫入檔案&lt;/li>
&lt;li>在開檔後記得關上它!! 因為有同時開檔的數量上限。&lt;/li>
&lt;/ul>
&lt;h3 id="fscanf">&lt;a href="#fscanf" class="header-anchor">&lt;/a>fscanf
&lt;/h3>&lt;ul>
&lt;li>操作就如同 &lt;code>fprintf&lt;/code>&lt;/li>
&lt;li>當然，檔案應該被以 &lt;code>r&lt;/code> 的模式打開&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>當你使用 &lt;code>fprintf&lt;/code> 或 &lt;code>fscanf&lt;/code> 去處理文字檔時，它蘊含著你清楚地知道檔案的格式&lt;/li>
&lt;li>在這些情況下，輸入的檢查也許就沒那麼重要了，對吧?
&lt;ul>
&lt;li>Yes：畢竟格式由你決定。&lt;/li>
&lt;li>No：有些人可能會修改檔案，並使你讀取它。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="file-position-pointer">&lt;a href="#file-position-pointer" class="header-anchor">&lt;/a>File Position Pointer
&lt;/h2>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-03.jpg"
width="784"
height="487"
srcset="https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-03_hu15911136391182091241.jpg 480w, https://blog.smallten.me/p/computer_programming_2-03/computer_programming_2-03-03_hu5253341277596996956.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="160"
data-flex-basis="386px"
>&lt;/p>
&lt;ul>
&lt;li>所以我們可以返回到開始的位置嗎??
&lt;ul>
&lt;li>為什麼我們需要這麼做? -&amp;gt; 影片倒放&lt;/li>
&lt;li>當然，你可以關掉檔案並重開它。&lt;/li>
&lt;li>但我們有另外的函式可以幫助我們 -&amp;gt; &lt;code>rewind&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="rewind">&lt;a href="#rewind" class="header-anchor">&lt;/a>rewind
&lt;/h3>&lt;p>&lt;code>void rewind(FILE *stream);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>將位置指回檔案的開頭。&lt;/li>
&lt;li>那麼我們想要改變 file pointer 到任何地方呢? -&amp;gt; &lt;code>fseek&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="fseek">&lt;a href="#fseek" class="header-anchor">&lt;/a>fseek
&lt;/h3>&lt;p>&lt;code>int fseek(FILE *stream, long offset, int whence);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>The fseek() function sets the file position indicator for the stream pointed to by stream. The new position, measured in bytes, is obtained by adding offset bytes to the position specified by whence.&lt;/li>
&lt;li>&lt;code>SEEK_SET&lt;/code>：檔案開頭&lt;/li>
&lt;li>&lt;code>SEEK_CUR&lt;/code>：當前位置&lt;/li>
&lt;li>&lt;code>SEEK_END&lt;/code>：end-of-file&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>&lt;code>rewind()&lt;/code> 相當於 &lt;code>fseek(stream, 0L, SEEK_SET)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="ftell">&lt;a href="#ftell" class="header-anchor">&lt;/a>ftell
&lt;/h3>&lt;p>&lt;code>long ftell(FILE *stream);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>告訴你當前所在的位置。&lt;/li>
&lt;/ul>
&lt;h1 id="binary-file-processing">&lt;a href="#binary-file-processing" class="header-anchor">&lt;/a>Binary File Processing
&lt;/h1>&lt;h2 id="binary-file">&lt;a href="#binary-file" class="header-anchor">&lt;/a>Binary File
&lt;/h2>&lt;ul>
&lt;li>文字檔以字元的方式儲存資料，然而並不是所有的檔案都是文字檔。例如，你可以用文字編輯器打開一張圖片。&lt;/li>
&lt;li>此外文字檔的儲存效率並不高
&lt;ul>
&lt;li>需要多少大小去儲存數字 123 ?&lt;/li>
&lt;li>Text File：3 bytes&lt;/li>
&lt;li>Binary File：1 byte&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="fread">&lt;a href="#fread" class="header-anchor">&lt;/a>fread
&lt;/h3>&lt;p>&lt;code>size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>從 FILE * 讀取 nmemb 個資料，每個 size bytes 長，並將它們儲存在 *ptr。&lt;/li>
&lt;li>成功時回傳資料讀取的數量。如果失敗，或到達文件尾端時，則回傳是一短項計數 (或 0)&lt;/li>
&lt;/ul>
&lt;h3 id="fwrite">&lt;a href="#fwrite" class="header-anchor">&lt;/a>fwrite
&lt;/h3>&lt;p>&lt;code>size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);&lt;/code>&lt;/p>
&lt;ul>
&lt;li>從 *ptr 讀取 nmemb 個資料，每個 size bytes 長，並將它們儲存在 FILE *。&lt;/li>
&lt;li>成功時回傳資料寫入的數量。如果失敗，或到達文件尾端時，則回傳是一短項計數 (或 0)&lt;/li>
&lt;/ul>
&lt;h2 id="bmp-file-format">&lt;a href="#bmp-file-format" class="header-anchor">&lt;/a>BMP File Format
&lt;/h2>&lt;ul>
&lt;li>這裡將使用 bmp 檔作為示範
&lt;ul>
&lt;li>為什麼是 bmp 而不是 jpg ? -&amp;gt; 因為 bmp 是一種未被壓縮的照片格式。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a class="link" href="https://engineering.purdue.edu/ece264/17au/hw/HW15" target="_blank" rel="noopener"
>連結&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="讀取-bmp-檔">&lt;a href="#%e8%ae%80%e5%8f%96-bmp-%e6%aa%94" class="header-anchor">&lt;/a>讀取 bmp 檔
&lt;/h3>&lt;ul>
&lt;li>讀取 bmp file header 並印出資訊&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;span class="lnt">40
&lt;/span>&lt;span class="lnt">41
&lt;/span>&lt;span class="lnt">42
&lt;/span>&lt;span class="lnt">43
&lt;/span>&lt;span class="lnt">44
&lt;/span>&lt;span class="lnt">45
&lt;/span>&lt;span class="lnt">46
&lt;/span>&lt;span class="lnt">47
&lt;/span>&lt;span class="lnt">48
&lt;/span>&lt;span class="lnt">49
&lt;/span>&lt;span class="lnt">50
&lt;/span>&lt;span class="lnt">51
&lt;/span>&lt;span class="lnt">52
&lt;/span>&lt;span class="lnt">53
&lt;/span>&lt;span class="lnt">54
&lt;/span>&lt;span class="lnt">55
&lt;/span>&lt;span class="lnt">56
&lt;/span>&lt;span class="lnt">57
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">_sBmpHeader&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">bm&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">reserve&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">offset&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">header_size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">height&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">planes&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint16_t&lt;/span> &lt;span class="n">bpp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">compression&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">bitmap_size&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">hres&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">vres&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">used&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">important&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="nf">__attribute__&lt;/span> &lt;span class="p">((&lt;/span>&lt;span class="n">__packed__&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">_sBmpHeader&lt;/span> &lt;span class="n">sBmpHeader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">print_bmp_header&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">sBmpHeader&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pHeader&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;ID: %c%c&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">bm&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">bm&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Size: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">size&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Reserve: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">reserve&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Offset: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">offset&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Header Size: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">header_size&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Width: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Height: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">height&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Planes: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">planes&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Bits Per Pixel: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">bpp&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Compression: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">compression&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Bitmap Data Size: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">bitmap_size&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;H-Resolution: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">hres&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;V-Resolution: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">vres&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Used Colors: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">used&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;Important Colors: %u&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pHeader&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">important&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">pFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;maldives_16.bmp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;File could not be opened!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sBmpHeader&lt;/span> &lt;span class="n">header&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%lu&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fread&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">54&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">print_bmp_header&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fclose&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pFile&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="修改-bmp-檔">&lt;a href="#%e4%bf%ae%e6%94%b9-bmp-%e6%aa%94" class="header-anchor">&lt;/a>修改 bmp 檔
&lt;/h3>&lt;ul>
&lt;li>翻轉顏色&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...略...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">pFile2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">pFile&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;maldives.bmp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;rb&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;File could not be opened!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">pFile2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fopen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;maldives_gray.bmp&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34;wb&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;File could not be opened!&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sBmpHeader&lt;/span> &lt;span class="n">header&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fread&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">header&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pFile&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fwrite&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">header&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">header&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pFile2&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">feof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pFile&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">modified&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1024&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fread&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1024&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pFile&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">modified&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">255&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fwrite&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">modified&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pFile2&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fclose&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">pFile&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fclose&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">pFile2&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>轉成灰階&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...略...
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">!&lt;/span>&lt;span class="nf">feof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">pFile&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">999&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">modified&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">999&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">fread&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">999&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pFile&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// BGR
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">gray&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.299&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">2&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">0.587&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mf">0.114&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">original&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">size_t&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">modified&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">gray&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">fwrite&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">modified&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">count&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">pFile2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// ...略...
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;h4 id="hex-編輯工具">&lt;a href="#hex-%e7%b7%a8%e8%bc%af%e5%b7%a5%e5%85%b7" class="header-anchor">&lt;/a>Hex 編輯工具
&lt;/h4>&lt;ul>
&lt;li>Bless Hex Editor&lt;/li>
&lt;li>GHex&lt;/li>
&lt;/ul></description></item><item><title>程式設計(二)-02：Structure</title><link>https://blog.smallten.me/p/computer_programming_2-02/</link><pubDate>Fri, 02 Apr 2021 16:24:46 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_2-02/</guid><description>&lt;h1 id="structure">&lt;a href="#structure" class="header-anchor">&lt;/a>Structure
&lt;/h1>&lt;ul>
&lt;li>Structures 就是將一堆相關的變數整合在一個名字下。
&lt;ul>
&lt;li>關鍵字：&lt;code>struct&lt;/code>&lt;/li>
&lt;li>資料型別：&lt;code>struct _name_&lt;/code>&lt;/li>
&lt;li>成員：在 struct 的大括號內宣告的變數。&lt;/li>
&lt;li>同一個結構體下的成員名稱是唯一的。&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">_sCard&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">suit&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">face&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>初始化
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">_sCard&lt;/span> &lt;span class="n">a_card&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{.&lt;/span>&lt;span class="n">suit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">face&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">_sCard&lt;/span> &lt;span class="n">a_card&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>structure member operator -&amp;gt; &lt;code>.&lt;/code>&lt;/li>
&lt;li>structure pointer operator -&amp;gt; &lt;code>-&amp;gt;&lt;/code>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a_card_ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">a_card&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a_card_ptr&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">face&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// Equivalent to
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">a_card_ptr&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">face&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="cpu-alignment">&lt;a href="#cpu-alignment" class="header-anchor">&lt;/a>CPU Alignment
&lt;/h2>&lt;ul>
&lt;li>CPU 有時候會為了減少從記憶體呼叫變數的次數，而主動將變數的記憶體放在連續的地方。&lt;/li>
&lt;li>為了避免 alignment，你可以使用以下兩種方法：
&lt;ul>
&lt;li>&lt;code>__attribute__((packed))&lt;/code>&lt;/li>
&lt;li>pragma
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma pack(push)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma pack(1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma pack(pop)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 法一
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="nf">__attribute__&lt;/span>&lt;span class="p">((&lt;/span>&lt;span class="n">packed&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 法二
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="cp">#pragma pack(push)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma pack(1)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">st&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma pack(pop)
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>Structure 不能包含自己，如果需要請用 pointer !
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">student&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">name&lt;/span> &lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">age&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">gender&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">student&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">leader&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h2 id="typedef">&lt;a href="#typedef" class="header-anchor">&lt;/a>typedef
&lt;/h2>&lt;ul>
&lt;li>由於軟體開發者盡可能的保持懶惰，因此他們嘗試縮短程式碼。&lt;/li>
&lt;li>為了提高可讀性&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">card&lt;/span> &lt;span class="n">Card&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">card&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">suit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">face&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Card&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="structure-with-functions">&lt;a href="#structure-with-functions" class="header-anchor">&lt;/a>Structure With Functions
&lt;/h2>&lt;ul>
&lt;li>為什麼我們時常以傳址的方式傳送 Structures ?
&lt;ul>
&lt;li>因為效率&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>傳值 vs 傳址
&lt;img src="https://blog.smallten.me/p/computer_programming_2-02/computer_programming_2-02-01.jpg"
width="790"
height="610"
srcset="https://blog.smallten.me/p/computer_programming_2-02/computer_programming_2-02-01_hu851014184626278754.jpg 480w, https://blog.smallten.me/p/computer_programming_2-02/computer_programming_2-02-01_hu3295406105675429986.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
> &lt;img src="https://blog.smallten.me/p/computer_programming_2-02/computer_programming_2-02-02.jpg"
width="790"
height="610"
srcset="https://blog.smallten.me/p/computer_programming_2-02/computer_programming_2-02-02_hu16044435402397742674.jpg 480w, https://blog.smallten.me/p/computer_programming_2-02/computer_programming_2-02-02_hu12024670068913066820.jpg 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/li>
&lt;/ul>
&lt;h2 id="const">&lt;a href="#const" class="header-anchor">&lt;/a>const
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// declare a as pointer to int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// syntax error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// declare a as const pointer to int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// syntax error
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// declare a as pointer to const int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// declare a as const pointer to const int
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>Although C and C++ read mostly from top-to-bottom and left-to-right, pointer declarations read, in a sense, backwards.&lt;/li>
&lt;/ul>
&lt;h1 id="union">&lt;a href="#union" class="header-anchor">&lt;/a>Union
&lt;/h1>&lt;ul>
&lt;li>Union 是所有成員共享相同記憶體空間的派生數據類型。&lt;/li>
&lt;li>記憶體大小足以容納最大的成員。&lt;/li>
&lt;li>實際應用&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">ip_addr&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint8_t&lt;/span> &lt;span class="n">fam&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="c1">// socket family type
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">union&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">in_addr&lt;/span> &lt;span class="n">ipv4_sin_addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">in6_addr&lt;/span> &lt;span class="n">ipv6_sin_addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>&lt;span class="n">addr&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="bitwise-operation">&lt;a href="#bitwise-operation" class="header-anchor">&lt;/a>Bitwise Operation
&lt;/h2>&lt;ul>
&lt;li>&lt;code>&amp;amp;&lt;/code>：AND -&amp;gt; 0&amp;amp;0 = 0; 0&amp;amp;1 = 0; 1&amp;amp;0 = 0; 1&amp;amp;1 = 1.&lt;/li>
&lt;li>&lt;code>|&lt;/code>：OR -&amp;gt; 0|0 = 0; 0|1 = 1; 1|0 = 1; 1|1 = 1.&lt;/li>
&lt;li>&lt;code>^&lt;/code>：XOR -&amp;gt; 0^0 = 0; 0^1 = 1; 1^0 = 1; 1^1 = 0.&lt;/li>
&lt;li>&lt;code>~&lt;/code>：Complement -&amp;gt; \(\text{\textasciitilde}4_{10}\) = \(\text{\textasciitilde}100_2\) = \(011_2\) = \(3_{10}\).&lt;/li>
&lt;li>&lt;code>&amp;lt;&amp;lt;&lt;/code>：Left Shift 0012 &amp;laquo; 2 = 1002.&lt;/li>
&lt;li>&lt;code>&amp;gt;&amp;gt;&lt;/code>：Right Shift 1002 &amp;raquo; 2 = 0012.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>為什麼我們需要 bitwise operation ?
&lt;ul>
&lt;li>在大多數情況下，按位運算比算術運算要快。
&lt;ul>
&lt;li>a = a * 2&lt;/li>
&lt;li>a = a &amp;laquo; 1&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>由於編譯器優化，這可能不是正確的。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Mask with better memory utilization.&lt;/li>
&lt;li>Game Cheating Example
&lt;ul>
&lt;li>０１ ⽕炎術 １０ 電擊術&lt;/li>
&lt;li>０２ 烈炎術 ２０ 落雷術&lt;/li>
&lt;li>０４ 炎⿓術 ４０ 轟雷術&lt;/li>
&lt;li>０８ 天⽕術 ８０ 神雷術&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="bit-fields">&lt;a href="#bit-fields" class="header-anchor">&lt;/a>Bit Fields
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">union&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="nl">b1&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="nl">b2&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="nl">b3&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="nl">b4&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="nl">b5&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="nl">b6&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="nl">b7&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="nl">b8&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="n">bits&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">byte&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">uByte&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>由於 alignment 問題，記憶體的空間可能不是安全的，這取決於你如何儲存你的資料。&lt;/li>
&lt;li>實際上，bit fields 可能會增加編程時的難度。我不建議您使用此功能，但是，您需要了解此語法，因為其他人可能會使用它。&lt;/li>
&lt;li>Do not take the address of a bit field.&lt;/li>
&lt;/ul>
&lt;h1 id="enumeration">&lt;a href="#enumeration" class="header-anchor">&lt;/a>Enumeration
&lt;/h1>&lt;ul>
&lt;li>A set of integer enumeration constants represented by identifiers.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">enum&lt;/span> &lt;span class="n">career&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">SABER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">LANCER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ARCHER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">RIDER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">CASTER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">ASSASSIN&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">BERSAKER&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">RULER&lt;/span>&lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">CAREER_MAX&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">31&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">typedef&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">player&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">char&lt;/span> &lt;span class="n">name&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">64&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">enum&lt;/span> &lt;span class="n">career&lt;/span> &lt;span class="n">role&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">uint32_t&lt;/span> &lt;span class="n">role2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span> &lt;span class="n">Player&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>你不能改變 enumeration constants 的值。&lt;/li>
&lt;li>我是否可以使用 &lt;code>define&lt;/code> 或 &lt;code>const&lt;/code> 而不是 &lt;code>enum&lt;/code>?
&lt;ul>
&lt;li>是，可以的。&lt;/li>
&lt;li>但他們有什麼不同呢?&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>程式設計(二)-01：String</title><link>https://blog.smallten.me/p/computer_programming_2-01/</link><pubDate>Fri, 02 Apr 2021 14:40:30 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_2-01/</guid><description>&lt;h1 id="字元">&lt;a href="#%e5%ad%97%e5%85%83" class="header-anchor">&lt;/a>字元
&lt;/h1>&lt;ul>
&lt;li>在講字串之前我們先來看什麼是字元。&lt;/li>
&lt;/ul>
&lt;h3 id="ascii">&lt;a href="#ascii" class="header-anchor">&lt;/a>ASCII
&lt;/h3>&lt;ul>
&lt;li>American Standard Code for Information Interchange.&lt;/li>
&lt;li>電子通訊的字元編碼標準&lt;/li>
&lt;li>基於英文字母，ASCII 將 128 個字元編碼成 7 個位元長。
&lt;ul>
&lt;li>95 個可印字元：A-Z, a-z, 0-9, 標點符號&lt;/li>
&lt;li>不可印字元：換行符號&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>在電腦中我們使用 8-bit 的記憶體儲存字元。&lt;/li>
&lt;li>在 C 語言中，使用 &lt;code>char&lt;/code> 這個型別。&lt;/li>
&lt;li>&lt;code>%c&lt;/code> -&amp;gt; 輸出字元&lt;/li>
&lt;li>&lt;code>%x&lt;/code> or &lt;code>%X&lt;/code> -&amp;gt; 印出 hex or HEX 的值。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>在以前，許多情況下，有些人使用 &lt;code>unsigned char&lt;/code> 作為 one byte 的資料型別，但現今你應該使用的是 &lt;code>uint8_t&lt;/code>。&lt;/li>
&lt;li>請把 &lt;code>char&lt;/code> 留給字串，盡管事實上對電腦來說都是一樣的。&lt;/li>
&lt;li>其他編碼：&lt;a class="link" href="https://zh.wikipedia.org/wiki/%E5%A4%A7%E4%BA%94%E7%A2%BC" target="_blank" rel="noopener"
>Big5&lt;/a>、&lt;a class="link" href="https://zh.wikipedia.org/wiki/UTF-8" target="_blank" rel="noopener"
>UTF-8&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="字串">&lt;a href="#%e5%ad%97%e4%b8%b2" class="header-anchor">&lt;/a>字串
&lt;/h1>&lt;ul>
&lt;li>事實上，字串就是一連串的可印字元。&lt;/li>
&lt;li>這樣看起來很像陣列對吧? Yes!&lt;/li>
&lt;/ul>
&lt;hr>
&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_2-01/computer_programming_2-01-01.png"
width="600"
height="106"
srcset="https://blog.smallten.me/p/computer_programming_2-01/computer_programming_2-01-01_hu9585700847095969493.png 480w, https://blog.smallten.me/p/computer_programming_2-01/computer_programming_2-01-01_hu10578424752242740559.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="566"
data-flex-basis="1358px"
>&lt;/p>
&lt;ul>
&lt;li>在 C 語言中，字串是一個字元指標，並以 &lt;code>'\0'&lt;/code> 為結尾。&lt;/li>
&lt;li>常見的錯誤：
&lt;ul>
&lt;li>沒有分配足夠的空間&lt;/li>
&lt;li>輸出一個不包含 &lt;code>'\0'&lt;/code> 的字串&lt;/li>
&lt;li>在 C 的標準中，字元指標是不可修改的，如果要修改字串，必須儲存在字元陣列中。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="字串處理函式">&lt;a href="#%e5%ad%97%e4%b8%b2%e8%99%95%e7%90%86%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>字串處理函式
&lt;/h2>&lt;ul>
&lt;li>首先，這部分有印象就好，不用記，畢竟到這邊大家應該都有能力自己實作出來吧!&lt;/li>
&lt;/ul>
&lt;h3 id="字串轉整數">&lt;a href="#%e5%ad%97%e4%b8%b2%e8%bd%89%e6%95%b4%e6%95%b8" class="header-anchor">&lt;/a>字串轉整數
&lt;/h3>&lt;ul>
&lt;li>很久很久以前
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">atoi&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">nptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">long&lt;/span> &lt;span class="nf">atol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">nptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>現今
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">// string to double
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">double&lt;/span> &lt;span class="nf">strtod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">nptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">endptr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// string to long int
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">long&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">strtol&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">nptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">endptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">base&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="輸出入函式">&lt;a href="#%e8%bc%b8%e5%87%ba%e5%85%a5%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>輸出入函式
&lt;/h3>&lt;ul>
&lt;li>輸出&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">putchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 輸出字元
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">puts&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 輸出字串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">snprintf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kr">restrict&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">bufsz&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kr">restrict&lt;/span> &lt;span class="n">format&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>輸入&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">getchar&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 輸入字元
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">fgets&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">FILE&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">stream&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 輸入字串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">sscanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kr">restrict&lt;/span> &lt;span class="n">buffer&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="kr">restrict&lt;/span> &lt;span class="n">format&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="p">...&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;ul>
&lt;li>一些不推薦的函式，永遠不要用他們
&lt;ul>
&lt;li>&lt;code>char *gets(char *s);&lt;/code>&lt;/li>
&lt;li>&lt;code>int sprintf(char *str, const char *format, ...);&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>有 buffer overflow 的風險&lt;/li>
&lt;/ul>
&lt;h3 id="字串操作函式">&lt;a href="#%e5%ad%97%e4%b8%b2%e6%93%8d%e4%bd%9c%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>字串操作函式
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strncpy&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 複製字串
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strncat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">dest&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">src&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 串接字串
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;ul>
&lt;li>和上述理由一樣，不要使用下方的函式
&lt;ul>
&lt;li>&lt;code>char *strcpy(char *dest,const char *src);&lt;/code>&lt;/li>
&lt;li>&lt;code>char *strcat(char *dest,const char *src);&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="字串比較函式">&lt;a href="#%e5%ad%97%e4%b8%b2%e6%af%94%e8%bc%83%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>字串比較函式
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">strcmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">strncmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果s1（或其前n個字節）分別小於、匹配或大於s2，則函數將返回小於、等於或大於零的整數。&lt;/li>
&lt;/ul>
&lt;h3 id="字串搜尋函式">&lt;a href="#%e5%ad%97%e4%b8%b2%e6%90%9c%e5%b0%8b%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>字串搜尋函式
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strchr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 從頭找字元
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strrchr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">c&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 從尾找字元
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 計算 s 的前綴有多少字元在 accept 中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">size_t&lt;/span> &lt;span class="nf">strspn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">accept&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 計算 s 的前綴有多少字元不在 reject 中
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">size_t&lt;/span> &lt;span class="nf">strcspn&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">reject&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 回傳在 accept 中的任何字元在 s 字串首次出現位置的指標
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strpbrk&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">accept&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 回傳 needle 在 haystack 中首次出現位置的指標
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strstr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">haystack&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">needle&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 依照 delim 中的字元分割 str
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strtok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">delim&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="strtok-範例">&lt;a href="#strtok-%e7%af%84%e4%be%8b" class="header-anchor">&lt;/a>strtok 範例
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="n">str&lt;/span>&lt;span class="p">[]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="s">&amp;#34;the value of pi is 3.14&amp;#34;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">strtok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">token&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d: %s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">token&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">token&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">strtok&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nb">NULL&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>為何第二次之後呼叫都是以 &lt;code>NULL&lt;/code> 作為輸入?
&lt;ul>
&lt;li>因為這是一個 &lt;code>static&lt;/code> 的變數。如果輸入 &lt;code>NULL&lt;/code>，該函式將繼續從最後一個位置切割字串。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>為甚麼我不能直接使用 &lt;code>const char *str&lt;/code>?
&lt;ul>
&lt;li>因為 &lt;code>strtok&lt;/code> 的實作，將會直接操作在輸入的字串上。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="其他字串函式">&lt;a href="#%e5%85%b6%e4%bb%96%e5%ad%97%e4%b8%b2%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>其他字串函式
&lt;/h3>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">size_t&lt;/span> &lt;span class="nf">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// 計算字串長度
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">// 輸出錯誤訊息
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="nf">strerror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">errnum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">void&lt;/span> &lt;span class="nf">perror&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">str&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>strerror&lt;/code> 搭配 &lt;code>errno&lt;/code> 使用 (&lt;code>#include &amp;lt;errno.h&amp;gt;&lt;/code>)&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-08：Pointer</title><link>https://blog.smallten.me/p/computer_programming_1-08/</link><pubDate>Wed, 23 Dec 2020 19:38:14 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-08/</guid><description>&lt;h1 id="pointer">&lt;a href="#pointer" class="header-anchor">&lt;/a>Pointer
&lt;/h1>&lt;ul>
&lt;li>許多人不喜歡C是因為有「指標」&lt;/li>
&lt;li>這可能是C中最困難的一個部分&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>指標是一個變數，其值為記憶體位置
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-01.png"
width="624"
height="482"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-01_hu10239324899219864129.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-01_hu2725014591566561077.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/li>
&lt;li>宣告：&lt;code>int32_t *p&lt;/code>
&lt;ul>
&lt;li>p 是一個指標&lt;/li>
&lt;li>指向的記憶體區塊被視為整數&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>初始化：&lt;code>int32_t *p = NULL&lt;/code>&lt;/li>
&lt;li>address operator &lt;code>&amp;amp;&lt;/code>：返回其變數的記憶體位置
&lt;ul>
&lt;li>如果想要印出記憶體位置，你可以使用&lt;code>%p&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>indirection operator &lt;code>*&lt;/code>：也被稱為dereferencing operator，返回指向對象的值
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-02.png"
width="560"
height="482"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-02_hu9893268616403783829.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-02_hu12946903521331953612.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;/li>
&lt;li>void *：是一個通用的指標型別(generic pointer type)，可以不透過explicit cast轉換成任意指標的型別&lt;/li>
&lt;/ul>
&lt;h3 id="傳參數至函式">&lt;a href="#%e5%82%b3%e5%8f%83%e6%95%b8%e8%87%b3%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>傳參數至函式
&lt;/h3>&lt;ul>
&lt;li>在C語言中，argument passing 稱為 call-by-value
&lt;ul>
&lt;li>電腦將會分配另一個記憶體區塊&lt;/li>
&lt;li>複製輸入的參數到記憶體區塊&lt;/li>
&lt;li>函式將會在新的記憶體區塊執行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>這就是為什麼修改函式中的變數，並不會修改到原本外部的變數了。&lt;/li>
&lt;li>在C++有另一種傳送方式稱為 call-by-reference，這邊我們不多加介紹。&lt;/li>
&lt;li>普遍來說，傳址會比傳值更快。&lt;/li>
&lt;/ul>
&lt;h3 id="陣列與指標">&lt;a href="#%e9%99%a3%e5%88%97%e8%88%87%e6%8c%87%e6%a8%99" class="header-anchor">&lt;/a>陣列與指標
&lt;/h3>&lt;ul>
&lt;li>在大部分的情況下，我們可以把array視為第一個元素的指標
&lt;ul>
&lt;li>現在你應該明白為什麼陣列的值會在函式中被修改&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>為了避免模棱兩可(搞混)，我較喜歡&lt;code>&amp;amp;(array[0])&lt;/code>而不是&lt;code>array&lt;/code>、&lt;code>&amp;amp;array&lt;/code>&lt;/li>
&lt;li>然而你不能寫出 &lt;code>array = &amp;amp;a&lt;/code>&lt;/li>
&lt;li>int32_t
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-03.png"
width="1376"
height="525"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-03_hu11414209631372358286.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-03_hu8730481397378728669.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/li>
&lt;li>int16_t
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-04.png"
width="1376"
height="525"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-04_hu7466818830848826975.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-04_hu12017319852796587965.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/li>
&lt;li>int8_t
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-05.png"
width="1376"
height="525"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-05_hu8369396309401679804.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-05_hu4168175412342961283.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/li>
&lt;li>&lt;code>ptr++&lt;/code>
&lt;ul>
&lt;li>移動的大小是根據指標的型別&lt;/li>
&lt;li>這在要讀取每一byte的詳細資料時非常好用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>事實上，&lt;code>array[n] = *(ptr + n)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="endian-issue">&lt;a href="#endian-issue" class="header-anchor">&lt;/a>Endian Issue
&lt;/h3>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-06.png"
width="868"
height="368"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-06_hu6343136376056633573.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-06_hu10875924417879093718.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="566px"
>&lt;/p>
&lt;h3 id="函式指標">&lt;a href="#%e5%87%bd%e5%bc%8f%e6%8c%87%e6%a8%99" class="header-anchor">&lt;/a>函式指標
&lt;/h3>&lt;ul>
&lt;li>指標不過是一個記憶體位址。&lt;/li>
&lt;li>當我們宣告某種類型的指標時，這意味著電腦將將訪問記憶體並根據給定的類型解釋存儲在該位址的值。&lt;/li>
&lt;li>您是否知道函式也存儲在記憶體中？&lt;/li>
&lt;li>使用函式指標時，返回的型別和參數應該要和實際的定義相同。
&lt;ul>
&lt;li>Really??為什麼在編譯時不會產生errors?&lt;/li>
&lt;li>這是個檢查definition的好習慣。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>回呼函式 (Callback function)&lt;/li>
&lt;li>你可以用陣列來儲存函式指標
&lt;code>void (*f[3])(int32_t) = {f1, f2, f3};&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>使用了函式指標的例子
&lt;ul>
&lt;li>Menu Driven&lt;/li>
&lt;li>Driver
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">file_operations&lt;/span> &lt;span class="n">scull_fops&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">THIS_MODULE&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">llseek&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_llseek&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_read&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_write&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">ioctl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_ioctl&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">open&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_open&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">release&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_release&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>Firewall&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hook_func&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">nf_hook_ops&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ops&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">sk_buff&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">skb&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">net_device&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">net_device&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">okfn&lt;/span>&lt;span class="p">)(&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">sk_buff&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="記憶體管理">&lt;a href="#%e8%a8%98%e6%86%b6%e9%ab%94%e7%ae%a1%e7%90%86" class="header-anchor">&lt;/a>記憶體管理
&lt;/h3>&lt;ul>
&lt;li>記憶體管理
&lt;ul>
&lt;li>分配記憶體當你宣告一個變數&lt;/li>
&lt;li>垃圾回收 ( GC )&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>為什麼許多現代的程式語言不支援記憶體管理
&lt;ul>
&lt;li>軟體工程師是人類&lt;/li>
&lt;li>人是不可被信任的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>然而，如果軟體工程師知道他們在做什麼，那麼他們可以更有效率的管理記憶體&lt;/li>
&lt;li>如果不考慮記憶體，請使用陣列&lt;/li>
&lt;li>如果你想陣列的大小可以被動態的改變，那麼去讀 C++ 並學習如何使用 container&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="malloc">&lt;a href="#malloc" class="header-anchor">&lt;/a>malloc
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>malloc()&lt;/code> 分配 size bytes 並回傳一個指向所分配的記憶體的指標&lt;/li>
&lt;li>記憶體沒有初始化&lt;/li>
&lt;li>若要初始化，請使用 &lt;code>memset&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="calloc">&lt;a href="#calloc" class="header-anchor">&lt;/a>calloc
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在現代的 C 中，你應該使用 &lt;code>calloc&lt;/code>&lt;/li>
&lt;li>第一個參數：多少個區塊你想去分配?&lt;/li>
&lt;li>第二個參數：每個區塊的大小。&lt;/li>
&lt;li>記憶體被初始化成 &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="free">&lt;a href="#free" class="header-anchor">&lt;/a>free
&lt;/h4>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-07.png"
width="600"
height="313"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-07_hu5108118448464950708.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-07_hu8234317116073716682.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;code>free(ptr)&lt;/code>：釋放 &lt;code>ptr&lt;/code> 指向的記憶體空間，該記憶體空間必須是由之前使用 &lt;code>malloc()、calloc()、realloc()&lt;/code> 所回傳的。&lt;/li>
&lt;li>此外，若已經 &lt;code>free(ptr)&lt;/code>，再次使用會發生未定義行為。&lt;/li>
&lt;/ul>
&lt;h3 id="double-pointer">&lt;a href="#double-pointer" class="header-anchor">&lt;/a>Double Pointer
&lt;/h3>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-08.png"
width="751"
height="683"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-08_hu6297739127714055848.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-08_hu6087289841606029318.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;ul>
&lt;li>使用場景：
&lt;ul>
&lt;li>在函式中分配記憶體&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">pp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">pp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">pp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>分配一個二維陣列&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">size_row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_column&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please enter two integers for row and column: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;%lu %lu&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">size_row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">size_column&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="n">size_row&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size_row&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="n">size_column&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size_column&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size_row&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size_column&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;%4d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="小工具">&lt;a href="#%e5%b0%8f%e5%b7%a5%e5%85%b7" class="header-anchor">&lt;/a>小工具
&lt;/h3>&lt;h4 id="cdecl">&lt;a href="#cdecl" class="header-anchor">&lt;/a>cdecl
&lt;/h4>&lt;ul>
&lt;li>安裝：&lt;code>sudo apt install cdecl&lt;/code>&lt;/li>
&lt;li>使用：&lt;code>cdecl&lt;/code> -&amp;gt; &lt;code>explain int ***a;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="資源查看">&lt;a href="#%e8%b3%87%e6%ba%90%e6%9f%a5%e7%9c%8b" class="header-anchor">&lt;/a>資源查看
&lt;/h4>&lt;ul>
&lt;li>top / htop&lt;/li>
&lt;li>vmstat ( 較輕量化 )
&lt;ul>
&lt;li>&lt;code>vmstat -n 1&lt;/code> ( &lt;code>-n 1&lt;/code> 為一秒輸出一次 )&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-07：Array</title><link>https://blog.smallten.me/p/computer_programming_1-07/</link><pubDate>Mon, 07 Dec 2020 19:38:14 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-07/</guid><description>&lt;h1 id="array">&lt;a href="#array" class="header-anchor">&lt;/a>Array
&lt;/h1>&lt;ul>
&lt;li>陣列是一種可以儲存大量相同型別資料的方法。&lt;/li>
&lt;li>連續的記憶體位置。&lt;/li>
&lt;li>永遠從0開始
&lt;ul>
&lt;li>&lt;code>int32_t a[10]&lt;/code> -&amp;gt; &lt;code>a[0] ~ a[9]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>計數變數 i 的型別可以宣告為 &lt;code>size_t&lt;/code>，它是一個無號的整數型別。&lt;/li>
&lt;li>初始化
&lt;ul>
&lt;li>&lt;code>int32_t a[5] = {0, 0, 0, 0, 0};&lt;/code>&lt;/li>
&lt;li>&lt;code>int32_t a[5] = {0};&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>存取陣列元素使用 &lt;code>variable[index]&lt;/code>&lt;/li>
&lt;li>專業說明：電腦將找到第一個元素的地址，然後根據索引移動記憶體位置以訪問數據。&lt;/li>
&lt;li>事實上一維陣列可以處理所有情況，至於多維陣列只是給人類方便閱讀的。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="define">&lt;a href="#define" class="header-anchor">&lt;/a>define
&lt;/h1>&lt;ul>
&lt;li>是遇處理指令，不是C的詞(statement)&lt;/li>
&lt;li>我們可以使用 &lt;code>#define&lt;/code> 去做巨集(MACRO)
&lt;ul>
&lt;li>當開發時MACRO有些像function，然而對電腦而言他們是不同的。&lt;/li>
&lt;li>當遇到MACRO，編譯器將簡單的依定義替換掉程式碼。&lt;/li>
&lt;li>函式擁有自己的標記。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="基本排序">&lt;a href="#%e5%9f%ba%e6%9c%ac%e6%8e%92%e5%ba%8f" class="header-anchor">&lt;/a>基本排序
&lt;/h1>&lt;h4 id="氣泡排序法">&lt;a href="#%e6%b0%a3%e6%b3%a1%e6%8e%92%e5%ba%8f%e6%b3%95" class="header-anchor">&lt;/a>氣泡排序法
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="qsort">&lt;a href="#qsort" class="header-anchor">&lt;/a>qsort
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.c&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">qsort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">cmp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="傳陣列至函式">&lt;a href="#%e5%82%b3%e9%99%a3%e5%88%97%e8%87%b3%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>傳陣列至函式
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">[][&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>除了第一個[]外，剩下的都必須要給大小。(電腦才能計算偏移量)&lt;/li>
&lt;li>為甚麼要給size? 因為傳過去的只是陣列的記憶體起始位置而已。&lt;/li>
&lt;li>在函式中依然會改到本身的值。&lt;/li>
&lt;/ul>
&lt;h1 id="const">&lt;a href="#const" class="header-anchor">&lt;/a>const
&lt;/h1>&lt;ul>
&lt;li>constant&lt;/li>
&lt;li>read-only&lt;/li>
&lt;/ul>
&lt;h1 id="可變長度陣列">&lt;a href="#%e5%8f%af%e8%ae%8a%e9%95%b7%e5%ba%a6%e9%99%a3%e5%88%97" class="header-anchor">&lt;/a>可變長度陣列
&lt;/h1>&lt;ul>
&lt;li>Variable Length Array&lt;/li>
&lt;li>雖然有些編譯器支援了以下寫法(C99之後)，但有些依然不支援&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>但你應該使用 &lt;code>malloc&lt;/code>
&lt;ul>
&lt;li>準確來說，你應該使用 &lt;code>calloc&lt;/code>，而不是 `malloc。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>我的建議：當考試的時候不要使用這功能( &lt;code>a[n]&lt;/code> )，因為你不知道編譯器的版本。&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-06：Makefile</title><link>https://blog.smallten.me/p/computer_programming_1-06/</link><pubDate>Wed, 02 Dec 2020 21:45:51 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-06/</guid><description>&lt;h1 id="makefile-for-程設一">&lt;a href="#makefile-for-%e7%a8%8b%e8%a8%ad%e4%b8%80" class="header-anchor">&lt;/a>Makefile for 程設一
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CC&lt;/span> &lt;span class="o">=&lt;/span> gcc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CFLAGS&lt;/span> &lt;span class="o">=&lt;/span> -Wall -Wextra -O2 -std&lt;span class="o">=&lt;/span>c11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LDFLAGS&lt;/span> &lt;span class="o">=&lt;/span> -lm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TARGETS&lt;/span> &lt;span class="o">=&lt;/span> main01 main02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">main01_OBJ&lt;/span> &lt;span class="o">=&lt;/span> main01.o func01.o
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">main02_OBJ&lt;/span> &lt;span class="o">=&lt;/span> main02.o func02.o
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">.PHONY&lt;/span> &lt;span class="o">=&lt;/span> all clean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nv">TARGETS&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.SECONDEXPANSION&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">$(TARGETS)&lt;/span>&lt;span class="o">:&lt;/span> $&lt;span class="k">$($$&lt;/span>@&lt;span class="nv">_OBJ&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">$(&lt;/span>CC&lt;span class="k">)&lt;/span> $^ -o &lt;span class="nv">$@&lt;/span> &lt;span class="k">$(&lt;/span>LDFLAGS&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">%.o&lt;/span>&lt;span class="o">:&lt;/span> $@.&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -&lt;span class="k">$(&lt;/span>RM&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>TARGETS&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>foreach targ,&lt;span class="k">$(&lt;/span>TARGETS&lt;span class="k">)&lt;/span>,&lt;span class="k">$(&lt;/span>foreach obj, &lt;span class="k">$($(&lt;/span>targ&lt;span class="k">)&lt;/span>_OBJ&lt;span class="k">)&lt;/span>, &lt;span class="k">$(&lt;/span>obj&lt;span class="k">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>程式設計(一)-05：Function</title><link>https://blog.smallten.me/p/computer_programming_1-05/</link><pubDate>Sat, 21 Nov 2020 21:48:47 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-05/</guid><description>&lt;h1 id="function">&lt;a href="#function" class="header-anchor">&lt;/a>Function
&lt;/h1>&lt;h2 id="函式">&lt;a href="#%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>函式
&lt;/h2>&lt;h4 id="double">&lt;a href="#double" class="header-anchor">&lt;/a>double
&lt;/h4>&lt;ul>
&lt;li>&lt;code>double&lt;/code> 是一種浮點數型別，就像是 &lt;code>float&lt;/code>&lt;/li>
&lt;li>就如同它的名字，它使用的記憶體大小為 &lt;code>float&lt;/code> 的兩倍&lt;/li>
&lt;li>建議: 當你需要浮點數的話，一律使用 &lt;code>double&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>到目前為止我們最常使用到的函式為 &lt;code>printf&lt;/code>&lt;/li>
&lt;li>我們稱這些函式為 C standard functions (C標準函式)&lt;/li>
&lt;li>所有的函式都被儲存在libraries中
&lt;ul>
&lt;li>如果你想要讀書，你需要知道書在哪，然後去圖書館借書&lt;/li>
&lt;li>如果你想要使用函式，你需要知道函式在哪，然後include library去使用函式&lt;/li>
&lt;li>例如: &lt;code>stdio.h &amp;lt;-&amp;gt; printf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 &lt;code>math.h&lt;/code> 時，需下編譯參數 &lt;code>-lm&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>永不重新發明輪子&lt;/li>
&lt;li>在開發前請先搜尋&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//原型宣告
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Return&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">Function&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nf">Name&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">parameter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Return&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">Function&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nf">Name&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">parameter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Statements&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>使用原型宣告並將自訂函式置於main function之後的好處?
&lt;ul>
&lt;li>不用管function之間的先後順序。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="void">&lt;a href="#void" class="header-anchor">&lt;/a>void
&lt;/h4>&lt;ul>
&lt;li>沒有型別&lt;/li>
&lt;li>在這裡，代表不需要回傳值&lt;/li>
&lt;/ul>
&lt;h2 id="標頭檔-header-files">&lt;a href="#%e6%a8%99%e9%a0%ad%e6%aa%94-header-files" class="header-anchor">&lt;/a>標頭檔 (Header Files)
&lt;/h2>&lt;ul>
&lt;li>甚麼是header file?
&lt;ul>
&lt;li>是一個包含函式的原型宣告(prototypes)和其他定義(definitions)的檔案&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>為甚麼我們需要header file?
&lt;ul>
&lt;li>抽象層&lt;/li>
&lt;li>有時我們想保護我們的實作(implementation)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifndef
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如同我所說，軟體工程師是懶惰的&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="如何編譯多個檔案">&lt;a href="#%e5%a6%82%e4%bd%95%e7%b7%a8%e8%ad%af%e5%a4%9a%e5%80%8b%e6%aa%94%e6%a1%88" class="header-anchor">&lt;/a>如何編譯多個檔案
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#static
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">gcc&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="n">library&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">library&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">o&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gcc&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="n">library&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#dynamic
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">gcc&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">shared&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">libtest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gcc&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">ltest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#執行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">main&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="link">&lt;a href="#link" class="header-anchor">&lt;/a>Link
&lt;/h4>&lt;ul>
&lt;li>Static link: Static linking is the process of copying &lt;strong>all library modules&lt;/strong> used in the program into the &lt;strong>final executable&lt;/strong> image.&lt;/li>
&lt;li>Dynamic link: In dynamic linking the names of the external libraries (shared libraries) are placed in the final executable file while &lt;strong>the actual linking takes place at run time&lt;/strong> when both executable file and libraries are placed in the memory.&lt;/li>
&lt;li>&lt;code>.a&lt;/code> 是一堆 &lt;code>.o&lt;/code> 包在一起&lt;/li>
&lt;/ul>
&lt;h2 id="random">&lt;a href="#random" class="header-anchor">&lt;/a>Random
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">srand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rand&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="c1">//n: 0 ~ 5
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>有安全要求時，請勿使用 &lt;code>random()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="global-static-extern-variable">&lt;a href="#global-static-extern-variable" class="header-anchor">&lt;/a>Global, Static, Extern Variable
&lt;/h2>&lt;h4 id="global">&lt;a href="#global" class="header-anchor">&lt;/a>global
&lt;/h4>&lt;ul>
&lt;li>變數的生命週期為整個程式。&lt;/li>
&lt;li>也可被extern所存取到。&lt;/li>
&lt;/ul>
&lt;h4 id="static">&lt;a href="#static" class="header-anchor">&lt;/a>static
&lt;/h4>&lt;ul>
&lt;li>變數只會在程式開始之前分配和初始化一次。&lt;/li>
&lt;li>在程式終止之前，儲存空間都不會被釋放。&lt;/li>
&lt;li>加上 &lt;code>static&lt;/code> 後， &lt;code>extern&lt;/code>便無法存取了。&lt;/li>
&lt;/ul>
&lt;h4 id="extern">&lt;a href="#extern" class="header-anchor">&lt;/a>extern
&lt;/h4>&lt;ul>
&lt;li>使用外部的變數。&lt;/li>
&lt;/ul>
&lt;h2 id="遞迴-recursive">&lt;a href="#%e9%81%9e%e8%bf%b4-recursive" class="header-anchor">&lt;/a>遞迴 Recursive
&lt;/h2>&lt;ul>
&lt;li>遞迴定義如下
&lt;ul>
&lt;li>遞迴:
參見「遞迴」。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>什麼?這個定義什麼也沒有說啊!好吧，改一下:
&lt;ul>
&lt;li>遞迴:
如果你還是沒明白遞迴是什麼意思的話，參見「遞迴」。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Return&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">Function&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nf">Name&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">parameter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">list&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Return&lt;/span> &lt;span class="n">pre&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">defined&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Call&lt;/span> &lt;span class="n">itself&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">parameter&lt;/span> &lt;span class="n">modification&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>所有能使用遞迴表達的敘述，皆能以迴圈的方式編寫。&lt;/li>
&lt;li>To iterate is human, to recurse, divine. — L. Peter Deutsch&lt;/li>
&lt;li>遞迴只應天上有，人間該當用迴圈&lt;/li>
&lt;li>我的觀點:
&lt;ul>
&lt;li>如果你找到關係式，遞迴是簡單的。&lt;/li>
&lt;li>時常用在虛擬碼(pseudo-code)中。&lt;/li>
&lt;li>性能效率可能比迭代差。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-04：Loop</title><link>https://blog.smallten.me/p/computer_programming_1-04/</link><pubDate>Sun, 18 Oct 2020 20:33:18 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-04/</guid><description>&lt;h1 id="loop">&lt;a href="#loop" class="header-anchor">&lt;/a>Loop
&lt;/h1>&lt;pre>&lt;code>- `while`
- `for`
- `do while`
&lt;/code>&lt;/pre>
&lt;h2 id="while-loop">&lt;a href="#while-loop" class="header-anchor">&lt;/a>While Loop
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">條件&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">執行區塊&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>%.200f&lt;/code> 會發生什麼事? -&amp;gt; 精度不夠沒有意義&lt;/li>
&lt;li>&lt;code>while(1)&lt;/code> -&amp;gt; 無窮迴圈&lt;/li>
&lt;/ul>
&lt;h2 id="for-loop">&lt;a href="#for-loop" class="header-anchor">&lt;/a>For Loop
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">初始化&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="err">條件&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="err">執行後操作&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">執行區塊&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>i++&lt;/code> -&amp;gt; Use the current value of i. -&amp;gt; &lt;code>i = i + 1&lt;/code>&lt;/li>
&lt;li>&lt;code>++i&lt;/code> -&amp;gt; &lt;code>i = i + 1&lt;/code> -&amp;gt; Use the new value of i.&lt;/li>
&lt;li>&lt;code>{}&lt;/code> -&amp;gt; 變數生命週期範圍&lt;/li>
&lt;li>&lt;code>%4d&lt;/code> ( &lt;code>%#&lt;/code> ) -&amp;gt; 給最小的位數去顯示&lt;/li>
&lt;li>在 ANSI C, 變數只能被宣告在函式的開頭，而 Modern C 沒有任何限制&lt;/li>
&lt;/ul>
&lt;h2 id="do-while-loop">&lt;a href="#do-while-loop" class="header-anchor">&lt;/a>Do While Loop
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">執行區塊&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">條件&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>三種不同類型的迴圈毫無疑問的都可以互相轉換
&lt;ul>
&lt;li>除了 &lt;code>do while&lt;/code> 至少會執行一次&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>大多數來說，如果你知道要執行幾次迴圈的話，會使用 &lt;code>for&lt;/code>&lt;/li>
&lt;li>&lt;code>break&lt;/code>：離開當前的區段&lt;/li>
&lt;li>&lt;code>continue&lt;/code>：跳過剩餘的敘述，直接執行下一次迭代&lt;/li>
&lt;li>無窮迴圈不是個好東西? -&amp;gt; 不，或許你會需要他，例如：Web server&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>程式設計(一)-03：Condition Control</title><link>https://blog.smallten.me/p/computer_programming_1-03/</link><pubDate>Thu, 15 Oct 2020 20:53:14 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-03/</guid><description>&lt;h1 id="condition-control">&lt;a href="#condition-control" class="header-anchor">&lt;/a>Condition Control
&lt;/h1>&lt;h2 id="簡介">&lt;a href="#%e7%b0%a1%e4%bb%8b" class="header-anchor">&lt;/a>簡介
&lt;/h2>&lt;ul>
&lt;li>我們想要讓電腦去做基礎的判斷
&lt;ul>
&lt;li>&lt;code>if&lt;/code>&lt;/li>
&lt;li>&lt;code>switch&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="if">&lt;a href="#if" class="header-anchor">&lt;/a>If
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">statements&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果條件&lt;strong>不是錯誤&lt;/strong>，那麼將會執行大括號裡的敘述
&lt;ul>
&lt;li>簡而言之，&lt;code>false&lt;/code> 被定義為 &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code> -&amp;gt; 大於&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code> -&amp;gt; 小於&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code> -&amp;gt; 大於等於&lt;/li>
&lt;li>&lt;code>&amp;lt;=&lt;/code> -&amp;gt; 小於等於&lt;/li>
&lt;li>&lt;code>==&lt;/code> -&amp;gt; 等於&lt;/li>
&lt;li>&lt;code>!=&lt;/code> -&amp;gt; 不等於&lt;/li>
&lt;li>&lt;code>&amp;amp;&amp;amp;&lt;/code> -&amp;gt; and&lt;/li>
&lt;li>&lt;code>||&lt;/code> -&amp;gt; or&lt;/li>
&lt;/ul>
&lt;h2 id="boolean">&lt;a href="#boolean" class="header-anchor">&lt;/a>Boolean
&lt;/h2>&lt;ul>
&lt;li>在 &lt;code>Cpp&lt;/code> 裡，有個型別稱為 &lt;code>bool&lt;/code>
&lt;ul>
&lt;li>它只有兩個值：&lt;code>true, false&lt;/code>&lt;/li>
&lt;li>那麼 &lt;code>bool&lt;/code> 使用的記憶體大小為何能?( &lt;code>1 bit or 1 byte&lt;/code> ??)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在 &lt;code>ANSI C&lt;/code> 裡，沒有一個型別為boolean的&lt;/li>
&lt;li>從 &lt;code>C99&lt;/code> 開始，有一個標頭檔可以使用，&lt;code>stdbool.h&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="switch">&lt;a href="#switch" class="header-anchor">&lt;/a>Switch
&lt;/h2>&lt;ul>
&lt;li>你可以使用 &lt;code>if-else&lt;/code> 來做每個條件判斷，但是有時候可能會寫一個巨大的巢狀程式，因此將介紹另一個方法 &lt;code>switch&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">switch&lt;/span> &lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>break&lt;/code>：從此處結束
&lt;ul>
&lt;li>那麼如果不使用 &lt;code>break&lt;/code> 呢??&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>default&lt;/code>：如果沒有 &lt;code>case&lt;/code> 符合，執行這段&lt;/li>
&lt;/ul>
&lt;h2 id="浮點數比較">&lt;a href="#%e6%b5%ae%e9%bb%9e%e6%95%b8%e6%af%94%e8%bc%83" class="header-anchor">&lt;/a>浮點數比較
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;if01&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;else01&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mf">0.3f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;if02&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;else02&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>結果： &lt;code>else01 if02&lt;/code>&lt;/li>
&lt;li>請使用 &lt;code>sizeof()&lt;/code> 查看發生了什麼!(&lt;code>IEEE 754&lt;/code>)&lt;/li>
&lt;li>結論：&lt;strong>浮點數的比較是相當危險的!!&lt;/strong>&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-02：Arithmetic</title><link>https://blog.smallten.me/p/computer_programming_1-02/</link><pubDate>Thu, 15 Oct 2020 11:19:09 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-02/</guid><description>&lt;h1 id="arithmetic">&lt;a href="#arithmetic" class="header-anchor">&lt;/a>Arithmetic
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>變數
&lt;ul>
&lt;li>每個變數都必須有它的型別&lt;/li>
&lt;li>在使用變數前必須先宣告它&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在C裡面， &lt;code>=&lt;/code> 意思為”指定”，而不是”相等”，指派右邊的數值給左邊的變數&lt;/li>
&lt;li>一個好習慣，總是初始化變數&lt;/li>
&lt;li>C Spec:
&lt;ul>
&lt;li>C89:If an object that has static storage duration is not initialized explicitly, it is initialized implicitly.&lt;/li>
&lt;li>C99: If it has arithmetic type, it is initialized to (positive or unsigned) zero.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>In C99: &lt;code>a == (a / b) * b + a % b&lt;/code>&lt;/li>
&lt;li>&lt;code>printf&lt;/code> 是一個函式去印出格式化字串
&lt;ul>
&lt;li>&lt;code>%d&lt;/code> -&amp;gt; 有號十進位整數&lt;/li>
&lt;li>&lt;code>%f&lt;/code> -&amp;gt; 十進位浮點數&lt;/li>
&lt;li>&lt;code>%u&lt;/code> -&amp;gt; 無號十進位整數&lt;/li>
&lt;li>當然不只這些&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>小技巧&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">%=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;ul>
&lt;li>查看記憶體使用大小： &lt;code>sizeof()&lt;/code>，回傳單位為 &lt;code>byte&lt;/code> ( &lt;code>printf(&amp;quot;%lu&amp;quot;, sizeof());&lt;/code> )&lt;/li>
&lt;li>&lt;code>#include &amp;lt;stdint.h&amp;gt;&lt;/code>
&lt;ul>
&lt;li>int8_t: 8-bit signed interger&lt;/li>
&lt;li>int16_t: 16-bit signed interger&lt;/li>
&lt;li>int32_t: 32-bit signed interger&lt;/li>
&lt;li>int64_t: 64-bit signed interger&lt;/li>
&lt;li>uint8_t: 8-bit unsigned interger&lt;/li>
&lt;li>uint16_t: 16-bit unsigned interger&lt;/li>
&lt;li>uint32_t: 32-bit unsigned interger&lt;/li>
&lt;li>uint64_t: 64-bit unsigned interger&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>輸入：&lt;code>scanf(&amp;quot;%d&amp;quot;, &amp;amp;a);&lt;/code>
&lt;ul>
&lt;li>至於為甚麼需要 &lt;code>&amp;amp;&lt;/code>，之後會在指標的章節介紹到&lt;/li>
&lt;li>&lt;code>scanf&lt;/code> 是否有回傳值? ( &lt;code>man 3 scanf&lt;/code> )&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>最後也最重要的技能：RTFM and STFG&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-01：Your first program</title><link>https://blog.smallten.me/p/computer_programming_1-01/</link><pubDate>Sun, 04 Oct 2020 11:00:48 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-01/</guid><description>&lt;h1 id="hello-world">&lt;a href="#hello-world" class="header-anchor">&lt;/a>Hello World
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">//Your first code.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>main是每個C程式的進入點，我們稱它為main function(主函式)&lt;/li>
&lt;li>&lt;code>int&lt;/code> 及 &lt;code>return&lt;/code> 是C裡面的Keywords
&lt;ul>
&lt;li>int代表這個函式將會回傳一個整數&lt;/li>
&lt;li>每個函式都應該有一個回傳值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每個敘述的結尾都應該要有 &lt;code>;&lt;/code>&lt;/li>
&lt;li>&lt;code>printf&lt;/code> 是一個會顯示格式化字串的函式&lt;/li>
&lt;li>&lt;code>\n&lt;/code> -&amp;gt; 換行&lt;/li>
&lt;li>&lt;code>\t&lt;/code> -&amp;gt; tab&lt;/li>
&lt;li>&lt;code>\\&lt;/code> -&amp;gt; \&lt;/li>
&lt;li>&lt;code>\&amp;quot;&lt;/code> -&amp;gt; “&lt;/li>
&lt;li>&lt;code>#&lt;/code> 的那一行是C的預處理器並且不需要;結尾&lt;/li>
&lt;li>&lt;code>stdio.h&lt;/code> -&amp;gt; standard input / output header(標準輸出/輸入標頭檔)&lt;/li>
&lt;li>註解 -&amp;gt; 是給開發者看的
&lt;ul>
&lt;li>&lt;code>//Your code&lt;/code> -&amp;gt; 單行&lt;/li>
&lt;li>&lt;code>/*Your code*/&lt;/code> -&amp;gt; 多行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>使用編譯器將程式碼編譯成組合語言，再由組譯器組議成機械碼或可執行的二進制檔&lt;/li>
&lt;li>IDE -&amp;gt; Integrated Development Environment，不是編譯器&lt;/li>
&lt;li>gcc是最受歡迎的C編譯器之一(不完全對!!因為它不只做了編譯的動作…)&lt;/li>
&lt;li>一些基本的Linux的操作指令
&lt;ul>
&lt;li>&lt;code>man&lt;/code> -&amp;gt; 不會就問那個男人吧，男人不會就Google&lt;/li>
&lt;li>&lt;code>ls&lt;/code>&lt;/li>
&lt;li>&lt;code>cd&lt;/code>&lt;/li>
&lt;li>&lt;code>rm&lt;/code>&lt;/li>
&lt;li>&lt;code>pwd&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>gcc main.c&lt;/code> 一些參數
&lt;ul>
&lt;li>&lt;code>-o&lt;/code>&lt;/li>
&lt;li>&lt;code>-v&lt;/code>&lt;/li>
&lt;li>&lt;code>-g&lt;/code>&lt;/li>
&lt;li>&lt;code>-Wall -Wextra&lt;/code>&lt;/li>
&lt;li>&lt;code>-O2&lt;/code> or &lt;code>-Og&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="makefile">&lt;a href="#makefile" class="header-anchor">&lt;/a>Makefile
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gcc main.c -o main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rm -rf main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>make&lt;/code> 將執行all下的指令&lt;/li>
&lt;li>中間縮排應為Tab而不是Space&lt;/li>
&lt;li>&lt;code>make clean&lt;/code>&lt;/li>
&lt;li>預設可執行的檔名為 &lt;code>makefile，Makefile，GNUmakefile&lt;/code>，若為其他可下 &lt;code>-f&lt;/code> 的參數&lt;/li>
&lt;/ul></description></item></channel></rss>