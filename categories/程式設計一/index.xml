<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>程式設計(一) on 小十的部落格</title><link>https://blog.smallten.me/categories/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E4%B8%80/</link><description>Recent content in 程式設計(一) on 小十的部落格</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 23 Dec 2020 19:38:14 +0800</lastBuildDate><atom:link href="https://blog.smallten.me/categories/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E4%B8%80/index.xml" rel="self" type="application/rss+xml"/><item><title>程式設計(一)-08：Pointer</title><link>https://blog.smallten.me/p/computer_programming_1-08/</link><pubDate>Wed, 23 Dec 2020 19:38:14 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-08/</guid><description>&lt;h1 id="pointer">&lt;a href="#pointer" class="header-anchor">&lt;/a>Pointer
&lt;/h1>&lt;ul>
&lt;li>許多人不喜歡C是因為有「指標」&lt;/li>
&lt;li>這可能是C中最困難的一個部分&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>指標是一個變數，其值為記憶體位置
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-01.png"
width="624"
height="482"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-01_hu10239324899219864129.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-01_hu2725014591566561077.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="129"
data-flex-basis="310px"
>&lt;/li>
&lt;li>宣告：&lt;code>int32_t *p&lt;/code>
&lt;ul>
&lt;li>p 是一個指標&lt;/li>
&lt;li>指向的記憶體區塊被視為整數&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>初始化：&lt;code>int32_t *p = NULL&lt;/code>&lt;/li>
&lt;li>address operator &lt;code>&amp;amp;&lt;/code>：返回其變數的記憶體位置
&lt;ul>
&lt;li>如果想要印出記憶體位置，你可以使用&lt;code>%p&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>indirection operator &lt;code>*&lt;/code>：也被稱為dereferencing operator，返回指向對象的值
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-02.png"
width="560"
height="482"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-02_hu9893268616403783829.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-02_hu12946903521331953612.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="116"
data-flex-basis="278px"
>&lt;/li>
&lt;li>void *：是一個通用的指標型別(generic pointer type)，可以不透過explicit cast轉換成任意指標的型別&lt;/li>
&lt;/ul>
&lt;h3 id="傳參數至函式">&lt;a href="#%e5%82%b3%e5%8f%83%e6%95%b8%e8%87%b3%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>傳參數至函式
&lt;/h3>&lt;ul>
&lt;li>在C語言中，argument passing 稱為 call-by-value
&lt;ul>
&lt;li>電腦將會分配另一個記憶體區塊&lt;/li>
&lt;li>複製輸入的參數到記憶體區塊&lt;/li>
&lt;li>函式將會在新的記憶體區塊執行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>這就是為什麼修改函式中的變數，並不會修改到原本外部的變數了。&lt;/li>
&lt;li>在C++有另一種傳送方式稱為 call-by-reference，這邊我們不多加介紹。&lt;/li>
&lt;li>普遍來說，傳址會比傳值更快。&lt;/li>
&lt;/ul>
&lt;h3 id="陣列與指標">&lt;a href="#%e9%99%a3%e5%88%97%e8%88%87%e6%8c%87%e6%a8%99" class="header-anchor">&lt;/a>陣列與指標
&lt;/h3>&lt;ul>
&lt;li>在大部分的情況下，我們可以把array視為第一個元素的指標
&lt;ul>
&lt;li>現在你應該明白為什麼陣列的值會在函式中被修改&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>為了避免模棱兩可(搞混)，我較喜歡&lt;code>&amp;amp;(array[0])&lt;/code>而不是&lt;code>array&lt;/code>、&lt;code>&amp;amp;array&lt;/code>&lt;/li>
&lt;li>然而你不能寫出 &lt;code>array = &amp;amp;a&lt;/code>&lt;/li>
&lt;li>int32_t
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-03.png"
width="1376"
height="525"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-03_hu11414209631372358286.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-03_hu8730481397378728669.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/li>
&lt;li>int16_t
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-04.png"
width="1376"
height="525"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-04_hu7466818830848826975.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-04_hu12017319852796587965.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/li>
&lt;li>int8_t
&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-05.png"
width="1376"
height="525"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-05_hu8369396309401679804.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-05_hu4168175412342961283.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="262"
data-flex-basis="629px"
>&lt;/li>
&lt;li>&lt;code>ptr++&lt;/code>
&lt;ul>
&lt;li>移動的大小是根據指標的型別&lt;/li>
&lt;li>這在要讀取每一byte的詳細資料時非常好用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>事實上，&lt;code>array[n] = *(ptr + n)&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3 id="endian-issue">&lt;a href="#endian-issue" class="header-anchor">&lt;/a>Endian Issue
&lt;/h3>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-06.png"
width="868"
height="368"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-06_hu6343136376056633573.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-06_hu10875924417879093718.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="235"
data-flex-basis="566px"
>&lt;/p>
&lt;h3 id="函式指標">&lt;a href="#%e5%87%bd%e5%bc%8f%e6%8c%87%e6%a8%99" class="header-anchor">&lt;/a>函式指標
&lt;/h3>&lt;ul>
&lt;li>指標不過是一個記憶體位址。&lt;/li>
&lt;li>當我們宣告某種類型的指標時，這意味著電腦將將訪問記憶體並根據給定的類型解釋存儲在該位址的值。&lt;/li>
&lt;li>您是否知道函式也存儲在記憶體中？&lt;/li>
&lt;li>使用函式指標時，返回的型別和參數應該要和實際的定義相同。
&lt;ul>
&lt;li>Really??為什麼在編譯時不會產生errors?&lt;/li>
&lt;li>這是個檢查definition的好習慣。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>回呼函式 (Callback function)&lt;/li>
&lt;li>你可以用陣列來儲存函式指標
&lt;code>void (*f[3])(int32_t) = {f1, f2, f3};&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>使用了函式指標的例子
&lt;ul>
&lt;li>Menu Driven&lt;/li>
&lt;li>Driver
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">struct&lt;/span> &lt;span class="n">file_operations&lt;/span> &lt;span class="n">scull_fops&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">owner&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">THIS_MODULE&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">llseek&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_llseek&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">read&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_read&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">write&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_write&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">ioctl&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_ioctl&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">open&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_open&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">.&lt;/span>&lt;span class="n">release&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">scull_release&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;li>Firewall&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">static&lt;/span> &lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">hook_func&lt;/span>&lt;span class="p">(&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">nf_hook_ops&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ops&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">struct&lt;/span> &lt;span class="n">sk_buff&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">skb&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">net_device&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">in&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">const&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">net_device&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">out&lt;/span> &lt;span class="p">,&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">okfn&lt;/span>&lt;span class="p">)(&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">sk_buff&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;h3 id="記憶體管理">&lt;a href="#%e8%a8%98%e6%86%b6%e9%ab%94%e7%ae%a1%e7%90%86" class="header-anchor">&lt;/a>記憶體管理
&lt;/h3>&lt;ul>
&lt;li>記憶體管理
&lt;ul>
&lt;li>分配記憶體當你宣告一個變數&lt;/li>
&lt;li>垃圾回收 ( GC )&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>為什麼許多現代的程式語言不支援記憶體管理
&lt;ul>
&lt;li>軟體工程師是人類&lt;/li>
&lt;li>人是不可被信任的&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>然而，如果軟體工程師知道他們在做什麼，那麼他們可以更有效率的管理記憶體&lt;/li>
&lt;li>如果不考慮記憶體，請使用陣列&lt;/li>
&lt;li>如果你想陣列的大小可以被動態的改變，那麼去讀 C++ 並學習如何使用 container&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="malloc">&lt;a href="#malloc" class="header-anchor">&lt;/a>malloc
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">malloc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>malloc()&lt;/code> 分配 size bytes 並回傳一個指向所分配的記憶體的指標&lt;/li>
&lt;li>記憶體沒有初始化&lt;/li>
&lt;li>若要初始化，請使用 &lt;code>memset&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">memset&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="calloc">&lt;a href="#calloc" class="header-anchor">&lt;/a>calloc
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">size&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>在現代的 C 中，你應該使用 &lt;code>calloc&lt;/code>&lt;/li>
&lt;li>第一個參數：多少個區塊你想去分配?&lt;/li>
&lt;li>第二個參數：每個區塊的大小。&lt;/li>
&lt;li>記憶體被初始化成 &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="free">&lt;a href="#free" class="header-anchor">&lt;/a>free
&lt;/h4>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-07.png"
width="600"
height="313"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-07_hu5108118448464950708.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-07_hu8234317116073716682.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="191"
data-flex-basis="460px"
>&lt;/p>
&lt;ul>
&lt;li>&lt;code>free(ptr)&lt;/code>：釋放 &lt;code>ptr&lt;/code> 指向的記憶體空間，該記憶體空間必須是由之前使用 &lt;code>malloc()、calloc()、realloc()&lt;/code> 所回傳的。&lt;/li>
&lt;li>此外，若已經 &lt;code>free(ptr)&lt;/code>，再次使用會發生未定義行為。&lt;/li>
&lt;/ul>
&lt;h3 id="double-pointer">&lt;a href="#double-pointer" class="header-anchor">&lt;/a>Double Pointer
&lt;/h3>&lt;p>&lt;img src="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-08.png"
width="751"
height="683"
srcset="https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-08_hu6297739127714055848.png 480w, https://blog.smallten.me/p/computer_programming_1-08/computer_programming_1-08-08_hu6087289841606029318.png 1024w"
loading="lazy"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;ul>
&lt;li>使用場景：
&lt;ul>
&lt;li>在函式中分配記憶體&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">pp&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="n">pp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">&amp;lt;=&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">pp&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="n">number&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">table&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">ptr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">number&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>分配一個二維陣列&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdint.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">size_row&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">size_column&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Please enter two integers for row and column: &amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">scanf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;%lu %lu&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">size_row&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">size_column&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int32_t&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">ptr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="n">size_row&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size_row&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int32_t&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="nf">calloc&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">int32_t&lt;/span> &lt;span class="p">),&lt;/span> &lt;span class="n">size_column&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size_column&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size_row&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="kt">size_t&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">size_column&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;%4d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="n">ptr&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span> &lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span> &lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h3 id="小工具">&lt;a href="#%e5%b0%8f%e5%b7%a5%e5%85%b7" class="header-anchor">&lt;/a>小工具
&lt;/h3>&lt;h4 id="cdecl">&lt;a href="#cdecl" class="header-anchor">&lt;/a>cdecl
&lt;/h4>&lt;ul>
&lt;li>安裝：&lt;code>sudo apt install cdecl&lt;/code>&lt;/li>
&lt;li>使用：&lt;code>cdecl&lt;/code> -&amp;gt; &lt;code>explain int ***a;&lt;/code>&lt;/li>
&lt;/ul>
&lt;h4 id="資源查看">&lt;a href="#%e8%b3%87%e6%ba%90%e6%9f%a5%e7%9c%8b" class="header-anchor">&lt;/a>資源查看
&lt;/h4>&lt;ul>
&lt;li>top / htop&lt;/li>
&lt;li>vmstat ( 較輕量化 )
&lt;ul>
&lt;li>&lt;code>vmstat -n 1&lt;/code> ( &lt;code>-n 1&lt;/code> 為一秒輸出一次 )&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-07：Array</title><link>https://blog.smallten.me/p/computer_programming_1-07/</link><pubDate>Mon, 07 Dec 2020 19:38:14 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-07/</guid><description>&lt;h1 id="array">&lt;a href="#array" class="header-anchor">&lt;/a>Array
&lt;/h1>&lt;ul>
&lt;li>陣列是一種可以儲存大量相同型別資料的方法。&lt;/li>
&lt;li>連續的記憶體位置。&lt;/li>
&lt;li>永遠從0開始
&lt;ul>
&lt;li>&lt;code>int32_t a[10]&lt;/code> -&amp;gt; &lt;code>a[0] ~ a[9]&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>計數變數 i 的型別可以宣告為 &lt;code>size_t&lt;/code>，它是一個無號的整數型別。&lt;/li>
&lt;li>初始化
&lt;ul>
&lt;li>&lt;code>int32_t a[5] = {0, 0, 0, 0, 0};&lt;/code>&lt;/li>
&lt;li>&lt;code>int32_t a[5] = {0};&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>存取陣列元素使用 &lt;code>variable[index]&lt;/code>&lt;/li>
&lt;li>專業說明：電腦將找到第一個元素的地址，然後根據索引移動記憶體位置以訪問數據。&lt;/li>
&lt;li>事實上一維陣列可以處理所有情況，至於多維陣列只是給人類方便閱讀的。&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="define">&lt;a href="#define" class="header-anchor">&lt;/a>define
&lt;/h1>&lt;ul>
&lt;li>是遇處理指令，不是C的詞(statement)&lt;/li>
&lt;li>我們可以使用 &lt;code>#define&lt;/code> 去做巨集(MACRO)
&lt;ul>
&lt;li>當開發時MACRO有些像function，然而對電腦而言他們是不同的。&lt;/li>
&lt;li>當遇到MACRO，編譯器將簡單的依定義替換掉程式碼。&lt;/li>
&lt;li>函式擁有自己的標記。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="基本排序">&lt;a href="#%e5%9f%ba%e6%9c%ac%e6%8e%92%e5%ba%8f" class="header-anchor">&lt;/a>基本排序
&lt;/h1>&lt;h4 id="氣泡排序法">&lt;a href="#%e6%b0%a3%e6%b3%a1%e6%8e%92%e5%ba%8f%e6%b3%95" class="header-anchor">&lt;/a>氣泡排序法
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">^&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="o">+&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">];&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="qsort">&lt;a href="#qsort" class="header-anchor">&lt;/a>qsort
&lt;/h4>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.c&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">cmp&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">const&lt;/span> &lt;span class="kt">void&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">qsort&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span>&lt;span class="p">),&lt;/span> &lt;span class="n">cmp&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="傳陣列至函式">&lt;a href="#%e5%82%b3%e9%99%a3%e5%88%97%e8%87%b3%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>傳陣列至函式
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="p">[][&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">f&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[][&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">size&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>除了第一個[]外，剩下的都必須要給大小。(電腦才能計算偏移量)&lt;/li>
&lt;li>為甚麼要給size? 因為傳過去的只是陣列的記憶體起始位置而已。&lt;/li>
&lt;li>在函式中依然會改到本身的值。&lt;/li>
&lt;/ul>
&lt;h1 id="const">&lt;a href="#const" class="header-anchor">&lt;/a>const
&lt;/h1>&lt;ul>
&lt;li>constant&lt;/li>
&lt;li>read-only&lt;/li>
&lt;/ul>
&lt;h1 id="可變長度陣列">&lt;a href="#%e5%8f%af%e8%ae%8a%e9%95%b7%e5%ba%a6%e9%99%a3%e5%88%97" class="header-anchor">&lt;/a>可變長度陣列
&lt;/h1>&lt;ul>
&lt;li>Variable Length Array&lt;/li>
&lt;li>雖然有些編譯器支援了以下寫法(C99之後)，但有些依然不支援&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">5&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">n&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">{&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">};&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>但你應該使用 &lt;code>malloc&lt;/code>
&lt;ul>
&lt;li>準確來說，你應該使用 &lt;code>calloc&lt;/code>，而不是 `malloc。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>我的建議：當考試的時候不要使用這功能( &lt;code>a[n]&lt;/code> )，因為你不知道編譯器的版本。&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-06：Makefile</title><link>https://blog.smallten.me/p/computer_programming_1-06/</link><pubDate>Wed, 02 Dec 2020 21:45:51 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-06/</guid><description>&lt;h1 id="makefile-for-程設一">&lt;a href="#makefile-for-%e7%a8%8b%e8%a8%ad%e4%b8%80" class="header-anchor">&lt;/a>Makefile for 程設一
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CC&lt;/span> &lt;span class="o">=&lt;/span> gcc
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">CFLAGS&lt;/span> &lt;span class="o">=&lt;/span> -Wall -Wextra -O2 -std&lt;span class="o">=&lt;/span>c11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LDFLAGS&lt;/span> &lt;span class="o">=&lt;/span> -lm
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">TARGETS&lt;/span> &lt;span class="o">=&lt;/span> main01 main02
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">main01_OBJ&lt;/span> &lt;span class="o">=&lt;/span> main01.o func01.o
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">main02_OBJ&lt;/span> &lt;span class="o">=&lt;/span> main02.o func02.o
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">.PHONY&lt;/span> &lt;span class="o">=&lt;/span> all clean
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nv">TARGETS&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">.SECONDEXPANSION&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">$(TARGETS)&lt;/span>&lt;span class="o">:&lt;/span> $&lt;span class="k">$($$&lt;/span>@&lt;span class="nv">_OBJ&lt;/span>&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">$(&lt;/span>CC&lt;span class="k">)&lt;/span> $^ -o &lt;span class="nv">$@&lt;/span> &lt;span class="k">$(&lt;/span>LDFLAGS&lt;span class="k">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">%.o&lt;/span>&lt;span class="o">:&lt;/span> $@.&lt;span class="n">c&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> -&lt;span class="k">$(&lt;/span>RM&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>TARGETS&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>foreach targ,&lt;span class="k">$(&lt;/span>TARGETS&lt;span class="k">)&lt;/span>,&lt;span class="k">$(&lt;/span>foreach obj, &lt;span class="k">$($(&lt;/span>targ&lt;span class="k">)&lt;/span>_OBJ&lt;span class="k">)&lt;/span>, &lt;span class="k">$(&lt;/span>obj&lt;span class="k">)))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>程式設計(一)-05：Function</title><link>https://blog.smallten.me/p/computer_programming_1-05/</link><pubDate>Sat, 21 Nov 2020 21:48:47 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-05/</guid><description>&lt;h1 id="function">&lt;a href="#function" class="header-anchor">&lt;/a>Function
&lt;/h1>&lt;h2 id="函式">&lt;a href="#%e5%87%bd%e5%bc%8f" class="header-anchor">&lt;/a>函式
&lt;/h2>&lt;h4 id="double">&lt;a href="#double" class="header-anchor">&lt;/a>double
&lt;/h4>&lt;ul>
&lt;li>&lt;code>double&lt;/code> 是一種浮點數型別，就像是 &lt;code>float&lt;/code>&lt;/li>
&lt;li>就如同它的名字，它使用的記憶體大小為 &lt;code>float&lt;/code> 的兩倍&lt;/li>
&lt;li>建議: 當你需要浮點數的話，一律使用 &lt;code>double&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>到目前為止我們最常使用到的函式為 &lt;code>printf&lt;/code>&lt;/li>
&lt;li>我們稱這些函式為 C standard functions (C標準函式)&lt;/li>
&lt;li>所有的函式都被儲存在libraries中
&lt;ul>
&lt;li>如果你想要讀書，你需要知道書在哪，然後去圖書館借書&lt;/li>
&lt;li>如果你想要使用函式，你需要知道函式在哪，然後include library去使用函式&lt;/li>
&lt;li>例如: &lt;code>stdio.h &amp;lt;-&amp;gt; printf&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用 &lt;code>math.h&lt;/code> 時，需下編譯參數 &lt;code>-lm&lt;/code>&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>永不重新發明輪子&lt;/li>
&lt;li>在開發前請先搜尋&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="c1">//原型宣告
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="n">Return&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">Function&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nf">Name&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">parameter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Type&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">Return&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">Function&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nf">Name&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">parameter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">list&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Statements&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>使用原型宣告並將自訂函式置於main function之後的好處?
&lt;ul>
&lt;li>不用管function之間的先後順序。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h4 id="void">&lt;a href="#void" class="header-anchor">&lt;/a>void
&lt;/h4>&lt;ul>
&lt;li>沒有型別&lt;/li>
&lt;li>在這裡，代表不需要回傳值&lt;/li>
&lt;/ul>
&lt;h2 id="標頭檔-header-files">&lt;a href="#%e6%a8%99%e9%a0%ad%e6%aa%94-header-files" class="header-anchor">&lt;/a>標頭檔 (Header Files)
&lt;/h2>&lt;ul>
&lt;li>甚麼是header file?
&lt;ul>
&lt;li>是一個包含函式的原型宣告(prototypes)和其他定義(definitions)的檔案&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>為甚麼我們需要header file?
&lt;ul>
&lt;li>抽象層&lt;/li>
&lt;li>有時我們想保護我們的實作(implementation)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#ifndef
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#define
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#endif
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如同我所說，軟體工程師是懶惰的&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#pragma once
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="如何編譯多個檔案">&lt;a href="#%e5%a6%82%e4%bd%95%e7%b7%a8%e8%ad%af%e5%a4%9a%e5%80%8b%e6%aa%94%e6%a1%88" class="header-anchor">&lt;/a>如何編譯多個檔案
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#static
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">gcc&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="n">library&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">library&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">o&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gcc&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="n">library&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">main&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#dynamic
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">gcc&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">shared&lt;/span> &lt;span class="n">test&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">libtest&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">so&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">gcc&lt;/span> &lt;span class="n">main&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">c&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">o&lt;/span> &lt;span class="n">main&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">L&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="n">ltest&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#執行
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="n">LD_LIBRARY_PATH&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="p">.&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">main&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h4 id="link">&lt;a href="#link" class="header-anchor">&lt;/a>Link
&lt;/h4>&lt;ul>
&lt;li>Static link: Static linking is the process of copying &lt;strong>all library modules&lt;/strong> used in the program into the &lt;strong>final executable&lt;/strong> image.&lt;/li>
&lt;li>Dynamic link: In dynamic linking the names of the external libraries (shared libraries) are placed in the final executable file while &lt;strong>the actual linking takes place at run time&lt;/strong> when both executable file and libraries are placed in the memory.&lt;/li>
&lt;li>&lt;code>.a&lt;/code> 是一堆 &lt;code>.o&lt;/code> 包在一起&lt;/li>
&lt;/ul>
&lt;h2 id="random">&lt;a href="#random" class="header-anchor">&lt;/a>Random
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;time.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">srand&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="nf">time&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">));&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">n&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">rand&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">6&lt;/span> &lt;span class="c1">//n: 0 ~ 5
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>有安全要求時，請勿使用 &lt;code>random()&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="global-static-extern-variable">&lt;a href="#global-static-extern-variable" class="header-anchor">&lt;/a>Global, Static, Extern Variable
&lt;/h2>&lt;h4 id="global">&lt;a href="#global" class="header-anchor">&lt;/a>global
&lt;/h4>&lt;ul>
&lt;li>變數的生命週期為整個程式。&lt;/li>
&lt;li>也可被extern所存取到。&lt;/li>
&lt;/ul>
&lt;h4 id="static">&lt;a href="#static" class="header-anchor">&lt;/a>static
&lt;/h4>&lt;ul>
&lt;li>變數只會在程式開始之前分配和初始化一次。&lt;/li>
&lt;li>在程式終止之前，儲存空間都不會被釋放。&lt;/li>
&lt;li>加上 &lt;code>static&lt;/code> 後， &lt;code>extern&lt;/code>便無法存取了。&lt;/li>
&lt;/ul>
&lt;h4 id="extern">&lt;a href="#extern" class="header-anchor">&lt;/a>extern
&lt;/h4>&lt;ul>
&lt;li>使用外部的變數。&lt;/li>
&lt;/ul>
&lt;h2 id="遞迴-recursive">&lt;a href="#%e9%81%9e%e8%bf%b4-recursive" class="header-anchor">&lt;/a>遞迴 Recursive
&lt;/h2>&lt;ul>
&lt;li>遞迴定義如下
&lt;ul>
&lt;li>遞迴:
參見「遞迴」。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>什麼?這個定義什麼也沒有說啊!好吧，改一下:
&lt;ul>
&lt;li>遞迴:
如果你還是沒明白遞迴是什麼意思的話，參見「遞迴」。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">Return&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Value&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">Type&lt;/span> &lt;span class="n">Function&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="nf">Name&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">parameter&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">list&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span> &lt;span class="n">Base&lt;/span> &lt;span class="k">case&lt;/span> &lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Return&lt;/span> &lt;span class="n">pre&lt;/span>&lt;span class="o">-&lt;/span>&lt;span class="n">defined&lt;/span> &lt;span class="n">value&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">Call&lt;/span> &lt;span class="n">itself&lt;/span> &lt;span class="n">with&lt;/span> &lt;span class="n">parameter&lt;/span> &lt;span class="n">modification&lt;/span>&lt;span class="p">.&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>所有能使用遞迴表達的敘述，皆能以迴圈的方式編寫。&lt;/li>
&lt;li>To iterate is human, to recurse, divine. — L. Peter Deutsch&lt;/li>
&lt;li>遞迴只應天上有，人間該當用迴圈&lt;/li>
&lt;li>我的觀點:
&lt;ul>
&lt;li>如果你找到關係式，遞迴是簡單的。&lt;/li>
&lt;li>時常用在虛擬碼(pseudo-code)中。&lt;/li>
&lt;li>性能效率可能比迭代差。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-04：Loop</title><link>https://blog.smallten.me/p/computer_programming_1-04/</link><pubDate>Sun, 18 Oct 2020 20:33:18 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-04/</guid><description>&lt;h1 id="loop">&lt;a href="#loop" class="header-anchor">&lt;/a>Loop
&lt;/h1>&lt;pre>&lt;code>- `while`
- `for`
- `do while`
&lt;/code>&lt;/pre>
&lt;h2 id="while-loop">&lt;a href="#while-loop" class="header-anchor">&lt;/a>While Loop
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">條件&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">執行區塊&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>%.200f&lt;/code> 會發生什麼事? -&amp;gt; 精度不夠沒有意義&lt;/li>
&lt;li>&lt;code>while(1)&lt;/code> -&amp;gt; 無窮迴圈&lt;/li>
&lt;/ul>
&lt;h2 id="for-loop">&lt;a href="#for-loop" class="header-anchor">&lt;/a>For Loop
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">for&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">初始化&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="err">條件&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="err">執行後操作&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">執行區塊&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>i++&lt;/code> -&amp;gt; Use the current value of i. -&amp;gt; &lt;code>i = i + 1&lt;/code>&lt;/li>
&lt;li>&lt;code>++i&lt;/code> -&amp;gt; &lt;code>i = i + 1&lt;/code> -&amp;gt; Use the new value of i.&lt;/li>
&lt;li>&lt;code>{}&lt;/code> -&amp;gt; 變數生命週期範圍&lt;/li>
&lt;li>&lt;code>%4d&lt;/code> ( &lt;code>%#&lt;/code> ) -&amp;gt; 給最小的位數去顯示&lt;/li>
&lt;li>在 ANSI C, 變數只能被宣告在函式的開頭，而 Modern C 沒有任何限制&lt;/li>
&lt;/ul>
&lt;h2 id="do-while-loop">&lt;a href="#do-while-loop" class="header-anchor">&lt;/a>Do While Loop
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">do&lt;/span>&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="err">執行區塊&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>&lt;span class="k">while&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="err">條件&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>三種不同類型的迴圈毫無疑問的都可以互相轉換
&lt;ul>
&lt;li>除了 &lt;code>do while&lt;/code> 至少會執行一次&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>大多數來說，如果你知道要執行幾次迴圈的話，會使用 &lt;code>for&lt;/code>&lt;/li>
&lt;li>&lt;code>break&lt;/code>：離開當前的區段&lt;/li>
&lt;li>&lt;code>continue&lt;/code>：跳過剩餘的敘述，直接執行下一次迭代&lt;/li>
&lt;li>無窮迴圈不是個好東西? -&amp;gt; 不，或許你會需要他，例如：Web server&lt;/li>
&lt;/ul>
&lt;hr>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;unistd.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="nf">sleep&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">sec&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>程式設計(一)-03：Condition Control</title><link>https://blog.smallten.me/p/computer_programming_1-03/</link><pubDate>Thu, 15 Oct 2020 20:53:14 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-03/</guid><description>&lt;h1 id="condition-control">&lt;a href="#condition-control" class="header-anchor">&lt;/a>Condition Control
&lt;/h1>&lt;h2 id="簡介">&lt;a href="#%e7%b0%a1%e4%bb%8b" class="header-anchor">&lt;/a>簡介
&lt;/h2>&lt;ul>
&lt;li>我們想要讓電腦去做基礎的判斷
&lt;ul>
&lt;li>&lt;code>if&lt;/code>&lt;/li>
&lt;li>&lt;code>switch&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="if">&lt;a href="#if" class="header-anchor">&lt;/a>If
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">statements&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">condition2&lt;/span>&lt;span class="p">){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>如果條件&lt;strong>不是錯誤&lt;/strong>，那麼將會執行大括號裡的敘述
&lt;ul>
&lt;li>簡而言之，&lt;code>false&lt;/code> 被定義為 &lt;code>0&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>&amp;gt;&lt;/code> -&amp;gt; 大於&lt;/li>
&lt;li>&lt;code>&amp;lt;&lt;/code> -&amp;gt; 小於&lt;/li>
&lt;li>&lt;code>&amp;gt;=&lt;/code> -&amp;gt; 大於等於&lt;/li>
&lt;li>&lt;code>&amp;lt;=&lt;/code> -&amp;gt; 小於等於&lt;/li>
&lt;li>&lt;code>==&lt;/code> -&amp;gt; 等於&lt;/li>
&lt;li>&lt;code>!=&lt;/code> -&amp;gt; 不等於&lt;/li>
&lt;li>&lt;code>&amp;amp;&amp;amp;&lt;/code> -&amp;gt; and&lt;/li>
&lt;li>&lt;code>||&lt;/code> -&amp;gt; or&lt;/li>
&lt;/ul>
&lt;h2 id="boolean">&lt;a href="#boolean" class="header-anchor">&lt;/a>Boolean
&lt;/h2>&lt;ul>
&lt;li>在 &lt;code>Cpp&lt;/code> 裡，有個型別稱為 &lt;code>bool&lt;/code>
&lt;ul>
&lt;li>它只有兩個值：&lt;code>true, false&lt;/code>&lt;/li>
&lt;li>那麼 &lt;code>bool&lt;/code> 使用的記憶體大小為何能?( &lt;code>1 bit or 1 byte&lt;/code> ??)&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在 &lt;code>ANSI C&lt;/code> 裡，沒有一個型別為boolean的&lt;/li>
&lt;li>從 &lt;code>C99&lt;/code> 開始，有一個標頭檔可以使用，&lt;code>stdbool.h&lt;/code>&lt;/li>
&lt;/ul>
&lt;h2 id="switch">&lt;a href="#switch" class="header-anchor">&lt;/a>Switch
&lt;/h2>&lt;ul>
&lt;li>你可以使用 &lt;code>if-else&lt;/code> 來做每個條件判斷，但是有時候可能會寫一個巨大的巢狀程式，因此將介紹另一個方法 &lt;code>switch&lt;/code>&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="k">switch&lt;/span> &lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">case&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">default&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">...&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>break&lt;/code>：從此處結束
&lt;ul>
&lt;li>那麼如果不使用 &lt;code>break&lt;/code> 呢??&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>default&lt;/code>：如果沒有 &lt;code>case&lt;/code> 符合，執行這段&lt;/li>
&lt;/ul>
&lt;h2 id="浮點數比較">&lt;a href="#%e6%b5%ae%e9%bb%9e%e6%95%b8%e6%af%94%e8%bc%83" class="header-anchor">&lt;/a>浮點數比較
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">float&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mf">0.3&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;if01&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;else01&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mf">0.3f&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;if02&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;else02&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>結果： &lt;code>else01 if02&lt;/code>&lt;/li>
&lt;li>請使用 &lt;code>sizeof()&lt;/code> 查看發生了什麼!(&lt;code>IEEE 754&lt;/code>)&lt;/li>
&lt;li>結論：&lt;strong>浮點數的比較是相當危險的!!&lt;/strong>&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-02：Arithmetic</title><link>https://blog.smallten.me/p/computer_programming_1-02/</link><pubDate>Thu, 15 Oct 2020 11:19:09 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-02/</guid><description>&lt;h1 id="arithmetic">&lt;a href="#arithmetic" class="header-anchor">&lt;/a>Arithmetic
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="kt">int&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">sum&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">sum&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>變數
&lt;ul>
&lt;li>每個變數都必須有它的型別&lt;/li>
&lt;li>在使用變數前必須先宣告它&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>在C裡面， &lt;code>=&lt;/code> 意思為”指定”，而不是”相等”，指派右邊的數值給左邊的變數&lt;/li>
&lt;li>一個好習慣，總是初始化變數&lt;/li>
&lt;li>C Spec:
&lt;ul>
&lt;li>C89:If an object that has static storage duration is not initialized explicitly, it is initialized implicitly.&lt;/li>
&lt;li>C99: If it has arithmetic type, it is initialized to (positive or unsigned) zero.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>In C99: &lt;code>a == (a / b) * b + a % b&lt;/code>&lt;/li>
&lt;li>&lt;code>printf&lt;/code> 是一個函式去印出格式化字串
&lt;ul>
&lt;li>&lt;code>%d&lt;/code> -&amp;gt; 有號十進位整數&lt;/li>
&lt;li>&lt;code>%f&lt;/code> -&amp;gt; 十進位浮點數&lt;/li>
&lt;li>&lt;code>%u&lt;/code> -&amp;gt; 無號十進位整數&lt;/li>
&lt;li>當然不只這些&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>小技巧&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">-=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">/&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="n">a&lt;/span> &lt;span class="o">%=&lt;/span> &lt;span class="n">b&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">a&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="n">b&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;hr>
&lt;ul>
&lt;li>查看記憶體使用大小： &lt;code>sizeof()&lt;/code>，回傳單位為 &lt;code>byte&lt;/code> ( &lt;code>printf(&amp;quot;%lu&amp;quot;, sizeof());&lt;/code> )&lt;/li>
&lt;li>&lt;code>#include &amp;lt;stdint.h&amp;gt;&lt;/code>
&lt;ul>
&lt;li>int8_t: 8-bit signed interger&lt;/li>
&lt;li>int16_t: 16-bit signed interger&lt;/li>
&lt;li>int32_t: 32-bit signed interger&lt;/li>
&lt;li>int64_t: 64-bit signed interger&lt;/li>
&lt;li>uint8_t: 8-bit unsigned interger&lt;/li>
&lt;li>uint16_t: 16-bit unsigned interger&lt;/li>
&lt;li>uint32_t: 32-bit unsigned interger&lt;/li>
&lt;li>uint64_t: 64-bit unsigned interger&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>輸入：&lt;code>scanf(&amp;quot;%d&amp;quot;, &amp;amp;a);&lt;/code>
&lt;ul>
&lt;li>至於為甚麼需要 &lt;code>&amp;amp;&lt;/code>，之後會在指標的章節介紹到&lt;/li>
&lt;li>&lt;code>scanf&lt;/code> 是否有回傳值? ( &lt;code>man 3 scanf&lt;/code> )&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>最後也最重要的技能：RTFM and STFG&lt;/li>
&lt;/ul></description></item><item><title>程式設計(一)-01：Your first program</title><link>https://blog.smallten.me/p/computer_programming_1-01/</link><pubDate>Sun, 04 Oct 2020 11:00:48 +0800</pubDate><guid>https://blog.smallten.me/p/computer_programming_1-01/</guid><description>&lt;h1 id="hello-world">&lt;a href="#hello-world" class="header-anchor">&lt;/a>Hello World
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="c1">//Your first code.
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(){&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;Hello World&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>main是每個C程式的進入點，我們稱它為main function(主函式)&lt;/li>
&lt;li>&lt;code>int&lt;/code> 及 &lt;code>return&lt;/code> 是C裡面的Keywords
&lt;ul>
&lt;li>int代表這個函式將會回傳一個整數&lt;/li>
&lt;li>每個函式都應該有一個回傳值&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>每個敘述的結尾都應該要有 &lt;code>;&lt;/code>&lt;/li>
&lt;li>&lt;code>printf&lt;/code> 是一個會顯示格式化字串的函式&lt;/li>
&lt;li>&lt;code>\n&lt;/code> -&amp;gt; 換行&lt;/li>
&lt;li>&lt;code>\t&lt;/code> -&amp;gt; tab&lt;/li>
&lt;li>&lt;code>\\&lt;/code> -&amp;gt; \&lt;/li>
&lt;li>&lt;code>\&amp;quot;&lt;/code> -&amp;gt; “&lt;/li>
&lt;li>&lt;code>#&lt;/code> 的那一行是C的預處理器並且不需要;結尾&lt;/li>
&lt;li>&lt;code>stdio.h&lt;/code> -&amp;gt; standard input / output header(標準輸出/輸入標頭檔)&lt;/li>
&lt;li>註解 -&amp;gt; 是給開發者看的
&lt;ul>
&lt;li>&lt;code>//Your code&lt;/code> -&amp;gt; 單行&lt;/li>
&lt;li>&lt;code>/*Your code*/&lt;/code> -&amp;gt; 多行&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;ul>
&lt;li>使用編譯器將程式碼編譯成組合語言，再由組譯器組議成機械碼或可執行的二進制檔&lt;/li>
&lt;li>IDE -&amp;gt; Integrated Development Environment，不是編譯器&lt;/li>
&lt;li>gcc是最受歡迎的C編譯器之一(不完全對!!因為它不只做了編譯的動作…)&lt;/li>
&lt;li>一些基本的Linux的操作指令
&lt;ul>
&lt;li>&lt;code>man&lt;/code> -&amp;gt; 不會就問那個男人吧，男人不會就Google&lt;/li>
&lt;li>&lt;code>ls&lt;/code>&lt;/li>
&lt;li>&lt;code>cd&lt;/code>&lt;/li>
&lt;li>&lt;code>rm&lt;/code>&lt;/li>
&lt;li>&lt;code>pwd&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;code>gcc main.c&lt;/code> 一些參數
&lt;ul>
&lt;li>&lt;code>-o&lt;/code>&lt;/li>
&lt;li>&lt;code>-v&lt;/code>&lt;/li>
&lt;li>&lt;code>-g&lt;/code>&lt;/li>
&lt;li>&lt;code>-Wall -Wextra&lt;/code>&lt;/li>
&lt;li>&lt;code>-O2&lt;/code> or &lt;code>-Og&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="makefile">&lt;a href="#makefile" class="header-anchor">&lt;/a>Makefile
&lt;/h1>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> gcc main.c -o main
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nf">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> rm -rf main
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ul>
&lt;li>&lt;code>make&lt;/code> 將執行all下的指令&lt;/li>
&lt;li>中間縮排應為Tab而不是Space&lt;/li>
&lt;li>&lt;code>make clean&lt;/code>&lt;/li>
&lt;li>預設可執行的檔名為 &lt;code>makefile，Makefile，GNUmakefile&lt;/code>，若為其他可下 &lt;code>-f&lt;/code> 的參數&lt;/li>
&lt;/ul></description></item></channel></rss>