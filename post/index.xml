<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on 小十的部落格</title><link>https://blog.smallten.tk/post/</link><description>Recent content in Posts on 小十的部落格</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 12 Jul 2021 21:57:26 +0800</lastBuildDate><atom:link href="https://blog.smallten.tk/post/index.xml" rel="self" type="application/rss+xml"/><item><title>程式設計(二)-05：Variable Length Arguments List</title><link>https://blog.smallten.tk/p/computer_programming_2-05/</link><pubDate>Mon, 12 Jul 2021 21:57:26 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_2-05/</guid><description>Program Argument argc, argv 1#include &amp;lt;stdio.h&amp;gt;2#include &amp;lt;stdlib.h&amp;gt;3#include &amp;lt;stdint.h&amp;gt;4int main(int argc, char *argv[]) { 5 printf(&amp;#34;argc: %d\n&amp;#34;, argc); 6 for(int32_t i = 0 ; i &amp;lt; argc ; i++) 7 printf(&amp;#34;argv[%d]: %s\n&amp;#34;, i, argv[i]); 8 return 0; 9} 誰呼叫了 main 函式? 誰提供了 argc 和 argv 到 main 函式? Is main() the actual starting entry point? No! Actually, the process start from _start which is defined in crt1.o. 等等&amp;hellip; 我並沒有使用 crt1.</description></item><item><title>程式設計(二)-04：File Processing-02</title><link>https://blog.smallten.tk/p/computer_programming_2-04/</link><pubDate>Sat, 08 May 2021 17:23:11 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_2-04/</guid><description>如何顯示 BMP 檔 ? 有很多 libraries 可以幫助您做到這一點。實際上，您應該使用它們而不是從頭開始開發。 如何在螢幕上顯示圖像？ 您必須至少學習一個 GUI 庫，例如 Gtk、Qt 等。 我的建議：Qt。但是，這是一個 C++ 框架。 了解如何使用 GUI 平台提供的功能顯示圖像。 GTK GTK（以前稱為 GTK+、GIMP ToolKit）是一個免費的開源跨平台的部件工具箱 (widget toolkit)，用於創建圖形用戶界面（GUIs）。 GTK 是用 C 語言所編寫的物件導向的部件工具箱。它使用 GObject（即 GLib 物件系統）進行物件導向。 因此，不要告訴我 C 不能物件導向。 安裝：sudo apt install libgtk-3-dev SDL Simple DirectMedia Layer SDL是跨平台的軟件開發庫，為計算機多媒體硬件組件提供硬件抽象層。 視頻 聲音的 輸入設備 光盤 螺紋 共享對象加載 聯網 計時器 3D圖形 軟體開發者可以使用它來編寫高性能的電腦遊戲和其他多媒體應用程式。 SDL 架構 / 範例 SDL Object SDL_Window：包含有關 Window 本身的所有信息的結構：大小、位置、全螢幕、邊框等。 SDL_Renderer：處理所有渲染的結構。它與 SDL_Window 綁定在一起，因此只能在該 SDL_Window 中呈現。 SDL_Textures 和 SDL_Surface：SDL_Renderer 渲染SDL_Texture(存儲一個元素的像素資訊)。這是 SDL_Surface 的新版本，他們幾乎相同。 重要的區別是 SDL_Surface 使用軟件渲染（通過CPU），而 SDL_Texture 使用硬件渲染（通過GPU）。 安裝：sudo apt-get install libsdl2-dev libsdl2-image-dev Makefile 1CFLAGS := `sdl2-config --libs --cflags` -ggdb3 -O0 --std=c99 -Wall -lSDL2_image -lm 2all: example.</description></item><item><title>程式設計(二)-03：File Processing-01</title><link>https://blog.smallten.tk/p/computer_programming_2-03/</link><pubDate>Fri, 02 Apr 2021 17:58:22 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_2-03/</guid><description>File C 將每個檔案視為一個連續的 bytes stream 每個檔案以 end-of-file 為結尾，這是由系統提供而不是文件。 It looks like there is an additional byte appended to the file. However, that additional byte does not exist. Instead, it is a signal raised by your system. int feof(FILE *stream); File Stream Streams 提供了更高級別的介面(interface)讓你存取資料。 fprintf fscanf 事實上，你已經使用過 file stream ! 三種標準流 標準輸入 0 (standard input.) 標準輸出 1 (standard output.) 標準錯誤 2 (standard error.</description></item><item><title>程式設計(二)-02：Structure</title><link>https://blog.smallten.tk/p/computer_programming_2-02/</link><pubDate>Fri, 02 Apr 2021 16:24:46 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_2-02/</guid><description>Structure Structures 就是將一堆相關的變數整合在一個名字下。 關鍵字：struct 資料型別：struct _name_ 成員：在 struct 的大括號內宣告的變數。 同一個結構體下的成員名稱是唯一的。 1struct _sCard{ 2 uint8_t suit, face; 3}; 初始化 1struct _sCard a_card = {.suit = 1, .face = 2}; 2struct _sCard a_card = {1, 2}; structure member operator -&amp;gt; . structure pointer operator -&amp;gt; -&amp;gt; 1a_card_ptr = &amp;amp;a_card; 2a_card_ptr-&amp;gt;face = 5; 3// Equivalent to 4(*a_card_ptr).face = 5; CPU Alignment CPU 有時候會為了減少從記憶體呼叫變數的次數，而主動將變數的記憶體放在連續的地方。 為了避免 alignment，你可以使用以下兩種方法： __attribute__((packed)) pragma 1#pragma pack(push) 2#pragma pack(1) 3#pragma pack(pop) 1// 法一 2struct st{ 3 .</description></item><item><title>程式設計(二)-01：String</title><link>https://blog.smallten.tk/p/computer_programming_2-01/</link><pubDate>Fri, 02 Apr 2021 14:40:30 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_2-01/</guid><description>字元 在講字串之前我們先來看什麼是字元。 ASCII American Standard Code for Information Interchange. 電子通訊的字元編碼標準 基於英文字母，ASCII 將 128 個字元編碼成 7 個位元長。 95 個可印字元：A-Z, a-z, 0-9, 標點符號 不可印字元：換行符號 在電腦中我們使用 8-bit 的記憶體儲存字元。 在 C 語言中，使用 char 這個型別。 %c -&amp;gt; 輸出字元 %x or %X -&amp;gt; 印出 hex or HEX 的值。 在以前，許多情況下，有些人使用 unsigned char 作為 one byte 的資料型別，但現今你應該使用的是 uint8_t。 請把 char 留給字串，盡管事實上對電腦來說都是一樣的。 其他編碼：Big5、UTF-8 字串 事實上，字串就是一連串的可印字元。 這樣看起來很像陣列對吧?</description></item><item><title>Hugo-02：優化 Blog</title><link>https://blog.smallten.tk/p/hugo-02/</link><pubDate>Sun, 07 Feb 2021 04:06:17 +0800</pubDate><guid>https://blog.smallten.tk/p/hugo-02/</guid><description>簡介 這部份是紀錄我修改的主題內容，並將 codeblocks 區塊美化，以及支援 KaTex 和 Google Analytics 教學開始 我使用的主題為 Stack 主題內容修改 找到 assets/scss/variables.scss，並修改 1--link-background-color: 90, 240, 250; //189, 195, 199; 2--code-text-color: #ef3982; //rgba(255, 255, 255, 0.9); Codeblocks 區塊美化 到 static/css/ 下建立 copy-to-clipboard.css，內容如下 1.highlight { 2 position: relative; 3} 4.highlight .ln { 5 -moz-user-select: none; 6 -webkit-user-select: none; 7 -ms-user-select: none; 8 user-select: none; 9} 10.highlight-copy-btn { 11 position: absolute; 12 top: 7px; 13 right: 7px; 14 border: 0; 15 border-radius: 4px; 16 padding: 1px; 17 font-size: 0.</description></item><item><title>Hugo-01：建立一個Hugo Blog</title><link>https://blog.smallten.tk/p/hugo-01/</link><pubDate>Sun, 07 Feb 2021 03:22:22 +0800</pubDate><guid>https://blog.smallten.tk/p/hugo-01/</guid><description>簡介 這篇內容將快速帶你建立一個 Hugo Blog 並將其部屬到 GitHub 上 相關連結 Hugo - Hugo 官網 Hugo Themes - 選擇自己喜歡的主題 Hugo Releases - 下載 Hugo 並安裝進電腦 教學開始 建立 Hugo Blog 安裝 Hugo 這裡以 Ubuntu 為示範 先至 Hugo Releases 下載自己所需的版本 1$ dpkg -i hugo_extended_0.79.0_Linux-64bit.deb # 記得依照檔案自行更改 創建一個 Hugo Site 這裡創建一個名為 blog 1$ cd ~ 2$ hugo new site blog # 可自行修改名稱 新增主題 這裡我選擇了 Stack 這個主題 1$ cd ~/blog/ 2$ git submodule add https://github.</description></item><item><title>程式設計(一)-08：Pointer</title><link>https://blog.smallten.tk/p/computer_programming_1-08/</link><pubDate>Wed, 23 Dec 2020 19:38:14 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_1-08/</guid><description>Pointer 許多人不喜歡C是因為有「指標」 這可能是C中最困難的一個部分 指標是一個變數，其值為記憶體位置 宣告：int32_t *p p 是一個指標 指向的記憶體區塊被視為整數 初始化：int32_t *p = NULL address operator &amp;amp;：返回其變數的記憶體位置 如果想要印出記憶體位置，你可以使用%p indirection operator *：也被稱為dereferencing operator，返回指向對象的值 void *：是一個通用的指標型別(generic pointer type)，可以不透過explicit cast轉換成任意指標的型別 傳參數至函式 在C語言中，argument passing 稱為 call-by-value 電腦將會分配另一個記憶體區塊 複製輸入的參數到記憶體區塊 函式將會在新的記憶體區塊執行 這就是為什麼修改函式中的變數，並不會修改到原本外部的變數了。 在C++有另一種傳送方式稱為 call-by-reference，這邊我們不多加介紹。 普遍來說，傳址會比傳值更快。 陣列與指標 在大部分的情況下，我們可以把array視為第一個元素的指標 現在你應該明白為什麼陣列的值會在函式中被修改 為了避免模棱兩可(搞混)，我較喜歡&amp;amp;(array[0])而不是array、&amp;amp;array 然而你不能寫出 array = &amp;amp;a int32_t int16_t int8_t ptr++ 移動的大小是根據指標的型別 這在要讀取每一byte的詳細資料時非常好用 事實上，array[n] = *(ptr + n) Endian Issue</description></item><item><title>First Hugo Blog</title><link>https://blog.smallten.tk/p/first-hugo-blog/</link><pubDate>Fri, 18 Dec 2020 01:16:06 +0800</pubDate><guid>https://blog.smallten.tk/p/first-hugo-blog/</guid><description>第一個 Hugo Blog  由於秉持著「人生總折騰」的道理，我來轉移 Blog 了(誤///)，好啦，其實是單純希望有個穩定且又能全天候供應的 Blog 而已，由於我的隊友兩人分別使用了 Hexo 及 Hugo ，因此一開始讓我有點難抉擇，但最終我還是選擇了 Hugo 。
 至於第二個選擇的難關就是主題了，挑了好久都沒看到順眼的，差點就要聽吳文元說的沒有喜歡的就自己寫呀(怕///)，最終還是挑到了一個稍微滿意的主題 Stack。
 至於架設的過程到目前為止還算是蠻順利的，希望之後也不會遇到什麼大坑。</description></item><item><title>演算法-01：蓄水池抽樣法</title><link>https://blog.smallten.tk/p/algorithm-01/</link><pubDate>Tue, 08 Dec 2020 16:02:25 +0800</pubDate><guid>https://blog.smallten.tk/p/algorithm-01/</guid><description>蓄水池抽樣法 (Reservoir Sampling) 從 N 個樣本中，隨機抽取 K 個樣本，其中 N 非常大(不能將所有數據都放進記憶體或是一個未知數)，而每個被抽出來的機率要相等。 定理 該算法保證每個元素以 \( k \over n \) 的機率被選入蓄水池中。
證明 第 i 個元素進入蓄水池的機率為 \( k \over i \)，蓄水池內每個元素被替換的機率為\( 1 \over k \) 因此在第 i 輪第 j 個元素被替換的機率為 \( {k \over i}\times{1 \over k} = {1 \over i} \)，接下來用 M.I. (數學歸納法)來證明，當 n 次循環結束時每個元素進入蓄水池的機率為 \( k \over n \) 假設在 (i-1) 次迭代後，任意一個元素進入 蓄水池的概率為 \( k \over i-1 \)。由上面的結論，在第 i 次迭代時，該元素被替換的概率為 \( 1 \over i \)， 那麼其不被替換的概率則為 \( 1 - {1 \over i} = {i - 1 \over i} \) 故在第 i 次迭代後，該元素在蓄水池內的概率為 \( {k \over i-1} \times {i-1 \over i} = {k \over i} \)，歸納結束。 因此當循環結束時，每個元素進入蓄水池的概率為 \( k \over n \)，命題得證。 例題 Leetcode 382.</description></item><item><title>程式設計(一)-07：Array</title><link>https://blog.smallten.tk/p/computer_programming_1-07/</link><pubDate>Mon, 07 Dec 2020 19:38:14 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_1-07/</guid><description>Array 陣列是一種可以儲存大量相同型別資料的方法。 連續的記憶體位置。 永遠從0開始 int32_t a[10] -&amp;gt; a[0] ~ a[9] 計數變數 i 的型別可以宣告為 size_t，它是一個無號的整數型別。 初始化 int32_t a[5] = {0, 0, 0, 0, 0}; int32_t a[5] = {0}; 存取陣列元素使用 variable[index] 專業說明：電腦將找到第一個元素的地址，然後根據索引移動記憶體位置以訪問數據。 事實上一維陣列可以處理所有情況，至於多維陣列只是給人類方便閱讀的。 define 是遇處理指令，不是C的詞(statement) 我們可以使用 #define 去做巨集(MACRO) 當開發時MACRO有些像function，然而對電腦而言他們是不同的。 當遇到MACRO，編譯器將簡單的依定義替換掉程式碼。 函式擁有自己的標記。 基本排序 氣泡排序法 1for(int i = 0; i &amp;lt; n; ++i) { 2 for(int j = i; j &amp;lt; n; ++j) { 3 if(a[j] &amp;lt; a[i]) { 4 a[i] = a[i] ^ a[j]; 5 a[j] = a[i] ^ a[j]; 6 a[i] = a[i] ^ a[j]; 7 } 8 } 9} qsort 1#include &amp;lt;stdlib.</description></item><item><title>程式設計(一)-06：Makefile</title><link>https://blog.smallten.tk/p/computer_programming_1-06/</link><pubDate>Wed, 02 Dec 2020 21:45:51 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_1-06/</guid><description>Makefile for 程設一 1CC = gcc 2CFLAGS = -Wall -Wextra -O2 -std=c11 3LDFLAGS = -lm 4TARGETS = main01 main02 5main01_OBJ = main01.o func01.o 6main02_OBJ = main02.o func02.o 7 8.PHONY = all clean 9 10all: $(TARGETS) 11 12.SECONDEXPANSION: 13$(TARGETS): $$($$@_OBJ) 14 $(CC) $^ -o $@ $(LDFLAGS) 15 16%.o: $@.c 17 18clean: 19 -$(RM) $(TARGETS) $(foreach targ,$(TARGETS),$(foreach obj, $($(targ)_OBJ), $(obj)))</description></item><item><title>程式設計(一)-05：Function</title><link>https://blog.smallten.tk/p/computer_programming_1-05/</link><pubDate>Sat, 21 Nov 2020 21:48:47 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_1-05/</guid><description>Function 函式 double double 是一種浮點數型別，就像是 float 就如同它的名字，它使用的記憶體大小為 float 的兩倍 建議: 當你需要浮點數的話，一律使用 double 到目前為止我們最常使用到的函式為 printf 我們稱這些函式為 C standard functions (C標準函式) 所有的函式都被儲存在libraries中 如果你想要讀書，你需要知道書在哪，然後去圖書館借書 如果你想要使用函式，你需要知道函式在哪，然後include library去使用函式 例如: stdio.h &amp;lt;-&amp;gt; printf 使用 math.h 時，需下編譯參數 -lm 永不重新發明輪子 在開發前請先搜尋 1//原型宣告 2Return-Value-Type Function-Name (parameter-Type-list); 3 4Return-Value-Type Function-Name (parameter-list){ 5 Statements 6} 使用原型宣告並將自訂函式置於main function之後的好處? 不用管function之間的先後順序。 void 沒有型別 在這裡，代表不需要回傳值 標頭檔 (Header Files) 甚麼是header file?</description></item><item><title>程式設計(一)-04：Loop</title><link>https://blog.smallten.tk/p/computer_programming_1-04/</link><pubDate>Sun, 18 Oct 2020 20:33:18 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_1-04/</guid><description>Loop - `while` - `for` - `do while` While Loop 1while(條件){ 2 執行區塊 3} %.200f 會發生什麼事? -&amp;gt; 精度不夠沒有意義 while(1) -&amp;gt; 無窮迴圈 For Loop 1for(初始化; 條件; 執行後操作){ 2 執行區塊 3} i++ -&amp;gt; Use the current value of i. -&amp;gt; i = i + 1 ++i -&amp;gt; i = i + 1 -&amp;gt; Use the new value of i. {} -&amp;gt; 變數生命週期範圍 %4d ( %# ) -&amp;gt; 給最小的位數去顯示 在 ANSI C, 變數只能被宣告在函式的開頭，而 Modern C 沒有任何限制 Do While Loop 1do{ 2 執行區塊 3}while(條件) 三種不同類型的迴圈毫無疑問的都可以互相轉換 除了 do while 至少會執行一次 大多數來說，如果你知道要執行幾次迴圈的話，會使用 for break：離開當前的區段 continue：跳過剩餘的敘述，直接執行下一次迭代 無窮迴圈不是個好東西?</description></item><item><title>程式設計(一)-03：Condition Control</title><link>https://blog.smallten.tk/p/computer_programming_1-03/</link><pubDate>Thu, 15 Oct 2020 20:53:14 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_1-03/</guid><description>Condition Control 簡介 我們想要讓電腦去做基礎的判斷 if switch If 1if (condition1) { 2 statements; 3} 4else if (condition2){ 5 ... 6} 7else { 8 ... 9} 如果條件不是錯誤，那麼將會執行大括號裡的敘述 簡而言之，false 被定義為 0 &amp;gt; -&amp;gt; 大於 &amp;lt; -&amp;gt; 小於 &amp;gt;= -&amp;gt; 大於等於 &amp;lt;= -&amp;gt; 小於等於 == -&amp;gt; 等於 != -&amp;gt; 不等於 &amp;amp;&amp;amp; -&amp;gt; and || -&amp;gt; or Boolean 在 Cpp 裡，有個型別稱為 bool 它只有兩個值：true, false 那麼 bool 使用的記憶體大小為何能?</description></item><item><title>程式設計(一)-02：Arithmetic</title><link>https://blog.smallten.tk/p/computer_programming_1-02/</link><pubDate>Thu, 15 Oct 2020 11:19:09 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_1-02/</guid><description>Arithmetic 1#include &amp;lt;stdio.h&amp;gt;2int main(){ 3 int a = 1, b = 2, sum = 0; 4 sum = a + b; 5 printf(&amp;#34;%d&amp;#34;, sum); 6 return 0; 7} 變數 每個變數都必須有它的型別 在使用變數前必須先宣告它 在C裡面， = 意思為”指定”，而不是”相等”，指派右邊的數值給左邊的變數 一個好習慣，總是初始化變數 C Spec: C89:If an object that has static storage duration is not initialized explicitly, it is initialized implicitly. C99: If it has arithmetic type, it is initialized to (positive or unsigned) zero.</description></item><item><title>Python-04：多線程-ts下載並合併成mp4</title><link>https://blog.smallten.tk/p/python-04/</link><pubDate>Sun, 04 Oct 2020 16:36:35 +0800</pubDate><guid>https://blog.smallten.tk/p/python-04/</guid><description>簡介  這篇將帶你下載m3u8檔並分析出ts的檔案，再透過多線程來加速下載，之後再由FFmpeg合併成mp4。
Python 下載m3u8 1m3u8Url = &amp;#39;https://.../index.m3u8&amp;#39; 2 3def downloadM3u8(url): 4 r = requests.get(url) 5 with open(&amp;#39;./index.m3u8&amp;#39;, &amp;#39;wb&amp;#39;) as f: 6 f.write(r.content) 分析m3u8 這部份請依照你所取得的m3u8檔進行分析，並將完整的ts檔的url放進tsList即可。 1tsList = [] 2tsCnt = 0 3 4def analyzeM3u8(): 5 tsList.clear() 6 tempUrl = m3u8Url.rsplit(&amp;#39;/&amp;#39;, 1)[0] + &amp;#39;/&amp;#39; 7 with open(&amp;#39;./index.m3u8&amp;#39;, &amp;#39;r&amp;#39;) as f: 8 text = f.read() 9 textList = text.split(&amp;#39;\n&amp;#39;) 10 while textList[-1] != &amp;#39;#EXT-X-ENDLIST&amp;#39;: 11 textList.pop(-1) 12 for i in textList: 13 if i[0] !</description></item><item><title>Python-03：m3u8影片下載</title><link>https://blog.smallten.tk/p/python-03/</link><pubDate>Sun, 04 Oct 2020 11:07:24 +0800</pubDate><guid>https://blog.smallten.tk/p/python-03/</guid><description>簡介 現今你時常能在影音媒體網站看到 .m3u8 的檔案，以及許多 .ts 的分段媒體，本篇將教你如何簡單的下載成 .mp4 檔。 這篇並不詳加敘述 HLS 之類的觀念，若有興趣深入了解請自行查找資料。 FFmpeg FFmpeg官網 下載安裝完後，若為 windows 用戶請將 %ffmpeg%\bin 的路徑加入環境變數中，並於terminal中執行 ffmpeg -version 來查看是否成功加入。 下載檔案，直接在 terminal 輸入 ffmpeg -i m3u8URL -c copy filname.mp4，即可完成下載。(下面將提供Python的寫法) Python 1# -*- coding: UTF-8 -*- 2import ffmpeg_streaming 3from ffmpeg_streaming import Formats 4 5url = &amp;#39;https://.../index.m3u8&amp;#39; 6filename = &amp;#39;test.mp4&amp;#39; 7 8def ffmpeg_download(input_path, output_path): 9 video = ffmpeg_streaming.input(input_path) 10 stream = video.stream2file(Formats.h264()) 11 stream.output(output_path) 12 13if __name__ == &amp;#34;__main__&amp;#34;: 14 ffmpeg_download(url, &amp;#39;.</description></item><item><title>程式設計(一)-01：Your first program</title><link>https://blog.smallten.tk/p/computer_programming_1-01/</link><pubDate>Sun, 04 Oct 2020 11:00:48 +0800</pubDate><guid>https://blog.smallten.tk/p/computer_programming_1-01/</guid><description>Hello World 1#include &amp;lt;stdio.h&amp;gt;2//Your first code. 3int main(){ 4 printf(&amp;#34;Hello World\n&amp;#34;); 5 return 0; 6} main是每個C程式的進入點，我們稱它為main function(主函式) int 及 return 是C裡面的Keywords int代表這個函式將會回傳一個整數 每個函式都應該有一個回傳值 每個敘述的結尾都應該要有 ; printf 是一個會顯示格式化字串的函式 \n -&amp;gt; 換行 \t -&amp;gt; tab \\ -&amp;gt; \ \&amp;quot; -&amp;gt; “ # 的那一行是C的預處理器並且不需要;結尾 stdio.h -&amp;gt; standard input / output header(標準輸出/輸入標頭檔) 註解 -&amp;gt; 是給開發者看的 //Your code -&amp;gt; 單行 /*Your code*/ -&amp;gt; 多行 使用編譯器將程式碼編譯成組合語言，再由組譯器組議成機械碼或可執行的二進制檔 IDE -&amp;gt; Integrated Development Environment，不是編譯器 gcc是最受歡迎的C編譯器之一(不完全對!</description></item><item><title>Python-02：多線程-加速圖片下載</title><link>https://blog.smallten.tk/p/python-02/</link><pubDate>Mon, 03 Aug 2020 00:56:43 +0800</pubDate><guid>https://blog.smallten.tk/p/python-02/</guid><description>簡介 接續上一篇Python-01：爬蟲-圖片下載的內容，這篇文章將帶領大家使用多線程來加速圖片的下載 教學開始 首先我們先看個簡單的多線程範例 1import time, threading 2 3# 子執行緒的工作函數 4def job(): 5 for i in range(5): 6 print(&amp;#34;Child thread:&amp;#34;, i) 7 time.sleep(1) 8# 建立一個子執行緒 9t = threading.Thread(target = job) 10# 執行該子執行緒 11t.start() 12# 主執行緒繼續執行自己的工作 13for i in range(3): 14 print(&amp;#34;Main thread:&amp;#34;, i) 15 time.sleep(1) 16# 等待 t 這個子執行緒結束 17t.join() 18print(&amp;#34;Done.&amp;#34;) 1import time, threading 2 3# 子執行緒的工作函數 4def job(num): 5 print(&amp;#34;Thread&amp;#34;, num) 6 time.sleep(1) 7# 建立 5 個子執行緒 8threads = [] 9for i in range(5): 10 threads.</description></item><item><title>Python-01：爬蟲-圖片下載</title><link>https://blog.smallten.tk/p/python-01/</link><pubDate>Mon, 03 Aug 2020 00:39:24 +0800</pubDate><guid>https://blog.smallten.tk/p/python-01/</guid><description>簡介 這一篇將帶領大家透過Python的爬蟲自動化的下載圖片 安裝 打開終端機，安裝下列套件 pip install requests pip install BeautifulSoup4 pip install lxml pip install selenium 至 Chrome Driver 下載當前電腦中Chrome所對應版本的Driver 教學開始 首先因為這次的主題為圖片下載，因此我們找了一個擁有大量圖片的漫畫網頁來進行教學。 由於這個網頁的圖片是由JavaScript加載的，因此一開始我們使用Selenium來開啟網頁 1from selenium import webdriver 2 3url = &amp;#39;https://www.ohmanhua.com/13621/1/1.html&amp;#39; 4#使用crx插件 5chop = webdriver.ChromeOptions() 6chop.add_extension(&amp;#39;Adblock-Plus_v3.8.4.crx&amp;#39;) 7browser = webdriver.Chrome(options = chop) 8browser.implicitly_wait(10) 9browser.get(url) 當然若不想顯示瀏覽器的視窗可以使用headless模式 1chop.add_argument(&amp;#39;--headless&amp;#39;) #規避google bug 2chop.add_argument(&amp;#39;--disable-gpu&amp;#39;) 接下來使用BeautifulSoup4來分析頁面，並取得圖片網址，和共幾張圖片 1img_count = int(soup.find(&amp;#39;select&amp;#39;, {&amp;#39;class&amp;#39;: &amp;#39;mh_select&amp;#39;}).find_all(&amp;#39;option&amp;#39;)[-1].get(&amp;#39;value&amp;#39;)) 2img_url = soup.find_all(&amp;#39;div&amp;#39;, {&amp;#39;class&amp;#39;: &amp;#39;mh_comicpic&amp;#39;})[0].</description></item><item><title>簡易氣象站-02</title><link>https://blog.smallten.tk/p/weather-02/</link><pubDate>Sun, 12 Jul 2020 09:31:38 +0800</pubDate><guid>https://blog.smallten.tk/p/weather-02/</guid><description>簡介 這系列主題將帶領大家建立一個簡易的氣象觀測站，而這一小節將製作在Raspberry pi用Python讀取Arduino Serial的數值，並且製作一個簡易的UI實時顯示出數值。 硬體 上一小節的成品 Raspberry pi * 1 教學開始 打開Raspberry pi的Terminal，並輸入 ls /dev/tty* 將Arduino的Usb接上Raspberry pi 再次於Terminal中輸入 ls /dev/tty*，比較兩次的差異，即可知Arduino使用的序列埠為何(例如此時為/ dev/ttyACM0，請依照情況自行修改) 於Terminal中輸入 python3 -m pip install pyserial 將以下程式碼建立成一個python檔，再以python3執行即可 1# -*- coding: UTF-8 -*- 2import serial 3import tkinter as tk 4 5def getData(): 6 ser = serial.Serial(&amp;#39;/dev/ttyACM0&amp;#39;, 9600, timeout=1) 7 ser.flush() 8 while True: 9 flag = False 10 if ser.in_waiting&amp;gt;0: 11 arduinoData = ser.readline().decode(encoding=&amp;#39;utf-8&amp;#39;, errors=&amp;#39;ignore&amp;#39;).</description></item><item><title>簡易氣象站-01</title><link>https://blog.smallten.tk/p/weather-01/</link><pubDate>Sun, 12 Jul 2020 09:02:34 +0800</pubDate><guid>https://blog.smallten.tk/p/weather-01/</guid><description>簡介 這系列主題將帶領大家建立一個簡易的氣象觀測站，而這一小節將製作由Arduino抓取感測器數值的部分。 硬體 Arduino Uno R3 * 1 攀藤 G5 PMS5003 * 1 DFrobot 三杯式風速感測器 * 1 教學開始 連結電路
Uno程式碼 1#include &amp;lt;SoftwareSerial.h&amp;gt;2#define windPin A0 3SoftwareSerial pmsSerial(2, 3); 4 5long pmValue=0; 6long pmcf25=0; 7long pmat25=0; 8unsigned int temperature = 0; 9unsigned int humandity = 0; 10 11void retrievepm25(){ 12 int count = 0; 13 unsigned char c; 14 unsigned char high; 15 while (pmsSerial.available()) { 16 c = pmsSerial.</description></item><item><title>Arduino-05：HC-05 AT命令</title><link>https://blog.smallten.tk/p/arduino-05/</link><pubDate>Sun, 10 May 2020 21:56:45 +0800</pubDate><guid>https://blog.smallten.tk/p/arduino-05/</guid><description>簡介 這篇內容將教大家透過Arduino的序列埠設定HC-05的AT命令 硬體 Arduino Uno * 1 HC-05藍芽模組 * 1 教學 腳位連接 Arduino HC-05 5V VCC GND GND 8 TX 9 RX 程式碼 1#include &amp;lt;SoftwareSerial.h&amp;gt;2 3SoftwareSerial BT(8, 9); 4char val; 5 6void setup() { 7 Serial.begin(9600); 8 BT.begin(38400); 9} 10 11void loop() { 12 if(Serial.available()){ 13 val = Serial.read(); 14 BT.</description></item><item><title>Arduino-04：藍芽遙控車</title><link>https://blog.smallten.tk/p/arduino-04/</link><pubDate>Sun, 03 May 2020 16:29:01 +0800</pubDate><guid>https://blog.smallten.tk/p/arduino-04/</guid><description>簡介 這篇內容將帶領大家製作藍芽的遙控車，並且用Blynk的Joystick操控它 硬體 Arduino nano * 1 L298N 馬達控制板 * 1 HC-05 藍芽模組 * 1 二輪直流馬達遙控車 * 1 下載 至手機應用商店下載Blynk的App－Blynk官網 下載Blynk函式庫 教學開始 先上傳程式碼至Nano板中 依照下方圖示連接腳位，並且設定Blynk App內的物件 連接腳位
設定Blynk 創建3個元件，分別為Button、Bluetooth、Joystick，並且依下圖進行設置 nano程式碼 1#include &amp;lt;BlynkSimpleSerialBLE.h&amp;gt;2#define BLYNK_USE_DIRECT_CONNECT 3 4char auth[] = &amp;#34;Blynk Auth&amp;#34;; 5int d[2] = {0}; 6int car[2][2] = { {5, 6}, {11, 10} }; //in 1,2,4,3 7int en[2] = {3, 9}; 8 9void Controller(); 10void Move(int, int, int, int, int, int); 11 12BLYNK_WRITE(V0){ 13 for(int i=0; i&amp;lt;2; ++i){ 14 d[i] = param[i].</description></item><item><title>Arduino-03：跑馬燈</title><link>https://blog.smallten.tk/p/arduino-03/</link><pubDate>Thu, 09 Apr 2020 14:50:56 +0800</pubDate><guid>https://blog.smallten.tk/p/arduino-03/</guid><description>簡介 這篇內容將帶領大家製作點陣跑馬燈，並且用Blynk來操控它 硬體 WeMos D1R2 * 1 MAX7219 8*8LED點陣模組 * 2 下載 至手機應用商店下載Blynk的App－Blynk官網 下載Blynk函式庫 maxmatrix－下載並加入函式庫 教學開始 連接腳位 MAX7219 D1R2 VCC 5V GND GND DIN MOSI/D7 CS SS/D8 CLK SCK/D5 若要串聯多塊MAX7219的話，請將下一塊的DIN接至上一塊的DOUT連接腳位 設定Blynk 請照下圖拉出三個物件，並設定其相關參數 D1R2程式碼 1#include &amp;lt;MaxMatrix.h&amp;gt;2#include &amp;lt;avr/pgmspace.h&amp;gt;3#include &amp;lt;ESP8266WiFi.h&amp;gt;4#include &amp;lt;BlynkSimpleEsp8266.h&amp;gt;5 6char auth[] = &amp;#34;Blynk auth&amp;#34;; 7char ssid[] = &amp;#34;Wifi ssid&amp;#34;; 8char pass[] = &amp;#34;Wifi password&amp;#34;; 9 10PROGMEM const unsigned char CH[] = { 11 3, 8, B0000000, B0000000, B0000000, B0000000, B0000000, // space 12 1, 8, B1011111, B0000000, B0000000, B0000000, B0000000, // !</description></item><item><title>Arduino-02：UNOJOY</title><link>https://blog.smallten.tk/p/arduino-02/</link><pubDate>Thu, 09 Apr 2020 08:16:57 +0800</pubDate><guid>https://blog.smallten.tk/p/arduino-02/</guid><description>簡介 這篇內容將帶領大家把Arduino手把變成電腦手把 所需硬體 Arduino Uno R3 * 1 JoyStick 雙軸按鍵搖桿模組 * 1 下載檔案 FLIP － 請下載包含JRE的檔案(Java Runtime Environment included) UnoJoy － 將Uno變成電腦手把 x360ce － 將手把模擬成xbox 360的手把 教學開始 將下載好的FLIP安裝至電腦 確定電腦已安裝Arduino IDE，並已連接Uno板至電腦，可在裝置管理員查看狀態（如下圖） 打開剛剛下載的UnoJoy資料夾下的檔案，並將它上傳進Uno板中 UnoJoy-master\UnoJoy\UnoJoyArduinoSample\UnoJoyArduinoSample.ino 關閉Arduino IDE，進入DFU Mode，進入方式：用導線同時接觸下圖框起處的兩根針腳 確認已進入 DFU Mode，如下圖 若找不到驅動可手動新增驅動，選擇資料夾為 C:\Program Files (x86)\Atmel\Flip 3.4.7\usb 打開UnoJoy資料夾，啟動TurnIntoAJoystick的批次檔，檔案路徑 UnoJoy-master\UnoJoy\TurnIntoAJoystick.bat，執行成功結果如下圖 至此已完成將Uno變成電腦搖桿，之後插上Uno板皆為UnoJoy Joystick，可在以下路徑查看 控制台\硬體和音效\裝置和印表機 將搖桿的vrx和vry分別連接至Uno板的A0和A1，在 控制台\硬體和音效\裝置和印表機 裡的UnoJoy Joystick圖示上右鍵-&amp;gt;遊戲控制器-&amp;gt;內容，可查看搖桿狀態，如下圖 最後進入起動x360ce，新建立一個搖桿的設定檔，並選取模擬的位置，點選[Record]，依圖示移動搖桿方向即設定完成 補充 如何將UnoJoy Joystick變回一般的Arduino Uno板 連接UnoJoy Joystick，並進入DFU Mode 打開UnoJoy資料夾，啟動TurnIntoAnArduino的批次檔，檔案路徑 UnoJoy-master\UnoJoy\TurnIntoAnArduino.</description></item><item><title>Arduino-01：安裝IDE</title><link>https://blog.smallten.tk/p/arduino-01/</link><pubDate>Thu, 09 Apr 2020 08:08:43 +0800</pubDate><guid>https://blog.smallten.tk/p/arduino-01/</guid><description>官方IDE 此IDE由官方提供，可在此查看官網 下載－官方載點 VSCode + PlatformIO 先下載 VSCode 再安裝 PlatformIO 的插件</description></item></channel></rss>