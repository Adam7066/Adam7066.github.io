[{"content":"主題  最小生成樹  MST 模板 Kruskal\u0026rsquo;s Algorithm  時間複雜度 O(ElogE)  1struct edge { 2 int u, v, w; 3 bool operator \u0026lt; (const edge \u0026amp;r) const { 4 return w \u0026lt; r.w; 5 } 6}; 7int vn, en; // vertex num, edge num 8vector\u0026lt;edge\u0026gt; ve; 9vector\u0026lt;int\u0026gt; dsu; 10int Find(int x) { 11 if(x == dsu[x]) return x; 12 return dsu[x] = x; 13} 14bool Union(int x, int y) { 15 int a = Find(x), b = Find(y); 16 if(a != b) { 17 dsu[a] = b; 18 return true; 19 } 20 return false; 21} 22int Kruskal() { 23 for(int i = 0; i \u0026lt; vn; ++i) dsu.push_back(i); 24 sort(ve.begin(), ve.end()); 25 int cnt = 0, ans = 0; 26 for(int i = 0; i \u0026lt; en \u0026amp;\u0026amp; cnt \u0026lt; vn; ++i) { 27 if(Union(ve[i].u, ve[i].v)) { 28 ans += ve[i].w; 29 ++cnt; 30 } 31 } 32 return ans; 33} Prim\u0026rsquo;s Algorithm  時間複雜度 O(VlogE)  1struct edge { 2 int idx, w; 3 bool operator \u0026lt; (const edge \u0026amp;r) const { 4 return w \u0026gt; r.w; 5 } 6}; 7int prim() { 8 int vn; // vertex num 9 vector\u0026lt;edge\u0026gt; adj[vn]; 10 int ans = 0; 11 priority_queue\u0026lt;edge\u0026gt; pq; 12 vector\u0026lt;bool\u0026gt; vis(vn, false); 13 vis[0] = true; 14 for(auto v : adj[0]) pq.emplace(v); 15 while(!pq.empty()) { 16 edge mn = pq.top(); 17 pq.pop(); 18 if(vis[mn.idx]) continue; 19 vis[mn.idx] = true; 20 ans += mn.w; 21 for(auto v : adj[mn.idx]) pq.emplace(v); 22 } 23} 題目  Virtual Judge 題目列表與提示    題目 題目需求 難度     UVa 10034 給定平面上各點座標，求最小生成樹的邊權總和。(裸) 模板題   UVL 7001 讀懂題目的三項性質，便知道題意為求最小生成樹。 模板題   UVa 1208 讀懂題目便知題意。 模板題   UVa 10369 讀懂題目，自行思考和最小生成樹演算法的關係。 小變化   UVL 6437 讀懂題目，自行思考該作什麼樣的小修改。 小變化   UVa 534 讀懂題目，自行思考和最小生成樹演算法的關係。(最小瓶頸路) 經典變化   Uva 11733 讀懂題目，自行思考和最小生成樹演算法的關係。 小變化   Uva 1395 給定圖，對該圖所有生成樹計算最大邊權減最小邊權，輸出該差距之最小值。 小變化   Uva 1151 給定圖以及 q 組已知購買成本的子網路，問連通所有點的最小成本。 小變化      參考作法 A - Freckles 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int n; 7struct Point { 8 int group; 9 double x, y; 10} p[105]; 11struct Line { 12 int aIdx, bIdx; 13 double len; 14}; 15double pD(const Point \u0026amp;a, const Point \u0026amp;b) { 16 double dx = a.x - b.x, dy = a.y - b.y; 17 return sqrt(dx * dx + dy * dy); 18} 19bool cmpLen(const Line \u0026amp;a, const Line \u0026amp;b) { 20 return a.len \u0026lt; b.len; 21} 22bool isMSTEnd() { 23 for(int i = 0; i \u0026lt; n - 1; ++i) 24 if(p[i].group != p[i + 1].group) return false; 25 return true; 26} 27void Union(int a, int b) { 28 int minG = min(a, b); 29 for(int i = 0; i \u0026lt; n; ++i) { 30 if(p[i].group == a || p[i].group == b) 31 p[i].group = minG; 32 } 33} 34int main() { 35#ifndef ONLINE_JUDGE 36 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 37 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 38#endif 39 USE_CPPIO(); 40 int T; 41 cin \u0026gt;\u0026gt; T; 42 while(T--) { 43 cin \u0026gt;\u0026gt; n; 44 for(int i = 0; i \u0026lt; n; ++i) { 45 p[i].group = i; 46 cin \u0026gt;\u0026gt; p[i].x \u0026gt;\u0026gt; p[i].y; 47 } 48 vector\u0026lt;Line\u0026gt; lines; 49 for(int i = 0; i \u0026lt; n; ++i) { 50 for(int j = i + 1; j \u0026lt; n; ++j) { 51 lines.push_back({i, j, pD(p[i], p[j])}); 52 } 53 } 54 sort(lines.begin(), lines.end(), cmpLen); 55 double ans = 0.0; 56 for(int i = 0; !isMSTEnd(); ++i) { 57 if(p[lines[i].aIdx].group == p[lines[i].bIdx].group) 58 continue; 59 ans += lines[i].len; 60 Union(p[lines[i].aIdx].group, p[lines[i].bIdx].group); 61 } 62 cout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision(2) \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 63 if(T) cout \u0026lt;\u0026lt; endl; 64 } 65 return 0; 66} B - Bus Problem 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int n, m; 7long long sumO, sumM; 8vector\u0026lt;int\u0026gt; dsu; 9struct edge { 10 int s, e, v; 11}; 12vector\u0026lt;edge\u0026gt; ve; 13bool cmp(const edge \u0026amp;a, const edge \u0026amp;b) { 14 return a.v \u0026lt; b.v; 15} 16int Find(int x) { 17 if(dsu[x] == x) return x; 18 return dsu[x] = Find(dsu[x]); 19} 20int merge(int x, int y, int t) { 21 int a = Find(x), b = Find(y); 22 if(a != b) { 23 dsu[a] = b; 24 sumM += ve[t].v; 25 } 26} 27int main() { 28 USE_CPPIO(); 29 int T; 30 cin \u0026gt;\u0026gt; T; 31 while(T--) { 32 cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; 33 sumO = sumM = 0; 34 dsu.clear(); 35 ve.clear(); 36 for(int i = 0; i \u0026lt; m; ++i) { 37 int a, b, d; 38 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; d; 39 ve.push_back({a, b, d}); 40 sumO += d; 41 } 42 for(int i = 0; i \u0026lt; n; ++i) dsu.push_back(i); 43 sort(ve.begin(), ve.end(), cmp); 44 for(int i = 0; i \u0026lt; m; ++i) { 45 merge(ve[i].s, ve[i].e, i); 46 } 47 cout \u0026lt;\u0026lt; sumO - sumM \u0026lt;\u0026lt; endl; 48 } 49 return 0; 50} C - Oreon 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int n; 7struct edge { 8 int u, v, w; 9}; 10vector\u0026lt;edge\u0026gt; g; 11vector\u0026lt;int\u0026gt; dsu; 12bool cmp(const edge \u0026amp;a, const edge \u0026amp;b) { 13 if(a.w == b.w){ 14 if(a.u == b.u) return a.v \u0026lt; b.v; 15 else return a.u \u0026lt; b.u; 16 } 17 return a.w \u0026lt; b.w; 18} 19int Find(int x) { 20 if(x == dsu[x]) return x; 21 return dsu[x] = Find(dsu[x]); 22} 23void Union(int x, int y) { 24 int a = Find(x), b = Find(y); 25 if(a != b) dsu[a] = b; 26} 27int main() { 28#ifndef ONLINE_JUDGE 29 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 30 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 31#endif 32 int T; 33 cin \u0026gt;\u0026gt; T; 34 for(int ca = 1; ca \u0026lt;= T; ++ca) { 35 cout \u0026lt;\u0026lt; \u0026#34;Case \u0026#34; \u0026lt;\u0026lt; ca \u0026lt;\u0026lt; \u0026#34;:\\n\u0026#34;; 36 cin \u0026gt;\u0026gt; n; 37 g.clear(); 38 cin.ignore(100, \u0026#39;\\n\u0026#39;); 39 for(int i = 0; i \u0026lt; n; ++i) { 40 for(int j = 0; j \u0026lt; n; ++j) { 41 int t; 42 char c; 43 scanf(\u0026#34;%d%c\u0026#34;, \u0026amp;t, \u0026amp;c); 44 if(i == j || t == 0) continue; 45 g.push_back({i, j, t}); 46 } 47 } 48 sort(g.begin(), g.end(), cmp); 49 dsu.clear(); 50 for(int i = 0; i \u0026lt; n; ++i) 51 dsu.push_back(i); 52 int sz = g.size(); 53 for(int i = 0; i \u0026lt; sz; ++i) { 54 int a = Find(g[i].u), b = Find(g[i].v); 55 if(a != b) { 56 Union(a, b); 57 cout \u0026lt;\u0026lt; (char)(\u0026#39;A\u0026#39; + g[i].u) \u0026lt;\u0026lt; \u0026#34;-\u0026#34; \u0026lt;\u0026lt; (char)(\u0026#39;A\u0026#39; + g[i].v) \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; g[i].w \u0026lt;\u0026lt; endl; 58 } 59 } 60 } 61 return 0; 62} D - Arctic Network 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6struct Point { 7 int x, y; 8}; 9vector\u0026lt;Point\u0026gt; vp; 10struct edge { 11 int u, v; 12 double len; 13}; 14vector\u0026lt;edge\u0026gt; ve; 15vector\u0026lt;int\u0026gt; dsu; 16bool cmpVE(const edge \u0026amp;a, const edge \u0026amp;b) { 17 return a.len \u0026lt; b.len; 18} 19int Find(int x) { 20 if(x == dsu[x]) return x; 21 return dsu[x] = Find(dsu[x]); 22} 23bool Union(int x, int y) { 24 int a = Find(x), b = Find(y); 25 if(a == b)return false; 26 dsu[a] = b; 27 return true; 28} 29int main() { 30#ifndef ONLINE_JUDGE 31 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 32 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 33#endif 34 USE_CPPIO(); 35 int T; 36 cin \u0026gt;\u0026gt; T; 37 while(T--) { 38 int s, p; 39 cin \u0026gt;\u0026gt; s \u0026gt;\u0026gt; p; 40 vp.clear(); 41 ve.clear(); 42 dsu.clear(); 43 for(int i = 0; i \u0026lt; p; ++i) { 44 int x, y; 45 cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; 46 vp.push_back({x, y}); 47 dsu.push_back(i); 48 } 49 for(int i = 0; i \u0026lt; p; ++i) { 50 for(int j = i + 1; j \u0026lt; p; ++j) { 51 int dx = vp[i].x - vp[j].x, dy = vp[i].y - vp[j].y; 52 ve.push_back({i, j, sqrt(dx * dx + dy * dy)}); 53 } 54 } 55 sort(ve.begin(), ve.end(), cmpVE); 56 vector\u0026lt;double\u0026gt; ans; 57 for(int i = 0; ans.size() \u0026lt; p - 1; ++i) { 58 if(!Union(ve[i].u, ve[i].v)) continue; 59 ans.push_back(ve[i].len); 60 } 61 cout \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision(2) \u0026lt;\u0026lt; ans[p - 1 - s] \u0026lt;\u0026lt; endl; 62 } 63 return 0; 64} E - Power Plant 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6struct node { 7 int x, y, z; 8} a[500010]; 9int fa[100010], n, m, k, ans, len = 0; 10bool vis[100010]; 11int getf(int x) { 12 if (x == fa[x]) return x; 13 return fa[x] = getf(fa[x]); 14} 15bool cmp(node x, node y) { 16 return x.z \u0026lt; y.z; 17} 18int main() { 19 int T, ll = 0;; 20 scanf(\u0026#34;%d\u0026#34;, \u0026amp;T); 21 while (T--) { 22 memset(vis, 0, sizeof(vis)); 23 ll++; 24 len = ans = 0; 25 int xx; 26 scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;n, \u0026amp;m, \u0026amp;k); 27 for (int i = 1; i \u0026lt;= k; i++) scanf(\u0026#34;%d\u0026#34;, \u0026amp;xx), vis[xx] = 1; 28 for (int i = 1; i \u0026lt;= m; i++) { 29 ++len; 30 scanf(\u0026#34;%d%d%d\u0026#34;, \u0026amp;a[len].x, \u0026amp;a[len].y, \u0026amp;a[len].z); 31 len++; 32 a[len].x = a[len - 1].y; 33 a[len].y = a[len - 1].x; 34 a[len].z = a[len - 1].z; 35 } 36 for (int i = 1; i \u0026lt;= len; i++) { 37 if (vis[a[i].x]) a[i].x = n + 1; 38 if (vis[a[i].y]) a[i].y = n + 1; 39 } 40 sort(a + 1, a + len + 1, cmp); 41 for (int i = 1; i \u0026lt;= n + 1; i++) fa[i] = i; 42 int num = 0; 43 for (int i = 1; i \u0026lt;= len; i++) { 44 int x = getf(a[i].x), y = getf(a[i].y); 45 if (x != y) { 46 fa[x] = y; 47 ans += a[i].z; 48 num++; 49 if (num == n) break; 50 } 51 } 52 printf(\u0026#34;Case #%d: %d\\n\u0026#34;, ll, ans); 53 } 54 return 0; 55} F - Frogger 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6struct node { 7 int x, y; 8}; 9vector\u0026lt;node\u0026gt; vn; 10double dis[205][205]; 11int main() { 12#ifndef ONLINE_JUDGE 13 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 14 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 15#endif 16 USE_CPPIO(); 17 int n, cnt = 1; 18 while(cin \u0026gt;\u0026gt; n \u0026amp;\u0026amp; n) { 19 vn.clear(); 20 for(int i = 0; i \u0026lt; n; ++i) { 21 int a, b; 22 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; 23 vn.push_back({a, b}); 24 } 25 for(int i = 0; i \u0026lt; n; ++i) { 26 for(int j = 0; j \u0026lt; n; ++j) { 27 int dx = vn[i].x - vn[j].x, dy = vn[i].y - vn[j].y; 28 dis[i][j] = sqrt(dx * dx + dy * dy); 29 } 30 } 31 for(int k = 0; k \u0026lt; n; ++k) { 32 for(int i = 0; i \u0026lt; n; ++i) { 33 for(int j = 0; j \u0026lt; n; ++j) { 34 dis[i][j] = min(dis[i][j], max(dis[i][k], dis[k][j])); 35 } 36 } 37 } 38 cout \u0026lt;\u0026lt; \u0026#34;Scenario #\u0026#34; \u0026lt;\u0026lt; cnt++ \u0026lt;\u0026lt; endl; 39 cout \u0026lt;\u0026lt; \u0026#34;Frog Distance = \u0026#34; \u0026lt;\u0026lt; fixed \u0026lt;\u0026lt; setprecision(3) \u0026lt;\u0026lt; dis[0][1] \u0026lt;\u0026lt; endl \u0026lt;\u0026lt; endl; 40 } 41 return 0; 42} G - Airports 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6struct node { 7 int u, v, w; 8 bool operator \u0026lt; (const node \u0026amp;r) const { 9 return w \u0026lt; r.w; 10 } 11}; 12vector\u0026lt;node\u0026gt; vn; 13vector\u0026lt;int\u0026gt; dsu; 14int Find(int x) { 15 if(x == dsu[x]) return x; 16 return dsu[x] = Find(dsu[x]); 17} 18bool Union(int x, int y) { 19 int a = Find(x), b = Find(y); 20 if(a != b) { 21 dsu[a] = b; 22 return true; 23 } 24 return false; 25} 26int main() { 27#ifndef ONLINE_JUDGE 28 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 29 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 30#endif 31 USE_CPPIO(); 32 int T; 33 cin \u0026gt;\u0026gt; T; 34 for(int ca = 1; ca \u0026lt;= T; ++ca) { 35 int n, m, cost; 36 vn.clear(); 37 dsu.clear(); 38 cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026gt;\u0026gt; cost; 39 for(int i = 0; i \u0026lt;= n; ++i) dsu.push_back(i); 40 for(int i = 0; i \u0026lt; m; ++i) { 41 int a, b, c; 42 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; c; 43 vn.push_back({a, b, c}); 44 } 45 sort(vn.begin(), vn.end()); 46 int sum = 0; 47 for(int i = 0; i \u0026lt; m; ++i) { 48 if(vn[i].w \u0026gt;= cost) continue; 49 if(Union(vn[i].u, vn[i].v)) 50 sum += vn[i].w; 51 } 52 int cnt = 0; 53 for(int i = 1; i \u0026lt;= n; ++i) { 54 if(i == dsu[i]) ++cnt; 55 } 56 cout \u0026lt;\u0026lt; \u0026#34;Case #\u0026#34; \u0026lt;\u0026lt; ca \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; sum + cost*cnt \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; 57 } 58 return 0; 59} H - Slim Span 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6struct node { 7 int u, v, w; 8 bool operator \u0026lt; (const node \u0026amp;r) const { 9 return w \u0026lt; r.w; 10 } 11}; 12vector\u0026lt;node\u0026gt; vn; 13vector\u0026lt;int\u0026gt; dsu; 14int Find(int x) { 15 if(x == dsu[x]) return x; 16 return dsu[x] = Find(dsu[x]); 17} 18bool Union(int x, int y) { 19 int a = Find(x), b = Find(y); 20 if(a != b) { 21 dsu[a] = b; 22 return true; 23 } 24 return false; 25} 26int main() { 27#ifndef ONLINE_JUDGE 28 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 29 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 30#endif 31 USE_CPPIO(); 32 int n, m; 33 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026amp;\u0026amp; (n || m)) { 34 vn.clear(); 35 for(int i = 0; i \u0026lt; m; ++i) { 36 int a, b, c; 37 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b \u0026gt;\u0026gt; c; 38 vn.push_back({a, b, c}); 39 } 40 sort(vn.begin(), vn.end()); 41 int ans = INF; 42 for(int i = 0; i \u0026lt; m; ++i) { 43 dsu.clear(); 44 for(int i = 0; i \u0026lt;= n; ++i) dsu.push_back(i); 45 int cnt = n - 1; 46 for(int j = i; j \u0026lt; m; ++j) { 47 if(Union(vn[j].u, vn[j].v)) --cnt; 48 if(cnt == 0) { 49 ans = min(ans, vn[j].w - vn[i].w); 50 break; 51 } 52 } 53 } 54 if(ans == INF) cout \u0026lt;\u0026lt; \u0026#34;-1\\n\u0026#34;; 55 else cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 56 } 57 return 0; 58} I - Buy or Build 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6struct point { 7 int x, y; 8}; 9struct buy { 10 int m, ci; 11 vector\u0026lt;int\u0026gt; a; 12}; 13struct node { 14 int u, v, w; 15 bool operator \u0026lt; (const node \u0026amp;r) const { 16 return w \u0026lt; r.w; 17 } 18}; 19vector\u0026lt;point\u0026gt; vp; 20vector\u0026lt;buy\u0026gt; vb; 21vector\u0026lt;node\u0026gt; vn, vt; 22vector\u0026lt;int\u0026gt; dsu; 23int Find(int x) { 24 if(x == dsu[x]) return x; 25 return dsu[x] = Find(dsu[x]); 26} 27bool Union(int x, int y) { 28 int a = Find(x), b = Find(y); 29 if(a != b) { 30 dsu[a] = b; 31 return true; 32 } 33 return false; 34} 35int ksu(int t, vector\u0026lt;node\u0026gt; \u0026amp;vn, vector\u0026lt;node\u0026gt; \u0026amp;used) { 36 if(t == 1) return 0; 37 int m = vn.size(), ans = 0; 38 used.clear(); 39 for(int i = 0; i \u0026lt; m; ++i) { 40 if(Union(vn[i].u, vn[i].v)) { 41 ans += vn[i].w; 42 used.push_back(vn[i]); 43 if(--t == 1) break; 44 } 45 } 46 return ans; 47} 48int main() { 49#ifndef ONLINE_JUDGE 50 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 51 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 52#endif 53 USE_CPPIO(); 54 int T; 55 cin \u0026gt;\u0026gt; T; 56 while(T--) { 57 vp.clear(); 58 vb.clear(); 59 vn.clear(); 60 dsu.clear(); 61 int n, q; 62 cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; q; 63 for(int i = 0; i \u0026lt; q; ++i) { 64 buy tmp; 65 cin \u0026gt;\u0026gt; tmp.m \u0026gt;\u0026gt; tmp.ci; 66 for(int j = 0; j \u0026lt; tmp.m; ++j) { 67 int t; 68 cin \u0026gt;\u0026gt; t; 69 tmp.a.push_back(t - 1); 70 } 71 vb.push_back(tmp); 72 } 73 for(int i = 0; i \u0026lt; n; ++i) { 74 int x, y; 75 cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; 76 vp.push_back({x, y}); 77 } 78 for(int i = 0; i \u0026lt; n; ++i) { 79 for(int j = i + 1; j \u0026lt; n; ++j) { 80 int dx = vp[i].x - vp[j].x, dy = vp[i].y - vp[j].y; 81 vn.push_back({i, j, dx * dx + dy * dy}); 82 } 83 } 84 sort(vn.begin(), vn.end()); 85 for(int i = 0; i \u0026lt; n; ++i) dsu.push_back(i); 86 int ans = ksu(n, vn, vt); 87 for(int mask = 0; mask \u0026lt; (1 \u0026lt;\u0026lt; q); ++mask) { 88 dsu.clear(); 89 for(int i = 0; i \u0026lt; n; ++i) dsu.push_back(i); 90 int cnt = n, c = 0; 91 for(int i = 0; i \u0026lt; q; ++i) { 92 if(mask \u0026amp; (1 \u0026lt;\u0026lt; i)) { 93 c += vb[i].ci; 94 for(int j = 1; j \u0026lt; vb[i].a.size(); j++) { 95 if(Union(vb[i].a[0], vb[i].a[j])) 96 --cnt; 97 } 98 } 99 } 100 vector\u0026lt;node\u0026gt; vd; 101 ans = min(ans, c + ksu(cnt, vt, vd)); 102 } 103 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 104 if(T) cout \u0026lt;\u0026lt; endl; 105 } 106 return 0; 107} ","date":"2021-08-10T23:50:17+08:00","permalink":"https://blog.smallten.tk/p/star_coder-06/","title":"StarCoder2021暑訓：Week05"},{"content":"主題  動態規劃  經典背包模板 0/1 背包 \u0026amp; 無限背包 1const int N = 100, W = 100000; 2int cost[N], weight[N], c[W + 1]; 3void knapsack(int n, int w) { 4 memset(c, 0, sizeof(c)); 5 for (int i = 0; i \u0026lt; n; ++i) 6 for (int j = w; j - weight[i] \u0026gt;= 0; --j) // 0/1 背包 7 // for (int j = weight[i]; j \u0026lt;= w; ++j) 無限背包 8 c[j] = max(c[j], c[j - weight[i]] + cost[i]); 9 cout \u0026lt;\u0026lt; \u0026#34;最高的價值為\u0026#34; \u0026lt;\u0026lt; c[w]; 10} 有限背包 1const int N = 100, W = 100000; 2int cost[N], weight[N], number[N], c[W + 1]; 3void knapsack(int n, int w) { 4 for (int i = 0; i \u0026lt; n; ++i) { 5 int num = min(number[i], w / weight[i]); 6 for (int k = 1; num \u0026gt; 0; k *= 2) { 7 if (k \u0026gt; num) k = num; 8 num -= k; 9 for (int j = w; j \u0026gt;= weight[i] * k; --j) 10 c[j] = max(c[j], c[j - weight[i] * k] + cost[i] * k); 11 } 12 } 13 cout \u0026lt;\u0026lt; \u0026#34;最高的價值為\u0026#34; \u0026lt;\u0026lt; c[w]; 14} 經典零錢問題模板 1int price[5] = {5, 2, 6, 11, 17}; 2bool c[1000+1]; //int c[1000+1]; 3void change(int m) { 4 memset(c, false, sizeof(c)); 5 c[0] = true; 6 for (int i = 0; i \u0026lt; 5; ++i) 7 for (int j = price[i]; j \u0026lt;= m; ++j) 8 c[j] ||= c[j-price[i]]; 9 // c[j] += c[j-price[i]]; 10 if (c[m]) cout \u0026lt;\u0026lt; \u0026#34;湊得到\u0026#34;; 11 else cout \u0026lt;\u0026lt; \u0026#34;湊不到\u0026#34;; 12 // cout \u0026lt;\u0026lt; \u0026#34;湊得價位\u0026#34; \u0026lt;\u0026lt; m; 13 // cout \u0026lt;\u0026lt; \u0026#34;湊法總共\u0026#34; \u0026lt;\u0026lt; c[m] \u0026lt;\u0026lt; \u0026#34;種\u0026#34;; 14} LIS 模板 DP 1const int N = 100; 2int s[N], length[N]; 3int LIS() { 4 for (int i=0; i\u0026lt;N; i++) length[i] = 1; 5 for (int i=0; i\u0026lt;N; i++) 6 for (int j=0; j\u0026lt;i; j++) 7 if (s[j] \u0026lt; s[i]) 8 length[i] = max(length[i], length[j] + 1); 9 int l = 0; 10 for (int i=0; i\u0026lt;N; i++) l = max(l, length[i]); 11 return l; 12} Robinson-Schensted-Knuth Algorithm  時間複雜度 O(NlogL) ， N 是序列長度， L 是 LIS 長度。  1int LIS(vector\u0026lt;int\u0026gt;\u0026amp; s) { 2 if (s.size() == 0) return 0; 3 vector\u0026lt;int\u0026gt; v; 4 v.push_back(s[0]); 5 for (int i=1; i\u0026lt;s.size(); ++i) { 6 int n = s[i]; 7 if (n \u0026gt; v.back()) v.push_back(n); 8 else *lower_bound(v.begin(), v.end(), n) = n; 9 } 10 return v.size(); 11} LCS 模板 DP 1const int N1 = 7, N2 = 5; 2int s1[N1+1] = {0, 2, 5, 7, 9, 3, 1, 2}; 3int s2[N2+1] = {0, 3, 5, 3, 2, 8}; 4int length[N1+1][N2+1]; 5int LCS() { 6 for (int i=0; i\u0026lt;=N1; i++) length[i][0] = 0; 7 for (int j=0; j\u0026lt;=N2; j++) length[0][j] = 0; 8 for (int i=1; i\u0026lt;=N1; i++) 9 for (int j=1; j\u0026lt;=N2; j++) 10 if (s1[i] == s2[j]) length[i][j] = length[i-1][j-1] + 1; 11 else length[i][j] = max(length[i-1][j], length[i][j-1]); 12 return length[N1][N2]; 13} Hunt-Szymanski Algorithm  LCS 問題，化作 2D LIS 問題，再化作 1D LIS 問題，最後套用 Robinson-Schensted-Knuth Algorithm 。 排序所有數對，使用 Counting Sort 。掃描一遍 s2 ，把每個字元的位置紀錄下來。 較短的序列當作 s1 ，時間複雜度是 O(Klog(min(N,M)) + R) 。 K 是數對數目， N 和 M 是序列長度， R 是數字範圍。 K 至多是 NM ，最差情況下比先前的演算法還慢，平均情況下比先前的演算法快上許多。 R 源自 Counting Sort 。  1int LCS(string \u0026amp;s1, string \u0026amp;s2) { 2 vector\u0026lt;int\u0026gt; p[128]; // 假設字元範圍為 0 ~ 127 3 for (int i = 0; i \u0026lt; s2.size(); ++i) 4 p[s2[i]].push_back(i); 5 vector\u0026lt;int\u0026gt; v; 6 v.push_back(-1); 7 for (int i = 0; i \u0026lt; s1.size(); ++i) 8 for (int j = p[s1[i]].size() - 1; j \u0026gt;= 0; --j) { 9 int n = p[s1[i]][j]; 10 if (n \u0026gt; v.back()) v.push_back(n); 11 else *lower_bound(v.begin(), v.end(), n) = n; 12 } 13 return v.size() - 1; 14} 題目  Virtual Judge 題目列表與提示    題目 題目需求 採用演算法 難度 (for 新手)     UVa 10130 給物品價值和重量，給全家人每人最大負重，問全家能搬走的最高總價。 經典背包 易   UVa 357 給定幣值種類，問某一個金額存在幾種表示法。 經典零錢問題 易   UVa 10405 給兩個字串，問最長共同子字串。 裸 LCS 易   UVa 369 求 N 個中取 M 個數的總組合數。 組合數公式 易   UVa 10003 給一根棍子上的切斷點，每次切斷的成本為該段長度，問所有切斷點都切斷的最小成本。 區間 DP 易   UVa 103 給一堆 D 維的盒子，問這些盒子一個裝進一個，最多能裝多少個。 DAG 最短路/LIS 中   UVa 10534 一個 Wavio 序列含 2n+1 個數，前半嚴格遞增，後半嚴格遞減。求一個數列中的最長 Wavio 序列。 O(nlogn) LIS 難   UVa 10949 給兩個長度最多 20000 個字元的字串，求最長共同子字串。 因字串很長，需透過 LCS-\u0026gt;LIS 轉換，再用快速 LIS 解決。 難   UVa 10032 給一群人的體重，將他們分成兩群（人數最多差一個），並儘可能最小化兩群的體重和差距。 背包變化+狀態壓縮 \\(難^2\\)   UVa 104 給 n 種貨幣彼此間的匯率，找出一種匯率轉換順序能從中套利 1% 以上。 Floyd-Warshall \\(難^2\\)      參考作法 A - SuperSale 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int main() { 7#ifndef ONLINE_JUDGE 8 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 9 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 10#endif 11 USE_CPPIO(); 12 int T; 13 cin \u0026gt;\u0026gt; T; 14 while(T--) { 15 int n, m, c[35], g, ans = 0; 16 cin \u0026gt;\u0026gt; n; 17 int p[n], w[n]; 18 for(int i = 0; i \u0026lt; n; ++i) 19 cin \u0026gt;\u0026gt; p[i] \u0026gt;\u0026gt; w[i]; 20 cin \u0026gt;\u0026gt; m; 21 for(int i = 0; i \u0026lt; m; ++i) { 22 cin \u0026gt;\u0026gt; g; 23 memset(c, 0x00, sizeof(c)); 24 for(int j = 0; j \u0026lt; n; ++j) { 25 for(int k = g; k - w[j] \u0026gt;= 0; --k) { 26 c[k] = max(c[k], c[k - w[j]] + p[j]); 27 } 28 } 29 ans += c[g]; 30 } 31 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 32 } 33 return 0; 34} B - Let Me Count The Ways 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int main() { 7#ifndef ONLINE_JUDGE 8 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 9 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 10#endif 11 USE_CPPIO(); 12 int p[5] = {50, 25, 10, 5, 1}, n; 13 long long c[30005]; 14 while(cin \u0026gt;\u0026gt; n) { 15 memset(c, 0, sizeof(c)); 16 c[0] = 1; 17 for(int i = 0; i \u0026lt; 5; ++i) { 18 for(int j = p[i]; j \u0026lt;= n; ++j) { 19 c[j] += c[j - p[i]]; 20 } 21 } 22 if(c[n] == 1) cout \u0026lt;\u0026lt; \u0026#34;There is only 1 way to produce \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#34; cents change.\\n\u0026#34;; 23 else cout \u0026lt;\u0026lt; \u0026#34;There are \u0026#34; \u0026lt;\u0026lt; c[n] \u0026lt;\u0026lt; \u0026#34; ways to produce \u0026#34; \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#34; cents change.\\n\u0026#34;; 24 } 25 return 0; 26} C - Longest Common Subsequence 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int main() { 7#ifndef ONLINE_JUDGE 8 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 9 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 10#endif 11 USE_CPPIO(); 12 string s1, s2; 13 while(getline(cin, s1)) { 14 getline(cin, s2); 15 int n1 = s1.length(), n2 = s2.length(); 16 int dp[n1 + 1][n2 + 1]; 17 for(int i = 0; i \u0026lt;= n1; ++i) dp[i][0] = 0; 18 for(int i = 0; i \u0026lt;= n2; ++i) dp[0][i] = 0; 19 for(int i = 0; i \u0026lt; n1; ++i) { 20 for(int j = 0; j \u0026lt; n2; ++j) { 21 if(s1[i] == s2[j]) dp[i + 1][j + 1] = dp[i][j] + 1; 22 else dp[i + 1][j + 1] = max(dp[i][j + 1], dp[i + 1][j]); 23 } 24 } 25 cout \u0026lt;\u0026lt; dp[n1][n2] \u0026lt;\u0026lt; endl; 26 } 27 return 0; 28} D - Combinations 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int main() { 7#ifndef ONLINE_JUDGE 8 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 9 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 10#endif 11 USE_CPPIO(); 12 long long c[105][105] = {0}; 13 for(int i = 1 ; i \u0026lt;= 100 ; ++i) { 14 for(int j = 1 ; j \u0026lt;= i ; ++j) { 15 if(i == j) c[i][j] = 1; 16 else c[i][j] = c[i - 1][j] * i / (i - j); 17 } 18 } 19 int n, m; 20 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026amp;\u0026amp; !(n == 0 \u0026amp;\u0026amp; m == 0)) 21 cout \u0026lt;\u0026lt; n \u0026lt;\u0026lt; \u0026#34; things taken \u0026#34; \u0026lt;\u0026lt; m \u0026lt;\u0026lt; \u0026#34; at a time is \u0026#34; \u0026lt;\u0026lt; c[n][m] \u0026lt;\u0026lt; \u0026#34; exactly.\\n\u0026#34;; 22 return 0; 23} E - Cutting Sticks 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int main() { 7#ifndef ONLINE_JUDGE 8 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 9 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 10#endif 11 USE_CPPIO(); 12 int len, n, c[55], dp[55][55]; 13 while(cin \u0026gt;\u0026gt; len \u0026amp;\u0026amp; len) { 14 cin \u0026gt;\u0026gt; n; 15 c[0] = 0; 16 c[++n] = len; 17 memset(dp, 0, sizeof(dp)); 18 for(int i = 1; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; c[i]; 19 for(int w = 2; w \u0026lt;= n; ++w) { 20 for(int l = 0; l \u0026lt; n - 1; ++l) { 21 int r = l + w; 22 if(r \u0026gt; n) break; 23 dp[l][r] = INF; 24 for(int m = l + 1; m \u0026lt; r; ++m) 25 dp[l][r] = min(dp[l][m] + dp[m][r] + c[r] - c[l], dp[l][r]); 26 } 27 } 28 cout \u0026lt;\u0026lt; \u0026#34;The minimum cutting is \u0026#34; \u0026lt;\u0026lt; dp[0][n] \u0026lt;\u0026lt; \u0026#34;.\\n\u0026#34;; 29 } 30 return 0; 31} F - Stacking Boxes 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6struct Box { 7 int id; 8 vector\u0026lt;int\u0026gt; len; 9}; 10bool boxcmp(const Box \u0026amp;a, const Box \u0026amp;b) { 11 int sz = a.len.size(); 12 for(int i = 0; i \u0026lt; sz; ++i) { 13 if(a.len[i] \u0026lt; b.len[i]) return true; 14 if(a.len[i] \u0026gt; b.len[i]) return false; 15 } 16 return true; 17} 18bool isContain(const Box \u0026amp;a, const Box \u0026amp;b) { 19 int sz = a.len.size(); 20 for(int i = 0; i \u0026lt; sz; ++i) { 21 if(a.len[i] \u0026lt;= b.len[i]) return false; 22 } 23 return true; 24} 25void printBox(const vector\u0026lt;int\u0026gt; \u0026amp;prevNesting, const vector\u0026lt;Box\u0026gt; \u0026amp;box, int lastbox, bool printSpace) { 26 if(lastbox == -1) return; 27 printBox(prevNesting, box, prevNesting[lastbox], true); 28 cout \u0026lt;\u0026lt; box[lastbox].id; 29 if(printSpace) cout \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 30} 31int main() { 32#ifndef ONLINE_JUDGE 33 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 34 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 35#endif 36 USE_CPPIO(); 37 int k, n; 38 while(cin \u0026gt;\u0026gt; k \u0026gt;\u0026gt; n) { 39 vector\u0026lt;Box\u0026gt; box; 40 for(int i = 0; i \u0026lt; k; ++i) { 41 int t; 42 vector\u0026lt;int\u0026gt; tmp; 43 for(int j = 0; j \u0026lt; n; ++j) { 44 cin \u0026gt;\u0026gt; t; 45 tmp.push_back(t); 46 } 47 sort(tmp.begin(), tmp.end()); 48 box.push_back({i + 1, tmp}); 49 } 50 sort(box.begin(), box.end(), boxcmp); 51 vector\u0026lt;int\u0026gt; maxNesting(k, 1), prevNesting(k, -1); 52 int maxLen = 1, lastbox = 0; 53 for(int i = 0; i \u0026lt; k; ++i) { 54 for(int j = 0; j \u0026lt; i; ++j) { 55 if(isContain(box[i], box[j])) { 56 if(maxNesting[j] + 1 \u0026gt; maxNesting[i]) { 57 maxNesting[i] = maxNesting[j] + 1; 58 prevNesting[i] = j; 59 if(maxNesting[i] \u0026gt; maxLen) { 60 maxLen = maxNesting[i]; 61 lastbox = i; 62 } 63 } 64 } 65 } 66 } 67 cout \u0026lt;\u0026lt; maxLen \u0026lt;\u0026lt; endl; 68 printBox(prevNesting, box, lastbox, false); 69 cout \u0026lt;\u0026lt; endl; 70 } 71 return 0; 72} G - Wavio Sequence 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int n, a[10005], dpI[10005], dpD[10005]; 7 8void LIS() { 9 if(n == 0) return; 10 vector\u0026lt;int\u0026gt; v; 11 v.push_back(a[0]); 12 dpI[0] = 1; 13 for(int i = 1; i \u0026lt; n; ++i) { 14 if(a[i] \u0026gt; v.back()) v.push_back(a[i]); 15 else *lower_bound(v.begin(), v.end(), a[i]) = a[i]; 16 dpI[i] = v.size(); 17 } 18} 19void LDS() { 20 if(n == 0) return; 21 vector\u0026lt;int\u0026gt; v; 22 v.push_back(a[n - 1]); 23 dpD[n - 1] = 1; 24 for(int i = n - 2; i \u0026gt;= 0; --i) { 25 if(a[i] \u0026gt; v.back()) v.push_back(a[i]); 26 else *lower_bound(v.begin(), v.end(), a[i]) = a[i]; 27 dpD[i] = v.size(); 28 } 29} 30int main() { 31#ifndef ONLINE_JUDGE 32 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 33 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 34#endif 35 USE_CPPIO(); 36 while(cin \u0026gt;\u0026gt; n) { 37 memset(dpI, 0, sizeof(dpI)); 38 memset(dpD, 0, sizeof(dpD)); 39 for(int i = 0; i \u0026lt; n; ++i) 40 cin \u0026gt;\u0026gt; a[i]; 41 LIS(); 42 LDS(); 43 int ans = 1; 44 for(int i = 0; i \u0026lt; n; ++i) 45 ans = max(min(dpI[i], dpD[i]) * 2 - 1, ans); 46 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 47 } 48 return 0; 49} H - Kids in a Grid 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6string g[30]; 7int LCS(string \u0026amp;s1, string \u0026amp;s2) { 8 vector\u0026lt;int\u0026gt; p[130]; 9 for(int i = 0; i \u0026lt; s2.size(); ++i) 10 p[s2[i]].push_back(i); 11 vector\u0026lt;int\u0026gt; v; 12 v.push_back(-1); 13 for (int i = 0; i \u0026lt; s1.size(); ++i) { 14 for (int j = p[s1[i]].size() - 1; j \u0026gt;= 0; --j) { 15 int n = p[s1[i]][j]; 16 if (n \u0026gt; v.back()) v.push_back(n); 17 else *lower_bound(v.begin(), v.end(), n) = n; 18 } 19 } 20 return v.size() - 1; 21} 22string getStr() { 23 string s, path; 24 int n, x, y; 25 cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y; 26 cin.ignore(100, \u0026#39;\\n\u0026#39;); 27 getline(cin, path); 28 int curX = x - 1, curY = y - 1; 29 s += g[curX][curY]; 30 for(int i = 0; i \u0026lt; n; ++i) { 31 if(path[i] == \u0026#39;N\u0026#39;) --curX; 32 else if(path[i] == \u0026#39;E\u0026#39;) ++curY; 33 else if(path[i] == \u0026#39;S\u0026#39;) ++curX; 34 else if(path[i] == \u0026#39;W\u0026#39;) --curY; 35 s += g[curX][curY]; 36 } 37 return s; 38} 39int main() { 40#ifndef ONLINE_JUDGE 41 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 42 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 43#endif 44 USE_CPPIO(); 45 int T; 46 cin \u0026gt;\u0026gt; T; 47 for(int i = 1; i \u0026lt;= T; ++i) { 48 int row, col; 49 cin \u0026gt;\u0026gt; row \u0026gt;\u0026gt; col; 50 string str1, str2, tmp; 51 for(int j = 0; j \u0026lt; row; ++j) cin \u0026gt;\u0026gt; g[j]; 52 str1 = getStr(); 53 str2 = getStr(); 54 int len, len1 = str1.length(), len2 = str2.length(); 55 if(len1 \u0026gt; len2) len = LCS(str2, str1); 56 else len = LCS(str1, str2); 57 cout \u0026lt;\u0026lt; \u0026#34;Case \u0026#34; \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; len1 - len \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; len2 - len \u0026lt;\u0026lt; endl; 58 } 59 return 0; 60} I - Tug of War 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6int f(vector\u0026lt;int\u0026gt; \u0026amp;w, int sum) { 7 if(w.size() == 1) return 0; 8 sort(w.begin(), w.end()); 9} 10int main() { 11#ifndef ONLINE_JUDGE 12 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 13 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 14#endif 15 USE_CPPIO(); 16 int T; 17 cin \u0026gt;\u0026gt; T; 18 while(T--) { 19 int n, w[105]; 20 long long dp[22505]; 21 cin \u0026gt;\u0026gt; n; 22 for(int i = 1; i \u0026lt;= n; ++i) cin \u0026gt;\u0026gt; w[i]; 23 long long sum = accumulate(w + 1, w + n + 1, 0LL); 24 memset(dp, 0, sizeof(dp)); 25 dp[0] = 1; 26 for(int i = 1; i \u0026lt;= n; ++i) { 27 for(int j = sum / 2; j \u0026gt;= w[i]; j--) { 28 dp[j] |= (dp[j - w[i]] \u0026lt;\u0026lt; 1); 29 } 30 } 31 if(n \u0026amp; 1) { 32 for(int i = sum / 2; i \u0026gt;= 0; --i) { 33 long long flag1 = (1LL \u0026lt;\u0026lt; (n / 2)); 34 long long flag2 = (1LL \u0026lt;\u0026lt; (n / 2 + 1)); 35 if((dp[i]\u0026amp;flag1) || (dp[i]\u0026amp;flag2)) { 36 cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sum - i \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 37 break; 38 } 39 } 40 } 41 else { 42 for(int i = sum / 2; i \u0026gt;= 0; --i) { 43 if(dp[i] \u0026amp; (1LL \u0026lt;\u0026lt; (n / 2))) { 44 cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sum - i \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 45 break; 46 } 47 } 48 } 49 if(T) cout \u0026lt;\u0026lt; endl; 50 } 51 return 0; 52} J - Arbitrage 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 4#define INF 0x3f3f3f3f 5#define NINF 0xc0c0c0c0 6void printPath(vector\u0026lt;vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026gt; \u0026amp;paths, int t, int i, int j) { 7 if(t == 0) { 8 cout \u0026lt;\u0026lt; i + 1 \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; j + 1; 9 return; 10 } 11 printPath(paths, t - 1, i, paths[t][i][j]); 12 cout \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; j + 1; 13} 14int main() { 15#ifndef ONLINE_JUDGE 16 freopen(\u0026#34;output.txt\u0026#34;, \u0026#34;w\u0026#34;, stdout); 17 freopen(\u0026#34;input.txt\u0026#34;, \u0026#34;r\u0026#34;, stdin); 18#endif 19 USE_CPPIO(); 20 int n; 21 while(cin \u0026gt;\u0026gt; n) { 22 vector\u0026lt;vector\u0026lt;double\u0026gt;\u0026gt; ct(n, vector\u0026lt;double\u0026gt;(n, 0)); 23 for(int i = 0; i \u0026lt; n; ++i) { 24 for(int j = 0; j \u0026lt; n; ++j) { 25 if(i == j) ct[i][j] = 1; 26 else cin \u0026gt;\u0026gt; ct[i][j]; 27 } 28 } 29 vector\u0026lt;vector\u0026lt;vector\u0026lt;double\u0026gt;\u0026gt;\u0026gt; values(n, vector\u0026lt;vector\u0026lt;double\u0026gt;\u0026gt;(n, vector\u0026lt;double\u0026gt;(n))); 30 vector\u0026lt;vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;\u0026gt; paths(n, vector\u0026lt;vector\u0026lt;int\u0026gt;\u0026gt;(n, vector\u0026lt;int\u0026gt;(n, -1))); 31 values[0] = ct; 32 int item = -1, itemT = -1; 33 for(int t = 1 ; t \u0026lt; n \u0026amp;\u0026amp; item == -1 ; ++t) { 34 for(int i = 0 ; i \u0026lt; n \u0026amp;\u0026amp; item == -1 ; ++i) { 35 for(int j = 0 ; j \u0026lt; n \u0026amp;\u0026amp; item == -1 ; ++j) { 36 values[t][i][j] = -1.0; 37 for(int k = 0 ; k \u0026lt; n ; ++k ) { 38 double newRate = values[t - 1][i][k] * ct[k][j]; 39 if(newRate \u0026gt; values[t][i][j]) { 40 values[t][i][j] = newRate; 41 paths[t][i][j] = k; 42 } 43 } 44 } 45 if(values[t][i][i] \u0026gt; 1.01) { 46 item = i; 47 itemT = t; 48 break; 49 } 50 } 51 } 52 if(item == -1) cout \u0026lt;\u0026lt; \u0026#34;no arbitrage sequence exists\\n\u0026#34;; 53 else { 54 printPath(paths, itemT, item, item); 55 cout \u0026lt;\u0026lt; endl; 56 } 57 } 58 return 0; 59} ","date":"2021-08-06T10:42:11+08:00","permalink":"https://blog.smallten.tk/p/star_coder-05/","title":"StarCoder2021暑訓：Week04"},{"content":"主題  圖、狀態搜尋、拓樸排序、尤拉路  題目  Virtual Judge 題目列表與提示    題目 題目需求 採用演算法 基本題     UVa 10004 無向圖的兩色著色問題 DFS/BFS 均可 V   UVa 10959 求無向無權圖上每一點和一指定點的最短距離 BFS V   UVa 572 求二維地圖上的連通塊數量 DFS/BFS 均可 V   UVa 441 給定 k 個數，由小到大列出所有包含其中 6 個數的遞增數列 DFS    UVa 567 求無向無權圖上指定兩點間的最短距離 BFS (或用後面會學到的 Floyd-Warshall 演算法) V   UVa 10926 給有向無環圖，求最大一棵樹的節點數減1 DFS/BFS 均可    SPOJ PT07Z 求數直徑（經典題） DFS/BFS 均可    UVa 10603 倒水問題（給三個水瓶，倒出指定水量） BFS 變型 (帶權最短路)    UVa 10305 給定 n 個工作的兩兩先後關係，輸出任一個合法的工作完成順序。 拓樸排序 V   UVa 1423 給定一數列中 Sij = a[i]+…+a[j] 的正負號，輸出一組符合正負號關係的數列。(有趣，值得思考！) 拓樸排序    UVa 302 給定一個無向圖和指定起點，列印尤拉路。 尤拉路    UVa 10441 給定一堆字串，問如何將它們頭尾相連串起來。 尤拉路       參考作法 A - Bicoloring 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3using namespace std; 4bool a[205][205]; 5int p[205]; 6bool dfs(int x, int n, int color) { 7 if(p[x]) { 8 if(p[x] != color) return false; 9 else return true; 10 } 11 p[x] = color; 12 bool ans = true; 13 for(int i = x + 1; i \u0026lt; n; ++i) { 14 if(a[x][i]) ans = dfs(i, n, (color == 1) ? 2 : 1); 15 } 16 return ans; 17} 18int main() { 19 USE_CPPIO(); 20 int n, e; 21 while(cin \u0026gt;\u0026gt; n \u0026amp;\u0026amp; n) { 22 cin \u0026gt;\u0026gt; e; 23 memset(a, false, sizeof(a)); 24 memset(p, 0x00, sizeof(p)); 25 int u, v; 26 for(int i = 0; i \u0026lt; e; ++i) { 27 cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; 28 a[u][v] = a[v][u] = true; 29 } 30 if(dfs(0, n, 1)) cout \u0026lt;\u0026lt; \u0026#34;BICOLORABLE.\\n\u0026#34;; 31 else cout \u0026lt;\u0026lt; \u0026#34;NOT BICOLORABLE.\\n\u0026#34;; 32 } 33 return 0; 34} B - The Party, Part I 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3using namespace std; 4bool a[1005][1005]; 5int d[1005], n, m; 6void bfs() { 7 for(int i = 0; i \u0026lt; n; ++i) d[i] = n; 8 d[0] = 0; 9 queue\u0026lt;int\u0026gt; q; 10 q.push(0); 11 while (!q.empty()) { 12 int now = q.front(); 13 q.pop(); 14 for(int i = 0; i \u0026lt; n; ++i) { 15 if(a[now][i] \u0026amp;\u0026amp; d[i] \u0026gt; d[now] + 1) { 16 d[i] = d[now] + 1; 17 q.push(i); 18 } 19 } 20 } 21} 22int main() { 23 USE_CPPIO(); 24 int T; 25 cin \u0026gt;\u0026gt; T; 26 while(T--) { 27 memset(a, false, sizeof(a)); 28 cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; 29 int u, v; 30 for(int i = 0; i \u0026lt; m; ++i) { 31 cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; 32 a[u][v] = a[v][u] = true; 33 } 34 bfs(); 35 for(int i = 1; i \u0026lt; n; ++i) 36 cout \u0026lt;\u0026lt; d[i] \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 37 if(T) cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 38 } 39 return 0; 40} C - Oil Deposits 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int n, m, ans; 7char g[105][105]; 8int d[8][2] = {{1, 1}, {1, 0}, {1, -1}, {0, -1}, {-1, -1}, {-1, 0}, {-1, 1}, {0, 1}}; 9void dfs(int x, int y) { 10 g[x][y] = \u0026#39;*\u0026#39;; 11 for(int i = 0; i \u0026lt; 8; ++i) { 12 int dx = x + d[i][0], dy = y + d[i][1]; 13 if(dx \u0026gt;= 0 \u0026amp;\u0026amp; dx \u0026lt; n \u0026amp;\u0026amp; dy \u0026gt;= 0 \u0026amp;\u0026amp; dy \u0026lt; m \u0026amp;\u0026amp; g[dx][dy] == \u0026#39;@\u0026#39;) { 14 dfs(dx, dy); 15 } 16 } 17} 18int main() { 19 USE_CPPIO(); 20 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026amp;\u0026amp; n \u0026amp;\u0026amp; m) { 21 ans = 0; 22 string s; 23 for(int i = 0; i \u0026lt; n; ++i) { 24 cin \u0026gt;\u0026gt; s; 25 for(int j = 0; j \u0026lt; m; ++j) g[i][j] = s[j]; 26 } 27 for(int i = 0; i \u0026lt; n; ++i) { 28 for(int j = 0; j \u0026lt; m; ++j) { 29 if(g[i][j] == \u0026#39;@\u0026#39;) { 30 dfs(i, j); 31 ++ans; 32 } 33 } 34 } 35 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 36 } 37 return 0; 38} D - Lotto 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int n, a[15], ans[15]; 7bool u[15]; 8void dfs(int x, int t) { 9 if(t == 6) { 10 for(int i = 0; i \u0026lt; 5; ++i) 11 cout \u0026lt;\u0026lt; ans[i]\u0026lt;\u0026lt;\u0026#39; \u0026#39;; 12 cout \u0026lt;\u0026lt; ans[5] \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 13 return; 14 } 15 for(int i = x; i \u0026lt; n; ++i) { 16 if(!u[i]) { 17 u[i] = true; 18 ans[t] = a[i]; 19 dfs(i + 1, t + 1); 20 u[i] = false; 21 } 22 } 23} 24int main() { 25 USE_CPPIO(); 26 int cnt = 0; 27 while(cin \u0026gt;\u0026gt; n \u0026amp;\u0026amp; n) { 28 if(cnt++) cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 29 memset(u, false, sizeof(u)); 30 for(int i = 0; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; a[i]; 31 dfs(0, 0); 32 } 33 return 0; 34} E - Risk 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int main() { 7 int cnt = 0, g[21][21], n; 8 while(cin \u0026gt;\u0026gt; n) { 9 memset(g, INF, sizeof(g)); 10 for(int i = 1; i \u0026lt;= 19; ++i) { 11 int a; 12 for(int j = 0; j \u0026lt; n; ++j) { 13 cin \u0026gt;\u0026gt; a; 14 g[i][a] = g[a][i] = 1; 15 } 16 if(i \u0026lt; 19) cin \u0026gt;\u0026gt; n; 17 } 18 for(int k = 1; k \u0026lt;= 20; ++k) { 19 for(int i = 1; i \u0026lt;= 20; ++i) { 20 for(int j = 1; j \u0026lt;= 20; ++j) { 21 g[i][j] = min(g[i][j], g[i][k] + g[k][j]); 22 } 23 } 24 } 25 cout \u0026lt;\u0026lt; \u0026#34;Test Set #\u0026#34; \u0026lt;\u0026lt; ++cnt \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 26 cin \u0026gt;\u0026gt; n; 27 for(int i = 0; i \u0026lt; n; ++i) { 28 int a, b; 29 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; 30 printf(\u0026#34;%2d to %2d: %d\\n\u0026#34;, a, b, g[a][b]); 31 } 32 cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 33 } 34 return 0; 35} F - How Many Dependencies? 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int n, a[105]; 7vector\u0026lt;int\u0026gt; g[105]; 8int dfs(int x) { 9 if(a[x] != -1) return a[x]; 10 int t = 0; 11 for(auto i : g[x]) 12 t = max(t, dfs(i)); 13 return a[x] = t + 1; 14} 15int main() { 16 USE_CPPIO(); 17 int n; 18 while (cin \u0026gt;\u0026gt; n \u0026amp;\u0026amp; n) { 19 for(int i = 0; i \u0026lt; 105; ++i) g[i].clear(); 20 memset(a, -1, sizeof(a)); 21 for(int i = 1; i \u0026lt;= n; ++i) { 22 int t, b; 23 cin \u0026gt;\u0026gt; t; 24 while(t--) { 25 cin \u0026gt;\u0026gt; b; 26 g[i].push_back(b); 27 } 28 } 29 int ans = 1, most = 0; 30 for(int i = 1; i \u0026lt;= n; ++i) { 31 int t = dfs(i); 32 if(t \u0026gt; most) { 33 most = t; 34 ans = i; 35 } 36 } 37 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 38 } 39 return 0; 40} G - Longest path in a tree 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int n, ans = 0; 7vector\u0026lt;int\u0026gt; g[10005]; 8bool vis[10005]; 9int dfs(int x, int y) { 10 int ans1 = 0, ans2 = 0; 11 for(auto i : g[x]) { 12 if(i == y) continue; 13 int t = dfs(i, x); 14 if(t \u0026gt; ans1) { 15 ans2 = ans1; 16 ans1 = t; 17 } 18 else if(t \u0026gt; ans2) { 19 ans2 = t; 20 } 21 } 22 if(ans1 + ans2 \u0026gt; ans) ans = ans1 + ans2; 23 return ans1 + 1; 24} 25int main() { 26 USE_CPPIO(); 27 cin \u0026gt;\u0026gt; n; 28 for(int i = 1; i \u0026lt; n; ++i) { 29 int u, v; 30 cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; 31 g[u].push_back(v); 32 g[v].push_back(u); 33 } 34 dfs(1, 0); 35 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 36 return 0; 37} H - Fill 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6struct node { 7 int v[3], dist; 8 bool operator\u0026lt;(const node \u0026amp;r) const { 9 return dist \u0026gt; r.dist; 10 } 11}; 12int main() { 13 USE_CPPIO(); 14 int T; 15 cin \u0026gt;\u0026gt; T; 16 while(T--) { 17 int cup[3], d, ans[205]; 18 bool vis[205][205]; 19 cin \u0026gt;\u0026gt; cup[0] \u0026gt;\u0026gt; cup[1] \u0026gt;\u0026gt; cup[2] \u0026gt;\u0026gt; d; 20 memset(vis, false, sizeof(vis)); 21 memset(ans, -1, sizeof(ans)); 22 priority_queue\u0026lt;node\u0026gt; pq; 23 pq.push({0, 0, cup[2], 0}); 24 vis[0][0] = true; 25 while(!pq.empty()) { 26 node now = pq.top(); 27 pq.pop(); 28 for(int i = 0; i \u0026lt; 3; ++i) { 29 int t = now.v[i]; 30 if(ans[t] \u0026lt; 0 || now.dist \u0026lt; ans[t]) 31 ans[t] = now.dist; 32 } 33 if(ans[d] \u0026gt; 0) break; 34 for(int i = 0; i \u0026lt; 3; ++i) { 35 for(int j = 0; j \u0026lt; 3; ++j) { 36 if(i != j) { 37 if(now.v[i] == 0 || now.v[j] == cup[j]) continue; 38 int amount = min(cup[j], now.v[i] + now.v[j]) - now.v[j]; 39 node tmp = now; 40 tmp.dist = now.dist + amount; 41 tmp.v[i] -= amount; 42 tmp.v[j] += amount; 43 if(!vis[tmp.v[0]][tmp.v[1]]) { 44 vis[tmp.v[0]][tmp.v[1]] = true; 45 pq.push(tmp); 46 } 47 } 48 } 49 } 50 } 51 while(d \u0026gt;= 0) { 52 if(ans[d] \u0026gt;= 0) { 53 cout \u0026lt;\u0026lt; ans[d] \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; d \u0026lt;\u0026lt; endl; 54 break; 55 } 56 --d; 57 } 58 } 59 return 0; 60} I - Ordering Tasks 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int main() { 7 USE_CPPIO(); 8 int n, m; 9 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m) { 10 if(n == 0 \u0026amp;\u0026amp; m == 0) break; 11 int indeg[105] = {0}, cnt = 0; 12 vector\u0026lt;int\u0026gt; g[101]; 13 for(int i = 0; i \u0026lt; m; ++i) { 14 int u, v; 15 cin \u0026gt;\u0026gt; u \u0026gt;\u0026gt; v; 16 g[u].push_back(v); 17 ++indeg[v]; 18 } 19 for(int i = 1; i \u0026lt;= n; ++i) { 20 if(indeg[i] == 0) { 21 if(cnt \u0026lt; n) cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 22 ++cnt; 23 indeg[i] = -1; 24 for(auto j : g[i]) --indeg[j]; 25 } 26 if(cnt == n) break; 27 else if(i == n) i = 0; 28 } 29 cout \u0026lt;\u0026lt; endl; 30 } 31 return 0; 32} J - Guess 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int n, indeg[15], a[15]; 7string s; 8vector\u0026lt;int\u0026gt; g[15]; 9void addEdge(int u, int v) { 10 ++indeg[v]; 11 g[u].push_back(v); 12} 13int main() { 14 USE_CPPIO(); 15 int T; 16 cin \u0026gt;\u0026gt; T; 17 while(T--) { 18 cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; s; 19 memset(indeg, 0, sizeof(indeg)); 20 for(int i = 0; i \u0026lt;= n; ++i) g[i].clear(); 21 int pos = 0; 22 for(int i = 0; i \u0026lt;= n; ++i) { 23 for(int j = i + 1; j \u0026lt;= n; ++j) { 24 if(s[pos] == \u0026#39;+\u0026#39;) addEdge(i, j); 25 else if(s[pos] == \u0026#39;-\u0026#39;) addEdge(j, i); 26 ++pos; 27 } 28 } 29 int d = 0; 30 queue\u0026lt;int\u0026gt; q; 31 for(int i = 0; i \u0026lt;= n; ++i) 32 if(indeg[i] == 0) q.push(i); 33 while(!q.empty()) { 34 int sz = q.size(); 35 for(int i = 0; i \u0026lt; sz; ++i) { 36 int f = q.front(); 37 q.pop(); 38 a[f] = d; 39 for(auto j : g[f]) { 40 --indeg[j]; 41 if(indeg[j] == 0) q.push(j); 42 } 43 } 44 ++d; 45 } 46 for(int i = 1; i \u0026lt;= n; ++i) 47 cout \u0026lt;\u0026lt; a[i] - a[i - 1] \u0026lt;\u0026lt; \u0026#34; \\n\u0026#34;[i == n]; 48 } 49 return 0; 50} K - John\u0026rsquo;s trip 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int g[50][2010], cnt[50], nRoads, nPoints, start; 7bool vis[2010]; 8stack\u0026lt;int\u0026gt; st; 9void init() { 10 nRoads = nPoints = 0; 11 while(!st.empty()) st.pop(); 12 memset(g, 0, sizeof(g)); 13 memset(cnt, 0, sizeof(cnt)); 14 memset(vis, false, sizeof(vis)); 15} 16void euler(int u) { 17 for(int v = 1; v \u0026lt;= nRoads; ++v) { 18 if(!vis[v] \u0026amp;\u0026amp; g[u][v]) { 19 vis[v] = true; 20 euler(g[u][v]); 21 st.push(v); 22 } 23 } 24} 25void solve() { 26 bool flag = false; 27 for(int i = 1; i \u0026lt; 50; ++i) { 28 if(cnt[i] % 2) { 29 flag = true; 30 break; 31 } 32 } 33 if(flag) cout \u0026lt;\u0026lt; \u0026#34;Round trip does not exist.\\n\u0026#34;; 34 else { 35 euler(start); 36 bool ff = false; 37 while(!st.empty()) { 38 if(ff) cout \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 39 cout \u0026lt;\u0026lt; st.top(); 40 st.pop(); 41 ff = true; 42 } 43 cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 44 } 45 cout \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 46} 47int main() { 48 USE_CPPIO(); 49 int x, y, z, t = 0; 50 bool flag = false; 51 init(); 52 while(cin \u0026gt;\u0026gt; x \u0026gt;\u0026gt; y) { 53 ++t; 54 if(x == 0 \u0026amp;\u0026amp; y == 0) { 55 if(flag) break; 56 flag = true; 57 t = 0; 58 solve(); 59 init(); 60 continue; 61 } 62 flag = false; 63 cin \u0026gt;\u0026gt; z; 64 if(t == 1) start = min(x, y); 65 nRoads = max(nRoads, z); 66 nPoints = max(nPoints, max(x, y)); 67 g[x][z] = y; 68 g[y][z] = x; 69 ++cnt[x]; 70 ++cnt[y]; 71 } 72 return 0; 73} L - Catenyms 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3#define INF 0x3f3f3f3f 4#define NINF 0xc0c0c0c0 5using namespace std; 6int n, dsu[26], cnt, tot, indeg[26], outdeg[26]; 7bool vis[26], used[26][1005]; 8vector\u0026lt;string\u0026gt; g[26], ans; 9void init() { 10 cnt = 1, tot = 0; 11 memset(indeg, 0, sizeof(indeg)); 12 memset(outdeg, 0, sizeof(outdeg)); 13 memset(vis, false, sizeof(vis)); 14 memset(used, false, sizeof(used)); 15 for(int i = 0; i \u0026lt; 26; ++i) { 16 g[i].clear(); 17 dsu[i] = i; 18 } 19 ans.clear(); 20} 21int Find(int x) { 22 if(dsu[x] == x) return x; 23 return dsu[x] = Find(dsu[x]); 24} 25void euler(int u) { 26 for(int i = 0; i \u0026lt; g[u].size(); ++i) { 27 int v = g[u][i][g[u][i].length() - 1] - \u0026#39;a\u0026#39;; 28 if(!used[u][i]) { 29 used[u][i] = true; 30 euler(v); 31 ans.push_back(g[u][i]); 32 } 33 } 34} 35bool solve() { 36 if(cnt != tot) return false; 37 int t = INF, odd = 0, q; 38 for(int i = 0; i \u0026lt; 26; ++i) { 39 if(g[i].size()) t = min(t, i); 40 if(outdeg[i] - indeg[i] == 1) { 41 ++odd; 42 q = i; 43 } 44 else if(indeg[i] - outdeg[i] == 1) ++odd; 45 else if(indeg[i] != outdeg[i]) return false; 46 if(odd \u0026gt; 2) return false; 47 } 48 if(!odd) euler(t); 49 else euler(q); 50 for(int i = ans.size() - 1; i \u0026gt; 0; --i) cout \u0026lt;\u0026lt; ans[i] \u0026lt;\u0026lt; \u0026#34;.\u0026#34;; 51 cout \u0026lt;\u0026lt; ans[0] \u0026lt;\u0026lt; endl; 52 return true; 53} 54int main() { 55 USE_CPPIO(); 56 int T; 57 cin \u0026gt;\u0026gt; T; 58 while(T--) { 59 init(); 60 cin \u0026gt;\u0026gt; n; 61 for(int i = 0; i \u0026lt; n; ++i) { 62 string s; 63 cin \u0026gt;\u0026gt; s; 64 int u = s[0] - \u0026#39;a\u0026#39;, v = s[s.length() - 1] - \u0026#39;a\u0026#39;; 65 if(!vis[u]) { 66 vis[u] = true; 67 ++tot; 68 } 69 if(!vis[v]) { 70 vis[v] = true; 71 ++tot; 72 } 73 ++indeg[v]; 74 ++outdeg[u]; 75 g[u].push_back(s); 76 int x = Find(u), y = Find(v); 77 if(x != y) { 78 dsu[x] = y; 79 ++cnt; 80 } 81 } 82 for(int i = 0; i \u0026lt; 26; ++i) sort(g[i].begin(), g[i].end()); 83 if(!solve()) cout \u0026lt;\u0026lt; \u0026#34;***\\n\u0026#34;; 84 } 85 return 0; 86} ","date":"2021-07-28T05:48:25+08:00","permalink":"https://blog.smallten.tk/p/star_coder-04/","title":"StarCoder2021暑訓：Week03"},{"content":" 下載 NPS Clients，並放到一個資料夾中。 下載 pkg2Zip，並將 pkg2zip.exe 放到同一個資料夾中。 執行 NPS_Browser.exe。 複製以下連結：  Games  PSV tsv http://nopaystation.com/tsv/PSV_GAMES.tsv PSM tsv http://nopaystation.com/tsv/PSM_GAMES.tsv PSX tsv http://nopaystation.com/tsv/PSX_GAMES.tsv PSP tsv http://nopaystation.com/tsv/PSP_GAMES.tsv PS3 tsv http://nopaystation.com/tsv/PS3_GAMES.tsv   DLCs:  PSV tsv http://nopaystation.com/tsv/PSV_DLCS.tsv PSP tsv http://nopaystation.com/tsv/PSP_DLCS.tsv PS3 tsv http://nopaystation.com/tsv/PS3_DLCS.tsv   Themes:  PSV tsv http://nopaystation.com/tsv/PSV_THEMES.tsv     設定 Download and unpack dir: 檔案下載後的位置。 設定 Any pkg dec tool: 路徑為 pkg2Zip.exe 的位置。 設定 Your pkg dec params: -x {pkgFile} \u0026quot;{zRifKey}\u0026quot;。 設定 HMAC key for updates: E5E278AA1EE34082A088279C83F9BBC806821C52F2AB5D2B4ABD995450355114。 設定 CompPack URL: https://gitlab.com/nopaystation_repos/nps_compati_packs/raw/master/entries.txt 設定 CompPack Patch URL: https://gitlab.com/nopaystation_repos/nps_compati_packs/raw/master/entries_patch.txt 重新啟動 NPS Browser。 下載你要的檔案，並將其放進 PSV 對應路徑中。 進入 Vita Shell，按下三角形按鈕，選擇 Refresh LiveArea  ","date":"2021-07-26T11:50:17+08:00","permalink":"https://blog.smallten.tk/p/psv-03/","title":"PlayStation Vita-03：NoPayStation Browser"},{"content":" 在 PSV 執行 Vita Shell，然後按一下 Select 按鈕，最後以 USB 連接 PC。 下載 NoNpDrm，並將 nonpdrm.skprx 放進 tai 資料夾中。 回到 PSV 的 Vita Shell 中，並到達 ux0:tai/，選擇 config.txt。 找到並移到 *KERNEL 那行，按一下三角形按鈕，選 Insert empty line。 選擇下方新增的空白行，並輸入 ux0:tai/nonpdrm.skprx，然後儲存離開。 到設定中的 HENkaku 設置，選擇 重載 taiHEN config.txt。 重新啟動 PSV。  ","date":"2021-07-26T11:46:32+08:00","permalink":"https://blog.smallten.tk/p/psv-02/","title":"PlayStation Vita-02：NoNpDrm"},{"content":" 下載 Qcma 並安裝到電腦上。 PSV 以 USB 的方式連接到 PC。 下載 Final h-encore，然後將其解壓縮，最後執行它。 點擊 Let\u0026rsquo;s Go ，然後等到 100% 完成。 回到 PSV 的檔案管理 (Content Manager)，然後選擇複製內容(Copy Content) PC to PSV，之後 Applications \u0026gt; PS Vita，最後選 h-encore 2 再按 複製(Copy) \u0026gt; OK。 拔掉 USB，執行 PSV 桌面上的 h-encore 2。 PSV 記得要連網，然後選 Install HENkaku \u0026gt; Download VitaShell \u0026gt; Exit 到設定確認系統資訊，確認成功後，再去設定 HENkaku。   之後若有重開機的話，得重新進入 h-encore 2 再離開即可。\n ","date":"2021-07-26T11:04:05+08:00","permalink":"https://blog.smallten.tk/p/psv-01/","title":"PlayStation Vita-01：H-encore 2"},{"content":"主題  STL、併查集  併查集模板 1int dsu[MAX_N]; 2void init(int num) { 3 for(int i = 0; i \u0026lt;= num; ++i) 4 dsu[i] = i; 5} 6int Find(int x) { 7 if(x == dsu[x]) return x; 8 return dsu[x] = Find(dsu[x]); 9} 10void Union(int x, int y) { 11 int a = Find(x), b = Find(y); 12 if(a != b) dsu[a] = b; 13} 題目  Virtual Judge 題目列表與提示    題目 題目需求 採用結構 優先練習     UVa 673 括號匹配與 LIFO 操作 std::stack v   UVa 442 括號匹配與 LIFO 操作 std::stack    UVa 12100 遍歷和 FIFO 操作 std::queue (加上 std::priority_queue 效率更高) v   UVa 245 取出第 n 個以及插入頭端 std::list / std::deque / std::vector    UVa 1203 插入與取出最小值 std::priority_queue v   UVa 11995 模擬 stack, queue, priority_queue std::stack, std::queue, std::priority_queue v   UVa 10583 標準併查集操作 disjoint set v   UVa 11987 併查集的變化題(值得思考) disjoint set    UVa 1665 判斷連通塊數 disjoint set    UVa 230 字串排序與搜尋 std::map / std::set v   UVa 1592 字串比較（將字串轉成數值以加快比較） std::map       參考作法 A - Parentheses Balance 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 int n; 5 cin \u0026gt;\u0026gt; n; 6 cin.ignore(100, \u0026#39;\\n\u0026#39;); 7 while(n--) { 8 string s; 9 getline(cin, s); 10 stack\u0026lt;char\u0026gt; st; 11 for(auto \u0026amp;i : s) { 12 if(i == \u0026#39;]\u0026#39;) { 13 if(!st.empty() \u0026amp;\u0026amp; st.top() == \u0026#39;[\u0026#39;) st.pop(); 14 else st.emplace(i); 15 } 16 else if(i == \u0026#39;)\u0026#39;) { 17 if(!st.empty() \u0026amp;\u0026amp; st.top() == \u0026#39;(\u0026#39;) st.pop(); 18 else st.emplace(i); 19 } 20 else st.emplace(i); 21 } 22 cout \u0026lt;\u0026lt; (st.empty() ? \u0026#34;Yes\u0026#34; : \u0026#34;No\u0026#34;) \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; 23 } 24 return 0; 25} B - Matrix Chain Multiplication 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3struct Matrix { 4 int row, col; 5}; 6int main() { 7 int n, errCnt = -1; 8 cin \u0026gt;\u0026gt; n; 9 map\u0026lt;char, Matrix\u0026gt; ma; 10 for(int i = 0; i \u0026lt; n; ++i) { 11 char name; 12 Matrix m; 13 cin \u0026gt;\u0026gt; name \u0026gt;\u0026gt; m.row \u0026gt;\u0026gt; m.col; 14 ma[name] = m; 15 } 16 string s; 17 while(cin \u0026gt;\u0026gt; s) { 18 int multiCnt = 0; 19 stack\u0026lt;Matrix\u0026gt; st; 20 for(int i = 0; i \u0026lt; s.length(); ++i) { 21 if(s[i] == \u0026#39;(\u0026#39;) continue; 22 if(s[i] != \u0026#39;)\u0026#39;) { 23 st.push(ma[s[i]]); 24 continue; 25 } 26 Matrix b = st.top(); 27 st.pop(); 28 Matrix a = st.top(); 29 st.pop(); 30 if(a.col != b.row) { 31 multiCnt = errCnt; 32 break; 33 } 34 multiCnt += a.row * b.row * b.col; 35 st.push({a.row, b.col}); 36 } 37 if(multiCnt == errCnt) cout \u0026lt;\u0026lt; \u0026#34;error\\n\u0026#34;; 38 else cout \u0026lt;\u0026lt; multiCnt \u0026lt;\u0026lt; endl; 39 } 40 return 0; 41} C - Printer Queue 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 int T; 5 cin \u0026gt;\u0026gt; T; 6 while(T--) { 7 int n, m; 8 cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; 9 deque\u0026lt;pair\u0026lt;int, int\u0026gt;\u0026gt; dq; 10 int t[10] = {0}; 11 for(int i = 0; i \u0026lt; n; ++i) { 12 int a; 13 cin \u0026gt;\u0026gt; a; 14 dq.emplace_back(a, i); 15 ++t[a]; 16 } 17 int cnt = 0; 18 int lev, idx; 19 while(true) { 20 tie(lev, idx) = dq.front(); 21 int canPop = 1; 22 for(int i = lev + 1; i \u0026lt; 10; ++i) canPop \u0026amp;= (t[i] == 0); 23 if(canPop) { 24 ++cnt; 25 --t[lev]; 26 if(idx == m) break; 27 dq.pop_front(); 28 } 29 else { 30 dq.push_back(dq.front()); 31 dq.pop_front(); 32 } 33 } 34 cout \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; 35 } 36 return 0; 37} D - Uncompress 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 vector\u0026lt;string\u0026gt; vs; 5 string buf; 6 while (getline(cin, buf) \u0026amp;\u0026amp; buf[0] != \u0026#39;0\u0026#39;) { 7 string s; 8 for (int i = 0; buf[i]; ++ i) { 9 if (isalpha(buf[i])) { 10 s = \u0026#34;\u0026#34;; 11 while (isalpha(buf[i])) 12 s.insert(s.end(), buf[i ++]); 13 vs.push_back(s); 14 --i; 15 cout \u0026lt;\u0026lt; s; 16 } 17 else if (isdigit(buf[i])) { 18 int value = 0; 19 while (isdigit(buf[i])) 20 value = value * 10 + buf[i ++] - \u0026#39;0\u0026#39;; 21 s = vs[vs.size() - value]; 22 vs.erase(vs.end() - value); 23 vs.push_back(s); 24 --i; 25 cout \u0026lt;\u0026lt; s; 26 } 27 else printf(\u0026#34;%c\u0026#34;, buf[i]); 28 } 29 puts(\u0026#34;\u0026#34;); 30 } 31 return 0; 32} E - Argus 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3using tiii = tuple\u0026lt;int, int, int\u0026gt;; // time, query_num, period 4int main() { 5 priority_queue\u0026lt;tiii, vector\u0026lt;tiii\u0026gt;, greater\u0026lt;tiii\u0026gt;\u0026gt; pq; 6 string s; 7 int q, p, cur, n; 8 while(cin \u0026gt;\u0026gt; s \u0026amp;\u0026amp; s != \u0026#34;#\u0026#34; \u0026amp;\u0026amp; cin \u0026gt;\u0026gt; q \u0026gt;\u0026gt; p) 9 pq.push(make_tuple(p, q, p)); 10 cin \u0026gt;\u0026gt; n; 11 while(n--) { 12 tie(cur, q, p) = pq.top(); 13 pq.pop(); 14 cout \u0026lt;\u0026lt; q \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; 15 pq.push(make_tuple(cur + p, q, p)); 16 } 17 return 0; 18} F - I Can Guess the Data Structure! 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3using namespace std; 4int main() { 5 USE_CPPIO(); 6 int n; 7 while(cin \u0026gt;\u0026gt; n) { 8 bool flag[3]; 9 memset(flag, true, sizeof(flag)); 10 stack\u0026lt;int\u0026gt; st; 11 queue\u0026lt;int\u0026gt; qu; 12 priority_queue\u0026lt;int\u0026gt; pq; 13 int a, b; 14 for(int i = 0; i \u0026lt; n; ++i) { 15 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; 16 if(a == 1) { 17 st.push(b); 18 qu.push(b); 19 pq.push(b); 20 } 21 else if(a == 2) { 22 if(flag[0]) { 23 if(!st.empty() \u0026amp;\u0026amp; st.top() == b) st.pop(); 24 else flag[0] = false; 25 } 26 if(flag[1]) { 27 if(!qu.empty() \u0026amp;\u0026amp; qu.front() == b) qu.pop(); 28 else flag[1] = false; 29 } 30 if(flag[2]) { 31 if(!pq.empty() \u0026amp;\u0026amp; pq.top() == b) pq.pop(); 32 else flag[2] = false; 33 } 34 } 35 } 36 if((flag[0] \u0026amp;\u0026amp; flag[1])||(flag[1] \u0026amp;\u0026amp; flag[2])||(flag[2] \u0026amp;\u0026amp; flag[0])) 37 cout\u0026lt;\u0026lt;\u0026#34;not sure\\n\u0026#34;; 38 else if(flag[0]) cout\u0026lt;\u0026lt;\u0026#34;stack\\n\u0026#34;; 39 else if(flag[1]) cout\u0026lt;\u0026lt;\u0026#34;queue\\n\u0026#34;; 40 else if(flag[2]) cout\u0026lt;\u0026lt;\u0026#34;priority queue\\n\u0026#34;; 41 else cout\u0026lt;\u0026lt;\u0026#34;impossible\\n\u0026#34;; 42 } 43 return 0; 44} G - Ubiquitous Religions 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3using namespace std; 4int dsu[50005]; 5void init(int n) { 6 for(int i = 0; i \u0026lt; n; ++i) 7 dsu[i] = i; 8} 9int Find(int x) { 10 if(x == dsu[x]) return x; 11 return dsu[x] = Find(dsu[x]); 12} 13bool Union(int x, int y) { 14 int a = Find(x); 15 int b = Find(y); 16 if(a == b) return false; 17 dsu[a] = b; 18 return true; 19} 20int main() { 21 USE_CPPIO(); 22 int n, m, Case = 1; 23 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m \u0026amp;\u0026amp; n \u0026amp;\u0026amp; m) { 24 init(n); 25 int cnt = n; 26 for(int i = 0; i \u0026lt; m; ++i) { 27 int a, b; 28 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; 29 if(Union(a - 1, b - 1)) --cnt; 30 } 31 cout \u0026lt;\u0026lt; \u0026#34;Case \u0026#34; \u0026lt;\u0026lt; Case++ \u0026lt;\u0026lt; \u0026#34;: \u0026#34; \u0026lt;\u0026lt; cnt \u0026lt;\u0026lt; endl; 32 } 33 return 0; 34} H - Almost Union-Find 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3using namespace std; 4int dsu[200005], num[200005], sum[200005]; 5void init(int n) { 6 for(int i = 0; i \u0026lt;= n; ++i) { 7 dsu[i] = dsu[i + n] = i + n; 8 sum[i] = sum[i + n] = i; 9 num[i] = num[i + n] = 1; 10 } 11} 12int Find(int x) { 13 if(x == dsu[x]) return x; 14 return dsu[x] = Find(dsu[x]); 15} 16int main() { 17 USE_CPPIO(); 18 int n, m; 19 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m) { 20 init(n); 21 for(int i = 0; i \u0026lt; m; ++i) { 22 int t, a, b; 23 cin \u0026gt;\u0026gt; t \u0026gt;\u0026gt; a; 24 if(t == 1) { 25 cin \u0026gt;\u0026gt; b; 26 int x = Find(a); 27 int y = Find(b); 28 if(x == y) continue; 29 dsu[x] = y; 30 num[y] += num[x]; 31 sum[y] += sum[x]; 32 } 33 else if(t == 2) { 34 cin \u0026gt;\u0026gt; b; 35 int x = Find(a); 36 int y = Find(b); 37 if(x == y) continue; 38 dsu[a] = y; 39 --num[x]; 40 ++num[y]; 41 sum[x] -= a; 42 sum[y] += a; 43 } 44 else if(t == 3) { 45 int x = Find(a); 46 cout \u0026lt;\u0026lt; num[x] \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; sum[x] \u0026lt;\u0026lt; \u0026#34;\\n\u0026#34;; 47 } 48 } 49 } 50 return 0; 51} I - Islands 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3using namespace std; 4int n, m, total, dsu[1000010]; 5int dx[4] = {0, 0, 1, -1}; 6int dy[4] = {1, -1, 0, 0}; 7struct Point { 8 int x, y, id, height; 9}; 10vector\u0026lt;Point\u0026gt; vp; 11bool cmp(Point a, Point b) { 12 return a.height \u0026gt; b.height; 13} 14int Find(int t) { 15 if(t == -1) return -1; 16 if(dsu[t] == t) return t; 17 return dsu[t] = Find(dsu[t]); 18} 19void add(int idx) { 20 int id = vp[idx].id; 21 dsu[id] = id; 22 ++total; 23 for(int i = 0; i \u0026lt; 4; ++i) { 24 int x = vp[idx].x + dx[i]; 25 int y = vp[idx].y + dy[i]; 26 if(x \u0026gt;= 0 \u0026amp;\u0026amp; x \u0026lt; n \u0026amp;\u0026amp; y \u0026gt;= 0 \u0026amp;\u0026amp; y \u0026lt; m) { 27 int id2 = x * m + y; 28 int root_id2 = Find(id2); 29 if(root_id2 == -1) continue; 30 if(root_id2 != id) { 31 --total; 32 dsu[root_id2] = id; 33 } 34 } 35 } 36} 37int main() { 38 USE_CPPIO(); 39 int T; 40 cin \u0026gt;\u0026gt; T; 41 while(T--) { 42 cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; m; 43 vp.clear(); 44 vector\u0026lt;int\u0026gt; h; 45 for(int i = 0; i \u0026lt; n; ++i) { 46 for(int j = 0; j \u0026lt; m; ++j) { 47 int t; 48 cin \u0026gt;\u0026gt; t; 49 Point p = {i, j, i * m + j, t}; 50 vp.push_back(p); 51 dsu[i * m + j] = -1; 52 } 53 } 54 sort(vp.begin(), vp.end(), cmp); 55 int q; 56 cin \u0026gt;\u0026gt; q; 57 for(int i = 0; i \u0026lt; q; ++i) { 58 int t; 59 cin \u0026gt;\u0026gt; t; 60 h.push_back(t); 61 } 62 int idx = 0; 63 total = 0; 64 for(int i = h.size() - 1; i \u0026gt;= 0; --i) { 65 while(idx \u0026lt; vp.size() \u0026amp;\u0026amp; h[i] \u0026lt; vp[idx].height) 66 add(idx++); 67 h[i] = total; 68 } 69 for(auto i : h) cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34;; 70 cout \u0026lt;\u0026lt; endl; 71 } 72 return 0; 73} J - Borrowers 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3using namespace std; 4map\u0026lt;string, string\u0026gt; mss; 5struct ReturnBook { 6 string title; 7 string author; 8}; 9bool cmp(string b1, string b2) { 10 string a1 = mss[b1]; 11 string a2 = mss[b2]; 12 if(a1 != a2) return a1 \u0026lt; a2; 13 return b1 \u0026lt; b2; 14} 15bool cmp_return(ReturnBook b1, ReturnBook b2) { 16 if(b1.author != b2.author) return b1.author \u0026lt; b2.author; 17 return b1.title \u0026lt; b2.title; 18} 19int main() { 20 USE_CPPIO(); 21 string s; 22 vector\u0026lt;string\u0026gt; shelve; 23 vector\u0026lt;ReturnBook\u0026gt; vRB; 24 while(getline(cin, s)) { 25 if(s == \u0026#34;END\u0026#34;) break; 26 int idx = s.find(\u0026#34;\\\u0026#34;by\u0026#34;); 27 string title = s.substr(0, idx + 1); 28 string author = s.substr(idx + 4); 29 mss[title] = author; 30 shelve.push_back(title); 31 } 32 sort(shelve.begin(), shelve.end(), cmp); 33 while(getline(cin, s)) { 34 if(s == \u0026#34;END\u0026#34;) break; 35 if(s == \u0026#34;SHELVE\u0026#34;) { 36 sort(vRB.begin(), vRB.end(), cmp_return); 37 for(int i = 0; i \u0026lt; vRB.size(); ++i) { 38 auto it = lower_bound(shelve.begin(), shelve.end(), vRB[i].title, cmp); 39 if(it == shelve.begin()) cout \u0026lt;\u0026lt; \u0026#34;Put \u0026#34; \u0026lt;\u0026lt; vRB[i].title \u0026lt;\u0026lt; \u0026#34; first\u0026#34; \u0026lt;\u0026lt; endl; 40 else { 41 int t = it - shelve.begin() - 1; 42 cout \u0026lt;\u0026lt; \u0026#34;Put \u0026#34; \u0026lt;\u0026lt; vRB[i].title \u0026lt;\u0026lt; \u0026#34; after \u0026#34; \u0026lt;\u0026lt; shelve[t] \u0026lt;\u0026lt; endl; 43 } 44 shelve.insert(it, vRB[i].title); 45 } 46 vRB.clear(); 47 cout \u0026lt;\u0026lt; \u0026#34;END\\n\u0026#34;; 48 } 49 else { 50 int idx = s.find(\u0026#34;\\\u0026#34;\u0026#34;); 51 string title = s.substr(idx); 52 if(s[0] == \u0026#39;B\u0026#39;) { 53 auto it = lower_bound(shelve.begin(), shelve.end(), title, cmp); 54 shelve.erase(it); 55 } 56 else vRB.push_back({title, mss[title]}); 57 } 58 } 59 return 0; 60} K - Database 1#include \u0026lt;bits/stdc++.h\u0026gt;2#define USE_CPPIO() ios_base::sync_with_stdio(0); cin.tie(0) 3using namespace std; 4map\u0026lt;string, int\u0026gt; ID; 5int idx = 1; 6int StrID(string str) { 7 if(ID[str]) return ID[str]; 8 return ID[str] = idx++; 9} 10int main() { 11 USE_CPPIO(); 12 int row, col; 13 while(cin \u0026gt;\u0026gt; row \u0026gt;\u0026gt; col) { 14 cin.get(); 15 int IDtable[row + 2][col + 2]; 16 string table[row + 2][col + 2], tmp; 17 for(int i = 1; i \u0026lt;= row; ++i) { 18 getline(cin, tmp); 19 char *pch = strtok((char*)tmp.c_str(), \u0026#34;,\u0026#34;); 20 int j = 1; 21 while(pch) { 22 table[i][j++] = pch; 23 pch = strtok(NULL, \u0026#34;,\u0026#34;); 24 } 25 } 26 for(int i = 1; i \u0026lt;= row; ++i) { 27 for(int j = 1; j \u0026lt;= col; ++j) { 28 IDtable[i][j] = StrID(table[i][j]); 29 } 30 } 31 bool flag = true; 32 for(int i = 1; i \u0026lt;= col \u0026amp;\u0026amp; flag; ++i) { 33 for(int j = i + 1; j \u0026lt;= col \u0026amp;\u0026amp; flag; ++j) { 34 map\u0026lt;int, int\u0026gt; mii; 35 for(int k = 1; k \u0026lt;= row \u0026amp;\u0026amp; flag; ++k) { 36 int idx = IDtable[k][i] * 100000 + IDtable[k][j]; 37 if(mii.count(idx)) { 38 cout \u0026lt;\u0026lt; \u0026#34;NO\u0026#34; \u0026lt;\u0026lt; endl; 39 cout \u0026lt;\u0026lt; mii[idx] \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; k \u0026lt;\u0026lt; endl; 40 cout \u0026lt;\u0026lt; i \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; j \u0026lt;\u0026lt; endl; 41 flag = false; 42 } 43 else mii[idx] = k; 44 } 45 } 46 } 47 if(flag) cout \u0026lt;\u0026lt; \u0026#34;YES\u0026#34; \u0026lt;\u0026lt; endl; 48 } 49 return 0; 50} ","date":"2021-07-24T08:26:57+08:00","permalink":"https://blog.smallten.tk/p/star_coder-03/","title":"StarCoder2021暑訓：Week02"},{"content":"前情提要  一開始時，學長們在 Messenger 的群組裡問有沒有人要參加這場新手向的 CTF 競賽，我是沒有選擇參加的 (因為我從來沒有深入的去玩、學習這方面的東東，可以算是個純正的小萌新~~)，然而到最後因為人數的關係學長們組成了兩隊，然後還能再多 2 個人，因此我也加入想說去見見世面也好。(其中還得感謝學長們的鼓勵，以及願意帶我這個什麼都不會的新手)😆😆\n競賽簡介  R2S CTF 競賽網站 Online Qualification : 7/16 - 18 Flag 樣式：R2S{}  成績  All: 7 / 81 Offical Only: 4 / 43      解題紀錄  以下是我解的題目，其他題目我無能為力，就只能看有沒有學長寫題解了(顆顆  Welcome  Welcome to R2S CTF o((\u0026gt;ω\u0026lt; ))o  在 R2S Discord 群組中的 challenge-announcement 頻道中，有黑黑的訊息要點開就能到 Flag 了。 一開始覺得很酷，事後知道了這叫暴雷標籤 ||暴雷訊息||。    Forensics  Headache  這題依照 CRC32 找出圖片的長寬，並用 hex editor 把 png 的 header 改成正確的就行了。    Crypto  Base1024  這題將那堆 emoji 解碼後就得到 Flag 了。 ecoji、ecoji 線上工具   BiGGG_RSA  一開始不知道怎麼分解 N，對於 Factordb 來說也太大了，解不出來。之後到了這個 primefac-fork，再寫個簡單的程式就解決了。   Seeeeed  也是 RSA 相關題。    Misc  Time Traveler  nc time-traveler.misc.quals.r2s.tw 5487 依照格式輸入並計算一下，弄到 1937 年就有 Flag 了。   Fat7z  依照給的 code 反著寫，就能得到 Flag 了。    Reverse  What is this!?  JavaSript aaencode 將言文字轉回 js，再執行裡面的 function 就行了。    Web  Chatroom  chatroom 一樣是 JavaSript aaencode 複製下來，F12 丟 console，Flag 就噴出來了。    心得  這次是我第一次參加 CTF 相關的競賽，雖然幾乎都不太會寫，主要的題目還都是學長們解開的，但這場比賽中我依然學到了不少新的技巧，也對 CTF 有了更多的興趣，未來繼續努力吧!\n","date":"2021-07-19T14:03:54+08:00","permalink":"https://blog.smallten.tk/p/experience-01/","title":"2021 R2S CTF"},{"content":"主題  搜尋、排序、貪心  題目  Virtual Judge  參考作法 A - Flip Sort  題目說明：  給一堆數字，輸出要交換(只能相鄰交換)多少次，才能由小到大排好。   解題思路：  Bubble sort   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 int n, a[1005]; 5 while(cin \u0026gt;\u0026gt; n) { 6 int ans = 0; 7 for(int i = 0; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; a[i]; 8 for(int i = 0; i \u0026lt; n; ++i) { 9 for(int j = n - 1; j \u0026gt; i; --j) { 10 if(a[j] \u0026lt; a[j - 1]) { 11 swap(a[j], a[j - 1]); 12 ++ans; 13 } 14 } 15 } 16 cout \u0026lt;\u0026lt; \u0026#34;Minimum exchange operations : \u0026#34; \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; \u0026#39;\\n\u0026#39;; 17 } 18 return 0; 19}   B - Age Sort  題目說明：  給一堆數字，由小到大排序。   解題思路：  std::sort() 小心 Presentation error   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 ios::sync_with_stdio(0); 5 cin.tie(0); 6 int n; 7 bool flag; 8 while (cin \u0026gt;\u0026gt; n \u0026amp;\u0026amp; n) { 9 int a[n]; 10 for(int i = 0; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; a[i]; 11 sort(a, a + n); 12 flag = false; 13 for(auto i : a) { 14 if(flag) cout \u0026lt;\u0026lt; \u0026#39; \u0026#39;; 15 cout \u0026lt;\u0026lt; i; 16 flag = true; 17 } 18 cout \u0026lt;\u0026lt; endl; 19 } 20 return 0; 21}   C - Conformity  題目說明：  輸出最多人選擇課的程組合的人數，若是最多的有多個，將人數相加。   解題思路：  將每行的課程排序後，再丟入 map 中統計。   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 ios::sync_with_stdio(0); 5 cin.tie(0); 6 int n; 7 while(cin \u0026gt;\u0026gt; n \u0026amp;\u0026amp; n) { 8 int maxNum = 0, total = 0; 9 map\u0026lt;string, int\u0026gt; msi; 10 vector\u0026lt;string\u0026gt; vs; 11 string input, line; 12 while(n--) { 13 line.clear(); 14 vs.clear(); 15 for(int i = 0; i \u0026lt; 5; ++i) { 16 cin \u0026gt;\u0026gt; input; 17 vs.push_back(input); 18 } 19 sort(vs.begin(), vs.end()); 20 for(int i = 0; i \u0026lt; 5; ++i) line += vs[i]; 21 ++msi[line]; 22 } 23 for(auto it = msi.begin(); it != msi.end(); ++it) 24 if(it-\u0026gt;second \u0026gt; maxNum) maxNum = it -\u0026gt; second; 25 for(auto it = msi.begin(); it != msi.end(); ++it) 26 if(it-\u0026gt;second == maxNum) total += maxNum; 27 cout \u0026lt;\u0026lt; total \u0026lt;\u0026lt; endl; 28 } 29 return 0; 30}   D - Guessing Game  題目說明：  依照題目模擬，看有沒有說謊。   解題思路：  模擬操作，最後看 right on 的值有沒有在區間中。   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 int n; 5 while(scanf(\u0026#34;%d \u0026#34;, \u0026amp;n) != EOF \u0026amp;\u0026amp; n != 0) { 6 int s = 1, e = 10; 7 string str; 8 while(getline(cin, str) \u0026amp;\u0026amp; str != \u0026#34;right on\u0026#34;) { 9 if(str == \u0026#34;too high\u0026#34;) e = min(e, n - 1); 10 else if(str == \u0026#34;too low\u0026#34;) s = max(s, n + 1); 11 scanf(\u0026#34;%d \u0026#34;, \u0026amp;n); 12 } 13 if(n \u0026gt;= s \u0026amp;\u0026amp; n \u0026lt;= e) cout \u0026lt;\u0026lt; \u0026#34;Stan may be honest\\n\u0026#34;; 14 else cout \u0026lt;\u0026lt; \u0026#34;Stan is dishonest\\n\u0026#34;; 15 } 16 return 0; 17}   E - Ancient Cipher  題目說明：  判斷第一行字串能不能依照題目的轉換方式變成第二行字串。   解題思路：  先紀錄彼此字母出現的次數並排序，再比對排序後數值是否相同即可。   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 string s1, s2; 5 while(cin \u0026gt;\u0026gt; s1 \u0026gt;\u0026gt; s2) { 6 int a[26] = {0}, b[26] = {0}; 7 for(auto i : s1) ++a[i - \u0026#39;A\u0026#39;]; 8 for(auto i : s2) ++b[i - \u0026#39;A\u0026#39;]; 9 sort(a, a + 26); 10 sort(b, b + 26); 11 bool flag = true; 12 for(int i = 0; i \u0026lt; 26; ++i) { 13 if(a[i] != b[i]) { 14 cout \u0026lt;\u0026lt; \u0026#34;NO\\n\u0026#34;; 15 flag = false; 16 break; 17 } 18 } 19 if(flag) cout \u0026lt;\u0026lt; \u0026#34;YES\\n\u0026#34;; 20 } 21 return 0; 22}   F - Bridge Hands  題目說明：  依照給定方位的下一個人開始給牌，最後輸出要依照順序排列。   解題思路：  就模擬發牌並排序吧。   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3using pcc = pair\u0026lt;char, char\u0026gt;; 4char c; 5vector\u0026lt;pcc\u0026gt; v[4]; 6bool cmp(pcc a, pcc b) { 7 int ta[2], tb[2]; 8 char cc[4] = {\u0026#39;C\u0026#39;, \u0026#39;D\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;H\u0026#39;}; 9 char ct[13] = {\u0026#39;2\u0026#39;, \u0026#39;3\u0026#39;, \u0026#39;4\u0026#39;, \u0026#39;5\u0026#39;, \u0026#39;6\u0026#39;, \u0026#39;7\u0026#39;, \u0026#39;8\u0026#39;, \u0026#39;9\u0026#39;, \u0026#39;T\u0026#39;, \u0026#39;J\u0026#39;, \u0026#39;Q\u0026#39;, \u0026#39;K\u0026#39;, \u0026#39;A\u0026#39;}; 10 for(int i = 0; i \u0026lt; 4; ++i) { 11 if(a.first == cc[i]) ta[0] = i; 12 if(b.first == cc[i]) tb[0] = i; 13 } 14 for(int i = 0; i \u0026lt; 13; ++i) { 15 if(a.second == ct[i]) ta[1] = i; 16 if(b.second == ct[i]) tb[1] = i; 17 } 18 if(ta[0] \u0026lt; tb[0]) return true; 19 else if(ta[0] \u0026gt; tb[0]) return false; 20 else { 21 if(ta[1] \u0026lt; tb[1]) return true; 22 else return false; 23 } 24} 25void sortCard() { 26 for(int i = 0; i \u0026lt; 4; ++i) { 27 sort(v[i].begin(), v[i].end(), cmp); 28 } 29} 30void printCard() { 31 char oc[4] = {\u0026#39;S\u0026#39;, \u0026#39;W\u0026#39;, \u0026#39;N\u0026#39;, \u0026#39;E\u0026#39;}; 32 char cc[4] = {\u0026#39;N\u0026#39;, \u0026#39;E\u0026#39;, \u0026#39;S\u0026#39;, \u0026#39;W\u0026#39;}; 33 int ic[4][4] = {{1, 2, 3, 0}, {0, 1, 2, 3}, {3, 0, 1, 2}, {2, 3, 0, 1}}; 34 int t; 35 for(int i = 0; i \u0026lt; 4; ++i) { 36 if(cc[i] == c) { 37 t = i; 38 break; 39 } 40 } 41 for(int i = 0; i \u0026lt; 4; ++i) { 42 cout \u0026lt;\u0026lt; oc[i] \u0026lt;\u0026lt; \u0026#34;:\u0026#34;; 43 for(auto it : v[ic[t][i]]) 44 cout \u0026lt;\u0026lt; \u0026#34; \u0026#34; \u0026lt;\u0026lt; it.first \u0026lt;\u0026lt; it.second; 45 cout \u0026lt;\u0026lt; endl; 46 } 47} 48int main() { 49 while(cin \u0026gt;\u0026gt; c \u0026amp;\u0026amp; c != \u0026#39;#\u0026#39;) { 50 string s; 51 int temp = 0; 52 for(int i = 0; i \u0026lt; 4; ++i) v[i].clear(); 53 for(int i = 0; i \u0026lt; 2; ++i) { 54 cin \u0026gt;\u0026gt; s; 55 int len = s.size(); 56 for(int j = 0; j \u0026lt; len; j += 2) { 57 v[temp % 4].push_back({s[j], s[j + 1]}); 58 ++temp; 59 } 60 } 61 sortCard(); 62 printCard(); 63 } 64 return 0; 65}   G - Vito\u0026rsquo;s Family  題目說明：  選出一個數，並計算彼此距離和最小的值。   解題思路：  中位數算距離和。   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 int T; 5 cin \u0026gt;\u0026gt; T; 6 while(T--) { 7 int n; 8 cin \u0026gt;\u0026gt; n; 9 int a[n]; 10 for(int i = 0; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; a[i]; 11 sort(a, a + n); 12 int mid = a[n / 2], ans = 0; 13 for(int i = 0; i \u0026lt; n; ++i) ans += abs(a[i] - mid); 14 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 15 } 16 return 0; 17}   H - Shoemaker\u0026rsquo;s Problem  題目說明：  找出能使罰金最少的工作順序。   解題思路：  貪心法 依照 (罰金 / 時間) 的值，大到小排序。   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3using pdi = pair\u0026lt;double, int\u0026gt;; 4bool cmp(pdi a, pdi b) { 5 return a.first \u0026gt; b.first; 6} 7int main() { 8 int T; 9 cin \u0026gt;\u0026gt; T; 10 while(T--) { 11 int n; 12 cin \u0026gt;\u0026gt; n; 13 vector\u0026lt;pdi\u0026gt; v; 14 for(int i = 1; i \u0026lt;= n; ++i) { 15 int a, b; 16 cin \u0026gt;\u0026gt; a \u0026gt;\u0026gt; b; 17 v.push_back({(b * 1.0 / a), i}); 18 } 19 sort(v.begin(), v.end(), cmp); 20 bool flag = false; 21 for(auto it : v) { 22 if(flag) cout \u0026lt;\u0026lt; \u0026#39; \u0026#39;; 23 cout \u0026lt;\u0026lt; it.second; 24 flag = true; 25 } 26 cout \u0026lt;\u0026lt; endl; 27 if(T) cout \u0026lt;\u0026lt; endl; 28 } 29 return 0; 30}   I - The Bus Driver Problem  題目說明：  公車工作安排，輸出雇主最少需要支付的加班費。   解題思路：  先依照早晚排序，頭尾配對(最大配最小)，最後計算加班費的金額。   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3int main() { 4 int n, d, r; 5 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; d \u0026gt;\u0026gt; r \u0026amp;\u0026amp; n \u0026amp;\u0026amp; d \u0026amp;\u0026amp; r) { 6 int morning[n], night[n]; 7 for(int i = 0; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; morning[i]; 8 for(int i = 0; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; night[i]; 9 sort(morning, morning + n); 10 sort(night, night + n); 11 int ans = 0; 12 for(int i = 0; i \u0026lt; n; ++i) { 13 if(morning[i] + night[n - i - 1] \u0026gt; d) 14 ans += ((morning[i] + night[n - i - 1] - d) * r); 15 } 16 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 17 } 18 return 0; 19}   J - Watering Grass  題目說明：  計算最少需要多少個噴水頭才能覆蓋整個區域，若都不行輸出 -1。   解題思路：  先轉換成一維。 貪心法 區間覆蓋   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3using pdd = pair\u0026lt;double, double\u0026gt;; 4bool cmp(pdd a, pdd b) { 5 if(a.first == b.first) return a.second \u0026gt; b.second; 6 else return a.first \u0026lt; b.first; 7} 8int main() { 9 int n; 10 double l, w; 11 while(cin \u0026gt;\u0026gt; n \u0026gt;\u0026gt; l \u0026gt;\u0026gt; w) { 12 w /= 2; 13 double p, r; 14 vector\u0026lt;pdd\u0026gt; v; 15 for(int i = 0; i \u0026lt; n; ++i) { 16 cin \u0026gt;\u0026gt; p \u0026gt;\u0026gt; r; 17 if(r \u0026gt; w) { 18 double dd = sqrt(r * r - w * w); 19 v.push_back({p - dd, p + dd}); 20 } 21 } 22 sort(v.begin(), v.end(), cmp); 23 int ans = 0; 24 double right = 0.0; 25 for(int i = 0; i \u0026lt; v.size(); ++i) { 26 if(v[i].first \u0026gt; right) break; 27 for(int j = i + 1; j \u0026lt; v.size() \u0026amp;\u0026amp; v[j].first \u0026lt;= right; ++j) { 28 if(v[j].second \u0026gt; v[i].second) i = j; 29 } 30 ++ans; 31 right = v[i].second; 32 if(right \u0026gt;= l) break; 33 } 34 if(right \u0026gt;= l) cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 35 else cout \u0026lt;\u0026lt; \u0026#34;-1\\n\u0026#34;; 36 } 37 return 0; 38}   K - Ultra-QuickSort  題目說明：  輸出最少要交換的數量。   解題思路：  用 merge sort 求逆序數對。 大佬們要用 BIT 去解也行。   程式碼： 1#include \u0026lt;bits/stdc++.h\u0026gt;2using namespace std; 3long long ans = 0; 4long long a[500005]; 5void mergeSort(long long *arr, int len) { 6 if(len \u0026lt;= 1) return; 7 int leftLen = len / 2, rightLen = len - leftLen; 8 long long *leftArr = arr, *rightArr = arr + leftLen; 9 mergeSort(leftArr, leftLen); 10 mergeSort(rightArr, rightLen); 11 static long long tmp[500005]; 12 long long tmpLen = 0, l = 0, r = 0; 13 while(l \u0026lt; leftLen \u0026amp;\u0026amp; r \u0026lt; rightLen) { 14 if(leftArr[l] \u0026lt; rightArr[r]) tmp[tmpLen++] = leftArr[l++]; 15 else { 16 tmp[tmpLen++] = rightArr[r++]; 17 ans += leftLen - l; 18 } 19 } 20 while(l \u0026lt; leftLen) tmp[tmpLen++] = leftArr[l++]; 21 while(r \u0026lt; rightLen) tmp[tmpLen++] = rightArr[r++]; 22 for(int i = 0; i \u0026lt; tmpLen; ++i) arr[i] = tmp[i]; 23} 24int main() { 25 int n; 26 while(cin \u0026gt;\u0026gt; n \u0026amp;\u0026amp; n) { 27 ans = 0; 28 for(int i = 0; i \u0026lt; n; ++i) cin \u0026gt;\u0026gt; a[i]; 29 mergeSort(a, n); 30 cout \u0026lt;\u0026lt; ans \u0026lt;\u0026lt; endl; 31 } 32 return 0; 33}   ","date":"2021-07-15T00:07:54+08:00","permalink":"https://blog.smallten.tk/p/star_coder-02/","title":"StarCoder2021暑訓：Week01"},{"content":"簡介    週次 主題 題目     一 搜尋、排序、貪心 Link   二 STL、併查集 Link   三 圖、狀態搜尋、拓樸排序、尤拉路 Link   四 動態規劃 Link   五 最小生成樹 Link   六     七     八      學習資源 第一週 - 搜尋、排序、貪心  線上教材    教材 說明     師大碼賽客：排序/貪心/二分搜 子緯學長的教學講義（詳盡的新手入門）   北一女培訓：排序 六種排序法的程式與簡介   建中培訓 (第4/6/7節) 4.排序STL/6.貪心/7.二分搜   台大資訊之芽：貪心 貪心法與理論/Huffman Tree   成大競程培訓 (單元5/6) 5.二分搜/6.三種排序     線上影片    影片 說明     台大孔令傑老師：二分搜尋法 7 分鐘學會二分搜尋法   看舞蹈學排序法 以舞蹈呈現各種排序法的運作過程   台大陳縕儂老師：貪心 50 分鐘的正規演算法課程 (CLRS課本)     演算法視覺化    演算法      線性搜尋與二分搜尋 以動畫呈現兩種搜尋法的運作過程   排序 以動畫呈現六種排序演算法的運作過程      第二週 - STL、併查集  內容大綱    資料結構 簡要說明 C++ 內建     陣列 在記憶體中連續，支援隨機存取以及 O(1) 插入尾端 std::vector   字串 以 ‘\\0’ 結尾的字元陣列 std::string   串列 linked list 支援 O(1) 的插入與刪除 std::list   堆疊 stack 支援後進先出 (LIFO) 的存取模式 std::stack   佇列 queue 支援先進先出 (FIFO) 的存取模式 std::queue   堆積 heap (優先隊列 priority_queue) 支援 O(logN) 的插入和 O(logN) 取出最大/小值 std::priority_queue   併查集 disjoint set 有效率地合併兩個集合、有效率地查詢兩個元素是否屬於同一集合 無。模板   平衡搜尋樹 記錄 (鍵, 值) 對應關係，支援 O(logN) 的插入和查詢 std::map   平衡搜尋樹 實現「集合」，支援 O(logN) 的插入和查詢 std::set     線上教材    教材 說明     師大碼賽客：基礎資料結構/STL 品新學長的教學講義（詳盡的STL語法示範與題目解說）   板中培訓：STL STL語法   建中培訓 (第3節) STL語法   北一女培訓：樹/二元樹/Heap/BST 樹狀結構投影片   北一女培訓：併查集(disjoint set) 併查集投影片   成大競程培訓 (單元2/3/4) 資結/STL/樹/圖     演算法視覺化    資料結構 說明     堆積 (heap) 最小堆積的插入與取值動畫（圖形結構與陣列內容）：推薦！   併查集 併查集的 union/find 操作動畫（圖形結構與陣列內容）：推薦！      第三週 - 圖、狀態搜尋、拓樸排序、尤拉路  線上教材    教材 說明     師大碼賽客：狀態搜尋 仲軒學長的教學講義（手把手教學與題目解說）   師大碼賽客：基礎圖論 健愷學長的教學講義（有拓樸序和尤拉路）   台大資訊之芽：圖 圖的實作/搜尋/二分圖判定   建中培訓 (第 1/2/5 節) 第5節有拓樸排序   成大培訓 (單元 4)：圖/DFS/BFS 有一些練習題     線上影片    影片 說明     台大陳縕儂老師：圖 40 分鐘學圖的概念、實作與一筆畫問題   台大陳縕儂老師：BFS 60 分鐘（主要講證明）   台大陳縕儂老師：DFS/連通/拓樸排序 60 分鐘     演算法視覺化    演算法 說明     BFS 搭配樹狀圖/陣列實作/串列實作：推薦！   DFS 搭配樹狀圖/陣列實作/串列實作：推薦！   連通 (connected component) 搭配樹狀圖/陣列實作/串列實作   拓樸排序 搭配樹狀圖/陣列實作/串列實作      第四週 - 動態規劃  線上教材    教材 說明     師大碼賽客：基礎 DP 品新學長的教學講義（涵蓋重要經典題型與題解）   台大資訊之芽：DP 概念、LIS/LCS、零錢/背包 三段講義   成大培訓 (單元 9)：DP (背包/LIS/LCS) 有一些練習題   sa072686 的筆記 有很多習題與解答。     線上影片    影片 說明     台大陳縕儂老師：DP 概念 20 分鐘影片：以費氏數列解釋 DP 概念   台大陳縕儂老師：矩陣連乘 (區間 DP) 30 分鐘     演算法視覺化    演算法 說明     LIS O(n2) 程式步進動畫   LCS O(n2) 程式步進動畫   背包 O(NW) 程式步進動畫      第五週 - 最小生成樹  線上教材    教材 說明     師大碼賽客：MST 智鈞學長的教學講義與題解（本集也包含拓撲排序和尤拉路）   成大培訓 (單元 11)：Graph 速成、有一些練習題   演算法筆記：生成樹 師大資工最有名的個人網站XD     線上影片    影片 說明     資訊之芽：最小生成樹 30分鐘     演算法視覺化    演算法 說明     Kruskal’s 搭配樹狀圖/陣列實作/串列實作：推薦！   Kruskal’s 搭配程式碼   Prim’s 搭配樹狀圖/陣列實作/串列實作：推薦！   Prim’s 搭配程式碼      ","date":"2021-07-14T22:52:11+08:00","permalink":"https://blog.smallten.tk/p/star_coder-01/","title":"StarCoder2021暑訓"},{"content":" linuxlist.h  1#pragma once 2 3struct list_head { 4 struct list_head *next, *prev; 5}; 6 7#define LIST_HEAD_INIT(name) { \u0026amp;(name), \u0026amp;(name) } 8 9#define LIST_HEAD(name) struct list_head name = LIST_HEAD_INIT(name) 10 11/* 12* Insert a new entry between two known consecutive entries. 13* 14* This is only for internal list manipulation where we know 15* the prev/next entries already! 16*/ 17static inline void __list_add(struct list_head *new, 18 struct list_head *prev, 19 struct list_head *next) { 20 next-\u0026gt;prev = new; 21 new-\u0026gt;next = next; 22 new-\u0026gt;prev = prev; 23 prev-\u0026gt;next = new; 24} 25 26/** 27* list_add - add a new entry 28* @new: new entry to be added 29* @head: list head to add it after 30* 31* Insert a new entry after the specified head. 32* This is good for implementing stacks. 33*/ 34static inline void list_add(struct list_head *new, struct list_head *head) { 35 __list_add(new, head, head-\u0026gt;next); 36} 37 38 39/** 40* list_add_tail - add a new entry 41* @new: new entry to be added 42* @head: list head to add it before 43* 44* Insert a new entry before the specified head. 45* This is useful for implementing queues. 46*/ 47static inline void list_add_tail(struct list_head *new, struct list_head *head) { 48 __list_add(new, head-\u0026gt;prev, head); 49} 50 51/* 52* Delete a list entry by making the prev/next entries 53* point to each other. 54* 55* This is only for internal list manipulation where we know 56* the prev/next entries already! 57*/ 58static inline void __list_del(struct list_head * prev, struct list_head * next) { 59 next-\u0026gt;prev = prev; 60 prev-\u0026gt;next = next; 61} 62 63/** 64* list_del - deletes entry from list. 65* @entry: the element to delete from the list. 66* Note: list_empty() on entry does not return true after this, the entry is 67* in an undefined state. 68*/ 69static inline void __list_del_entry(struct list_head *entry) { 70 if (entry == NULL) 71 return; 72 73 __list_del(entry-\u0026gt;prev, entry-\u0026gt;next); 74} 75 76static inline void list_del(struct list_head *entry) { 77 __list_del_entry(entry); 78 entry-\u0026gt;next = NULL; 79 entry-\u0026gt;prev = NULL; 80} 81 82/** 83* list_empty - tests whether a list is empty 84* @head: the list to test. 85*/ 86static inline int list_empty(const struct list_head *head) { 87 return head -\u0026gt; next == head; 88} 89 90#define offsetof(TYPE, MEMBER) ((size_t)\u0026amp;((TYPE *)0)-\u0026gt;MEMBER) 91 92#define container_of(ptr, type, member) ({\t\\ 93void *__mptr = (void *)(ptr);\t\\ 94((type *)(__mptr - offsetof(type, member))); }) 95 96/** 97* list_entry - get the struct for this entry 98* @ptr:\tthe \u0026amp;struct list_head pointer. 99* @type:\tthe type of the struct this is embedded in. 100* @member:\tthe name of the list_head within the struct. 101*/ 102#define list_entry(ptr, type, member) \\ 103container_of(ptr, type, member) 104 105/** 106* list_first_entry - get the first element from a list 107* @ptr:\tthe list head to take the element from. 108* @type:\tthe type of the struct this is embedded in. 109* @member:\tthe name of the list_head within the struct. 110* 111* Note, that list is expected to be not empty. 112*/ 113#define list_first_entry(ptr, type, member) \\ 114list_entry((ptr)-\u0026gt;next, type, member) 115 116/** 117* list_last_entry - get the last element from a list 118* @ptr:\tthe list head to take the element from. 119* @type:\tthe type of the struct this is embedded in. 120* @member:\tthe name of the list_head within the struct. 121* 122* Note, that list is expected to be not empty. 123*/ 124#define list_last_entry(ptr, type, member) \\ 125list_entry((ptr)-\u0026gt;prev, type, member) 126 127/** 128* list_for_each\t-\titerate over a list 129* @pos:\tthe \u0026amp;struct list_head to use as a loop cursor. 130* @head:\tthe head for your list. 131*/ 132#define list_for_each(pos, head) \\ 133for (pos = (head)-\u0026gt;next; pos != (head); pos = pos-\u0026gt;next) 134 135/** 136* list_for_each_prev\t-\titerate over a list backwards 137* @pos:\tthe \u0026amp;struct list_head to use as a loop cursor. 138* @head:\tthe head for your list. 139*/ 140#define list_for_each_prev(pos, head) \\ 141for (pos = (head)-\u0026gt;prev; pos != (head); pos = pos-\u0026gt;prev)  main.c  1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdlib.h\u0026gt;3#include \u0026lt;stdint.h\u0026gt;4#include \u0026lt;time.h\u0026gt;5#include \u0026#34;linuxlist.h\u0026#34;6typedef struct _sCharacter { 7 int32_t id; 8 char name[32]; 9 int32_t hp; 10 int32_t mp; 11 int32_t exp; 12 int32_t atk; 13 int32_t def; 14 int32_t ats; 15 int32_t adf; 16 int32_t spd; 17 18 struct list_head list; 19} sCharacter; 20sCharacter *allocCharacter(int32_t id) { 21 sCharacter *newComer = calloc(1, sizeof(sCharacter)); 22 newComer-\u0026gt;id = id; 23 newComer-\u0026gt;name[0] = rand() % 26 + \u0026#39;A\u0026#39;; 24 for(int32_t j = 1 ; j \u0026lt; 6 ; j++) 25 newComer-\u0026gt;name[j] = rand() % 26 + \u0026#39;a\u0026#39;; 26 newComer-\u0026gt;hp = rand() % 100 + 1; 27 newComer-\u0026gt;mp = rand() % 100 + 1; 28 newComer-\u0026gt;exp = rand() % 100 + 1; 29 newComer-\u0026gt;atk = rand() % 100 + 1; 30 newComer-\u0026gt;def = rand() % 100 + 1; 31 newComer-\u0026gt;ats = rand() % 100 + 1; 32 newComer-\u0026gt;adf = rand() % 100 + 1; 33 newComer-\u0026gt;spd = rand() % 100 + 1; 34 35 return newComer; 36} 37void printCharacter(sCharacter *one) { 38 printf(\u0026#34;%04d) \u0026#34;, one-\u0026gt;id); 39 printf(\u0026#34;%8s \u0026#34;, one-\u0026gt;name); 40 for(int32_t *ptr = \u0026amp;(one-\u0026gt;hp); ptr \u0026lt;= \u0026amp;(one-\u0026gt;spd); ptr++) 41 printf(\u0026#34;%3d \u0026#34;, *ptr); 42 printf(\u0026#34;\\n\u0026#34;); 43 return; 44} 45int main() { 46 LIST_HEAD(char_list_head); 47 srand(time(0)); 48 for(int32_t i = 0 ; i \u0026lt; 1000 ; i++) { 49 sCharacter *newComer = allocCharacter(i + 1); 50 list_add(\u0026amp;(newComer-\u0026gt;list), \u0026amp;char_list_head); 51 } 52 struct list_head *listptr = NULL; 53 list_for_each(listptr, \u0026amp;char_list_head) { 54 sCharacter *cptr = list_entry(listptr, sCharacter, list); 55 printCharacter(cptr); 56 } 57 /* 58list_for_each_prev(listptr, \u0026amp;char_list_head) { 59sCharacter *cptr = list_entry(listptr, sCharacter, list); 60printCharacter(cptr); 61} 62*/ 63 return 0; 64} ","date":"2021-07-13T22:25:50+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_2-08/","title":"程式設計(二)-08：Linux List"},{"content":"Predefined Macros Standard Predefined Macros 1#include \u0026lt;stdio.h\u0026gt;2int main() { 3 printf(\u0026#34;line: %d \\n\u0026#34;, __LINE__); 4 printf(\u0026#34;file: %s \\n\u0026#34;, __FILE__); 5 printf(\u0026#34;function: %s \\n\u0026#34;, __FUNCTION__); // gcc 6 printf(\u0026#34;function: %s \\n\u0026#34;, __func__); // C99 7 printf(\u0026#34;time: %s \\n\u0026#34;, __TIME__); 8 printf(\u0026#34;date: %s \\n\u0026#34;, __DATE__); 9 printf(\u0026#34;STDC: %d \\n\u0026#34;, __STDC__); 10 printf(\u0026#34;STDC_VERSION: %ld \\n\u0026#34;, __STDC_VERSION__); 11 printf(\u0026#34;TIMESTAMP: %s \\n\u0026#34;, __TIMESTAMP__); 12 return 0; 13}  我們可以怎麼使用這些 Macros ?  fprintf(stderr, \u0026quot;Internal␣error: at %s, line %d. ver %s %s\u0026quot;, __FILE__, __LINE__, __DATE__, __TIME__); Define when Compiling  gcc -D__DEBUG__ debug.c  1#include \u0026lt;stdio.h\u0026gt;2int main() { 3 printf(\u0026#34;Hello World!!\\n\u0026#34;); 4#ifdef __DEBUG__ 5 printf(\u0026#34;debug!!\\n\u0026#34;); 6#endif 7 return 0; 8}    Other GCC Predefined MACROs  Common Predefined Macros    Comparing Unsigned Integers  When comparisons between signed and unsigned integers, C will force the signed type to unsigned. C99 and C11 section 6.3.1.8. It is hard to debug since it looks so nature.  Call Functions at Program Termination atexit int atexit(void (*function)(void));\n Register a Function to be Called at Normal Process Termination The atexit() function registers the given function to be called at normal process termination, either via exit(3) or via return from the program’s main(). Functions so registered are called in the reverse order of their registration; no arguments are passed. The atexit() function returns the value 0 if successful; otherwise it returns a nonzero value.  1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdlib.h\u0026gt;3void foo(void) { 4 printf(\u0026#34;Goodbye Foo!\\n\u0026#34;); 5} 6void bar(void) { 7 printf(\u0026#34;Goodbye Bar!\\n\u0026#34;); 8} 9int main(int argc, wchar_t* argv[]) { 10 atexit(bar); 11 atexit(foo); 12 return 0; 13} system and more System: Execute a Shell Command int system(const char *command);\n The system() library function uses fork(2) to create a child process that executes the shell command specified in command. system() returns after the command has been completed.  fork  fork() creates a new process by duplicating the calling process. This is an important function. However, I will not talk too much about this function but you will learn more in System Programming.      system() is a blockingfunction. 1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdlib.h\u0026gt;3int main() { 4 system(\u0026#34;while true; do echo \u0026#39;Hit CTRL+C\u0026#39;; sleep 1; done\u0026#34;); 5 return 0; 6}  The system() returns -1 means your system cannot fork another process instead of your command fails. You can try a command to delete a non-existing file.   Every system call is independent.  So you cannot setup an environment variable and hope other other system calls use this variable.    popen FILE *popen(const char *command, const char *type);\n The popen() function opens a process by creating a pipe, forking, and invoking the shell. The popen() function returns NULL if the fork(2) or pipe(2) calls fail, or if it cannot allocate memory. 別忘了使用 pclose.  1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdlib.h\u0026gt;3#include \u0026lt;stdint.h\u0026gt;4int main() { 5 char buffer[512]; 6 FILE *pPing = NULL; 7 uint32_t counter = 0; 8 pPing = popen(\u0026#34;ping -c 4 www.google.com\u0026#34;, \u0026#34;r\u0026#34;); 9 if(pPing == NULL) { 10 printf(\u0026#34;error end\\n\u0026#34;); 11 exit(1); 12 } 13 while(fgets(buffer, 512, pPing)) { 14 counter++; 15 printf(\u0026#34;--- %d ---\\n\u0026#34;, counter); 16 printf(\u0026#34;%s\u0026#34;, buffer); 17 } 18 pclose(pPing); 19 return 0; 20} assert  In computer programming, an assertion is a statement that a predicate(Boolean-valued function, i.e. a true-false expression) is always true at that point in code execution. It can help a programmer read the code, help a compiler compile it, or help the program detect its own defects. If the assertion check is not in fact true, an assertion failure, the program considers itself to be brokenand typically deliberately crashes or throws an assertion failure exception.   void assert(scalar expression);\n The macro assert() prints an error message to standard error and terminates the program by calling abort(3) if expression is false. The purpose of this macro is to help programmers find bugs in their programs.  1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;assert.h\u0026gt;3int main() { 4 FILE *fd; 5 fd = fopen (\u0026#34;file.txt\u0026#34;, \u0026#34;r\u0026#34;); 6 assert (fd); 7 fclose (fd); 8 return 0; 9}  我可以簡單的使用 if-else 去確認並回傳值。那為什麼還要使用 assert?  這取決於您是否可以優雅地處理錯誤。   Note:  一般來說，assert 被用在開發階段。 當發佈時，請移除所有 assert。    qsort void qsort(void *base, size_t nmemb, size_t size, int (*compar)(const void *, const void *));\n The qsort() function sorts an array with nmemb elements of size size. The base argument points to the start of the array. The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second. If two members compare as equal, their order in the sorted array is undefined.  1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdlib.h\u0026gt;3 4int values[] = {88, 56, 100, 2, 25}; 5int cmpfunc (const void * a, const void * b) { 6 return (*(int*)a - *(int*)b); 7} 8int main() { 9 int n; 10 printf(\u0026#34;Before sorting the list is:\u0026#34;); 11 for(n = 0 ; n \u0026lt; 5; n++) 12 printf(\u0026#34;%d \u0026#34;, values[n]); 13 qsort(values, 5, sizeof(int), cmpfunc); 14 printf(\u0026#34;After sorting the list is:\u0026#34;); 15 for( n = 0 ; n \u0026lt; 5; n++ ) 16 printf(\u0026#34;%d \u0026#34;, values[n]); 17 return 0; 18} libcurl  安裝: sudo apt-get install libcurl4 libcurl4-openssl-dev 使用: Example codes 編譯: gcc -I curl-7.63.0/include -L curl-7.63.0/lib/.libs/ opendata.c -lcurl (需依照情況自行修改)  Makefile: 1CFLAGS = -O3 -Wall 2INCLUDE = -I curl-7.63.0/include 3LIB = -L curl-7.63.0/lib/.libs/ 4all: opendata.c 5 gcc ${CFLAGS} ${INCLUDE} ${LIB} opendata.c -o opendata -lcurl 6clean: 7 rm -f opendata     ","date":"2021-07-13T21:39:10+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_2-07/","title":"程式設計(二)-07：Some Tricks"},{"content":"Preprocessor 預處理器  在編譯器將您的源代碼編譯為組語前，還有一個稱為預處理的附加階段。 Objective: Produce a source code file with preprocessing commands properly sorted out.   Preprocessor commands are known as Directives. Preprocessor provides certain features, which are called preprocessor directives. Preprocessor directive 以 # 為開頭。(例如：#include \u0026lt;stdio.h\u0026gt;) Preprocessor directives 可以被放在程式中的任何地方。但建議放在開頭，並且每個必須獨立一行。   1#include \u0026lt;stdio.h\u0026gt;2#define MACRO_DEMO 123 3int main() { 4 printf(\u0026#34;demo:␣%d\\n\u0026#34;, MACRO_DEMO); 5 return 0; 6}  以 gcc -E main.c 查看預處理後的狀態。  Macro 巨集  #define is known as macro expansion. General Form: #define macro_template macro_expansion  Macro Expansion  Preprocessor searches for macro definition. After finding macro definition, it searches the whole program for macro_template. Replaceevery macro_template with macro_expansion.  Replacement will not occur if the template is in a quoted string.   Notes:  通常 macro_template 會使用大寫字母 不要使用分號 ;      為什麼要用巨集?  為了寫出更高效率的程式。 提高程式的可讀性。 定義的巨集名稱可作為其他定義的一部分。   巨集可以像函式一樣擁有 arguments。 Notes：  在定義巨集時，參數和名稱之間不允許有空格。 Macro expansions 應該用括號括起來。 使用 \\ 將巨集拆分為多行。    Macro vs. Function Macro  單純替換 雖然你可能沒感覺，但比函式更快。  Function  傳遞參數 -\u0026gt; 執行 -\u0026gt; 回傳結果 支援遞迴  inline Functions  inline is a CPP keyword. C includes this keyword from C99. Though GNU C (and some other compilers) had inline functions long before standard C. Comparison:  inline is just a suggestion. inline will check types.   I will not talk too much about this keyword since it is different from CPP. I do not want to mislead you. If you are interested in this topic, please read here.  File Inclusion  Why File Inclusion?  Divide a program in multiple files.  Each file contains related functions. How to classify functions. Up to you.   Some functions or macros are required in lot of programs.  Put them in a file. Make them a library. Include them when you need them.     What does Inclusion Mean?  Nothing but simply copy and paste. Nested Inclusionis supported.    Conditional Compilation  Write one code to run on different environments.  #if: if. #else: else. #elif: else if. #endif: end if. #ifdef: if defined. #ifndef: if not defined.    ifdef and endif 1#ifdef macroname 2 statement sequence. 3#endif  如果 macroname 被定義了，那麼 #ifdef 和 #endif 之間的程式將被執行。 範例： 1#ifndef TEST_H 2#define TEST_H 3... 4#endif  但也可用 #pragma once      gcc -D OS_LINUX os_dependent.c -D: Predefine name as a macro, with definition 1. So one code can be executed on different OSs. What you need to do is to build your code with different definitions. This is a very useful technique. Let’s see a real case (cJSON).    請自行去了解 # 及 ## 在巨集中的作用。  ","date":"2021-07-13T20:47:06+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_2-06/","title":"程式設計(二)-06：Macro"},{"content":"Program Argument argc, argv 1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdlib.h\u0026gt;3#include \u0026lt;stdint.h\u0026gt;4int main(int argc, char *argv[]) { 5 printf(\u0026#34;argc: %d\\n\u0026#34;, argc); 6 for(int32_t i = 0 ; i \u0026lt; argc ; i++) 7 printf(\u0026#34;argv[%d]: %s\\n\u0026#34;, i, argv[i]); 8 return 0; 9}  誰呼叫了 main 函式? 誰提供了 argc 和 argv 到 main 函式? Is main() the actual starting entry point?  No! Actually, the process start from _start which is defined in crt1.o. 等等\u0026hellip; 我並沒有使用 crt1.o 呀! 實際上是有的。請查看 gcc -v $ nm /usr/lib/x86_64-linux-gnu/crt1.o   Simplified C Linking Process   main() 是如何取得 argc, argv 的?  Actually, _start will prepare argc and argv first. Then _start will register main function to __libc_start_main. _start will call __libc_start_main and __libc_start_main will call main. More details will be described in Assembly.    getopt int getopt(int argc, char * const argv[], const char *optstring);\n The getopt() function parses the command-line arguments. Its arguments argc and argv are the argument count and array as passed to the main() function on program invocation. An element of argv that starts with ’-’ (and is not exactly ”-” or ”–”) is an option element. The characters of this element (aside from the initial ’-’) are option characters. If getopt() is called repeatedly, it returns successively each of the option characters from each of the option elements. 提醒：這是一個 POSIX 標準而不是 C 標準。 extern 變數 1extern char *optarg; 2extern int optind, opterr, optopt;  這意味著我們可以在程式中使用這些變數。    1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdlib.h\u0026gt;3#include \u0026lt;stdint.h\u0026gt;4#include \u0026lt;unistd.h\u0026gt;5 6int main(int argc, char *argv[]) { 7 int32_t c = 0; 8 while((c = getopt(argc, argv, \u0026#34;ab:\u0026#34;)) != -1) { 9 switch(c) { 10 case \u0026#39;a\u0026#39;: 11 printf( \u0026#34;option: -a\\n\u0026#34; ); 12 break; 13 case \u0026#39;b\u0026#39;: 14 printf( \u0026#34;option: -b, %s\\n\u0026#34;, optarg ); 15 case \u0026#39;?\u0026#39;: 16 printf( \u0026#34;option: ?\\n\u0026#34; ); 17 break; 18 default: 19 printf( \u0026#34;option: unknown\\n\u0026#34; ); 20 break; 21 } 22 } 23 return 0; 24}  optstring  optstring 是一個包含合法選項字符的字符串。 Example: \u0026quot;abc\u0026quot; implies supporting -a, -b, -c. -ab, -bc, -ac, -abc are also supported. 如果這樣的字符後跟一個冒號，則意味著該選項需要一個參數。 optarg 為參數值。   回傳值  如果成功找到選項，則 getopt() 回傳選項字符。 如果所有命令行選項都已解析，則 getopt() 回傳 -1。 如果 getopt() 遇到不在 optstring 中的選項字符，則返回 '?'。 如果 getopt() 遇到缺少參數的選項，則返回值取決於 optstring 中的第一個字符：  如果是':'，則返回':'； 否則返回'?'。      getopt_long int getopt_long(int argc, char * const argv[], const char *optstring, const struct option *longopts, int *longindex);\n The getopt_long() function works like getopt() except that it also accepts long options, started with two dashes. If the program accepts only long options, then optstring should be specified as an empty string (””), not NULL. Long option names may be abbreviated if the abbreviation is unique or is an exact match for some defined option. A long option may take a parameter, of the form –arg=param or –arg param. If longindex is not NULL, it points to a variable which is set to the index of the long option relative to longopts. struct option 1struct option { 2 const char *name; 3 int has_arg; 4 int *flag; 5 int val; 6};  name: the name of the long option. has_arg:  0: no arguments. 1: required arguments. 2: optional arguments.   flag: specifies how results are returned for a long option. val: the value to return, or to load into the variable pointed to by flag.    1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdlib.h\u0026gt;3#include \u0026lt;stdint.h\u0026gt;4#include \u0026lt;unistd.h\u0026gt;5#include \u0026lt;getopt.h\u0026gt;6 7struct option long_options[] = { 8 {\u0026#34;all\u0026#34;, 0, NULL, \u0026#39;a\u0026#39;}, 9 {\u0026#34;break\u0026#34;, 0, NULL, \u0026#39;b\u0026#39;}, 10 {\u0026#34;cancel\u0026#34;, 1, NULL, \u0026#39;c\u0026#39;}, 11 {0, 0, 0, 0}, 12}; 13 14int main(int argc, char *argv[]) { 15 int32_t c = 0, index = 0; 16 while((c = getopt_long(argc, argv, \u0026#34;abc:\u0026#34;, long_options, \u0026amp;index)) != -1) { 17 printf(\u0026#34;index: %d\\n\u0026#34;, index); 18 switch(c) { 19 case \u0026#39;a\u0026#39;: 20 printf( \u0026#34;option: -a\\n\u0026#34; ); 21 break; 22 case \u0026#39;b\u0026#39;: 23 printf( \u0026#34;option: -b\\n\u0026#34; ); 24 break; 25 case \u0026#39;c\u0026#39;: 26 printf( \u0026#34;option: -c, %s\\n\u0026#34;, optarg ); 27 break; 28 case \u0026#39;?\u0026#39;: 29 printf( \u0026#34;option: ?\\n\u0026#34; ); 30 break; 31 default: 32 printf( \u0026#34;option: unknown\\n\u0026#34; ); 33 break; 34 } 35 } 36 return 0; 37} Variable Length Arguments  可變長度參數是一項功能，允許函數接收任意數量的參數。 可變數量的參數由三個點表示 ...。  1#include \u0026lt;stdarg.h\u0026gt;2void va_start(va_list ap, last); 3type va_arg(va_list ap, type); 4void va_end(va_list ap); 5void va_copy(va_list dest, va_list src);  Actually, they are macros instead of functions. 範例一： printargs.c 1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdarg.h\u0026gt;3#include \u0026lt;stdint.h\u0026gt;4/* print all args one at a time until a negative argument is seen; 5all args are assumed to be of int type */ 6void printargs(int32_t arg1, ...) { 7 va_list ap; 8 int32_t i; 9 va_start( ap, arg1 ); 10 for(int32_t i = arg1; i \u0026gt;= 0; i = va_arg(ap, int32_t)) 11 printf( \u0026#34;%d \u0026#34;, i); 12 va_end( ap ); 13 putchar(\u0026#39;\\n\u0026#39;); 14 return; 15} 16int main() { 17 printargs(5, 2, 14, 84, 97, 15, -1, 48, -1); 18 printargs(84, 51, -1); 19 printargs(-1); 20 printargs(1, -1); 21 return 0; 22}  範例二： avg.c 1#include \u0026lt;stdarg.h\u0026gt;2#include \u0026lt;stdio.h\u0026gt;3#include \u0026lt;stdint.h\u0026gt;4double average(int32_t num, ...) { 5 va_list valist; 6 int32_t sum = 0; 7 va_start(valist, num); 8 for (int32_t i = 0; i \u0026lt; num; i++) 9 sum += va_arg(valist, int32_t); 10 va_end(valist); 11 return sum / (double)num; 12} 13int main() { 14 printf(\u0026#34;Average of { 3, 4 } = %lf\\n\u0026#34;, average(2, 3, 4)); 15 printf(\u0026#34;Average of { 5, 10, 15 } = %lf\\n\u0026#34;, average(3, 5, 10, 15)); 16 return 0; 17}   ","date":"2021-07-12T21:57:26+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_2-05/","title":"程式設計(二)-05：Variable Length Arguments List"},{"content":" 如何顯示 BMP 檔 ?  有很多 libraries 可以幫助您做到這一點。實際上，您應該使用它們而不是從頭開始開發。 如何在螢幕上顯示圖像？  您必須至少學習一個 GUI 庫，例如 Gtk、Qt 等。 我的建議：Qt。但是，這是一個 C++ 框架。 了解如何使用 GUI 平台提供的功能顯示圖像。       GTK  GTK（以前稱為 GTK+、GIMP ToolKit）是一個免費的開源跨平台的部件工具箱 (widget toolkit)，用於創建圖形用戶界面（GUIs）。 GTK 是用 C 語言所編寫的物件導向的部件工具箱。它使用 GObject（即 GLib 物件系統）進行物件導向。  因此，不要告訴我 C 不能物件導向。   安裝：sudo apt install libgtk-3-dev   SDL  Simple DirectMedia Layer SDL是跨平台的軟件開發庫，為計算機多媒體硬件組件提供硬件抽象層。  視頻 聲音的 輸入設備 光盤 螺紋 共享對象加載 聯網 計時器 3D圖形   軟體開發者可以使用它來編寫高性能的電腦遊戲和其他多媒體應用程式。 SDL 架構 / 範例     SDL Object  SDL_Window：包含有關 Window 本身的所有信息的結構：大小、位置、全螢幕、邊框等。 SDL_Renderer：處理所有渲染的結構。它與 SDL_Window 綁定在一起，因此只能在該 SDL_Window 中呈現。 SDL_Textures 和 SDL_Surface：SDL_Renderer 渲染SDL_Texture(存儲一個元素的像素資訊)。這是 SDL_Surface 的新版本，他們幾乎相同。  重要的區別是 SDL_Surface 使用軟件渲染（通過CPU），而 SDL_Texture 使用硬件渲染（通過GPU）。     安裝：sudo apt-get install libsdl2-dev libsdl2-image-dev Makefile 1CFLAGS := `sdl2-config --libs --cflags` -ggdb3 -O0 --std=c99 -Wall -lSDL2_image -lm 2all: example.c 3 gcc example.c -o example $(CFLAGS) 4clean: 5 rm example    File Descriptor  POSIX C Implementation  C 標准定義了語法和標準庫，但不規範實現。 所以在 Linux 中，fopen、fclose、printf、scanf、fprintf、fscanf、fread 和 fwrite 是通過低階 API 實現的：  open read write close   現在，我們將使用這些較低級別的 API 來訪問文件。    open, close int open(const char *pathname, int flags);\n Given a pathname for a file, open() returns a file descriptor, a small, nonnegative integer for use in subsequent system calls. open() returns the new file descriptor, or -1 if an error occurred. The argument flags must include one of the following access modes: O_RDONLY, O_WRONLY, or O_RDWR. int close(int fd); close() closes a file descriptor, so that it no longer refers to any file and may be reused. close() returns zero on success. On error, -1 is returned, and errno is set appropriately. For more flags, please read manual.  read, write ssize_t read(int fd, void *buf, size_t count);\n read() attempts to read up to count bytes from file descriptor fd into the buffer starting at buf. On files that support seeking, the read operation commences at the current file offset, and the file offset is incremented by the number of bytes read. If the current file offset is at or past the end of file, no bytes are read, and read() returns zero. ssize_t write(int fd, const void *buf, size_t count); write() writes up to count bytes from the buffer pointed buf to the file referred to by the file descriptor fd. How about seek? use lseek.  fstat int fstat(int fd, struct stat *buf);\n These functions return information about a file, in the buffer pointed to by buf.  mmap  \nvoid *mmap(void *addr, size_t length, int prot, int flags,int fd, off_t offset);\n mmap() creates a new mapping in the virtual address space of the calling process. The starting address for the new mapping is specified in addr. The length argument specifies the length of the mapping. If addr is NULL, then the kernel chooses the address at which to create the mapping. 現在您可以將返回地址視為一個大陣列，您可以直接訪問數據，包括修改數值。 在使用 mmap 後，請記得要 munmap。 mmap() 不是標準 C 的函式 MapViewOfFile function is somewhat equivalent to mmap in Windows.  ","date":"2021-05-08T17:23:11+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_2-04/","title":"程式設計(二)-04：File Processing-02"},{"content":"File  C 將每個檔案視為一個連續的 bytes stream 每個檔案以 end-of-file 為結尾，這是由系統提供而不是文件。   It looks like there is an additional byte appended to the file. However, that additional byte does not exist. Instead, it is a signal raised by your system. int feof(FILE *stream);  File Stream  Streams 提供了更高級別的介面(interface)讓你存取資料。  fprintf fscanf   事實上，你已經使用過 file stream !  三種標準流  標準輸入 0 (standard input.) 標準輸出 1 (standard output.) 標準錯誤 2 (standard error.)   真的嗎? 哪時候呀? scanf -\u0026gt; scanf() 從標準輸入流中讀取輸入 scanf 的實作 1int scanf(const char *fmt, ...){ 2 int count; 3 va_list ap; 4 va_start(ap, fmt); 5 count = vfscanf(stdin, fmt, ap); 6 va_end(ap); 7 return(count); 8}     File Descriptor  File descriptor 為輸出入的操作提供了原始的低級介面(interface)。 在 Linux 中，任何東西都可以被視為一個檔案。  Network socker Device driver Inter-process communication   支援哪些操作?  open、read、write、close   如果要控制某些詳細的設定，你需要使用 file descriptor 而不是 file stream。  File Stream vs. File Descriptor  Structure:  Stream: FILE * Descriptor: int   可以用 file stream 實現的，就一定可以用 file descriptor 實現，其逆不真。 File streams 有更多方便的介面(interface)給你使用。  I/O Redirection stdout  \n \u0026gt; filename  重導向 stdout 到一個檔案 如果檔案不存在就創建文件，否則就將其覆蓋   \u0026gt;\u0026gt; filename  重導向 stdout 到一個檔案 如果檔案不存在就創建文件，否則就加在後方      \u0026gt; filename 1\u0026gt; filename  Redirect stdout to file \u0026ldquo;filename\u0026rdquo;   \u0026gt;\u0026gt; filename 1\u0026gt;\u0026gt; filename  Redirect and append stdout to file \u0026ldquo;filename\u0026rdquo;   2\u0026gt; filename  Redirect stderr to file ”filename.”   2\u0026gt;\u0026gt; filename  Redirect and append stderr to file ”filename.”   \u0026amp;\u0026gt; filename  Redirect stdout, stderr to file ”filename.”    stdin $ . / abs \u0026lt; number.txt\nText File Processing fopen FILE *fopen(const char *path, const char *mode);\n path：檔案路徑 mode：  r：read w：write a：append 更多的選項在手冊中   Return：FILE *  成功的話，FILE pointer 將被回傳 如果失敗的話，將回傳 NULL 並且 errno 被設置為表明 error 永遠記得確認回傳的 pointer!    fprintf  幾乎和printf相同，除了你需要給 FILE stream pointer。  End-of-File Indicator  Linu/Mac OS X/UNIX：\u0026lt;Ctrl\u0026gt; d Windows：\u0026lt;Ctrl\u0026gt; z + enter  fclose int fclose(FILE *stream);\n fclose() The fclose() function flushes the stream pointed to by stream (writing any buffered output data using fflush(3)) and closes the underlying file descriptor. 也就是說，當你 close 時，在 buffer 中的資料將被寫入檔案 在開檔後記得關上它!! 因為有同時開檔的數量上限。  fscanf  操作就如同 fprintf 當然，檔案應該被以 r 的模式打開    當你使用 fprintf 或 fscanf 去處理文字檔時，它蘊含著你清楚地知道檔案的格式 在這些情況下，輸入的檢查也許就沒那麼重要了，對吧?  Yes：畢竟格式由你決定。 No：有些人可能會修改檔案，並使你讀取它。    File Position Pointer  \n 所以我們可以返回到開始的位置嗎??  為什麼我們需要這麼做? -\u0026gt; 影片倒放 當然，你可以關掉檔案並重開它。 但我們有另外的函式可以幫助我們 -\u0026gt; rewind    rewind void rewind(FILE *stream);\n 將位置指回檔案的開頭。 那麼我們想要改變 file pointer 到任何地方呢? -\u0026gt; fseek  fseek int fseek(FILE *stream, long offset, int whence);\n The fseek() function sets the file position indicator for the stream pointed to by stream. The new position, measured in bytes, is obtained by adding offset bytes to the position specified by whence. SEEK_SET：檔案開頭 SEEK_CUR：當前位置 SEEK_END：end-of-file    rewind() 相當於 fseek(stream, 0L, SEEK_SET)  ftell long ftell(FILE *stream);\n 告訴你當前所在的位置。  Binary File Processing Binary File  文字檔以字元的方式儲存資料，然而並不是所有的檔案都是文字檔。例如，你可以用文字編輯器打開一張圖片。 此外文字檔的儲存效率並不高  需要多少大小去儲存數字 123 ? Text File：3 bytes Binary File：1 byte    fread size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);\n 從 FILE * 讀取 nmemb 個資料，每個 size bytes 長，並將它們儲存在 *ptr。 成功時回傳資料讀取的數量。如果失敗，或到達文件尾端時，則回傳是一短項計數 (或 0)  fwrite size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);\n 從 *ptr 讀取 nmemb 個資料，每個 size bytes 長，並將它們儲存在 FILE *。 成功時回傳資料寫入的數量。如果失敗，或到達文件尾端時，則回傳是一短項計數 (或 0)  BMP File Format  這裡將使用 bmp 檔作為示範  為什麼是 bmp 而不是 jpg ? -\u0026gt; 因為 bmp 是一種未被壓縮的照片格式。   連結  讀取 bmp 檔  讀取 bmp file header 並印出資訊  1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdint.h\u0026gt;3#include \u0026lt;string.h\u0026gt;4#include \u0026lt;stdlib.h\u0026gt;5 6struct _sBmpHeader { 7 char bm[2]; 8 uint32_t size; 9 uint32_t reserve; 10 uint32_t offset; 11 uint32_t header_size; 12 int32_t width; 13 int32_t height; 14 uint16_t planes; 15 uint16_t bpp; 16 uint32_t compression; 17 uint32_t bitmap_size; 18 int32_t hres; 19 int32_t vres; 20 uint32_t used; 21 uint32_t important; 22}__attribute__ ((__packed__)); 23 24typedef struct _sBmpHeader sBmpHeader; 25 26void print_bmp_header( sBmpHeader *pHeader ) { 27 printf( \u0026#34;ID: %c%c\\n\u0026#34;, pHeader -\u0026gt; bm[0], pHeader -\u0026gt; bm[1] ); 28 printf( \u0026#34;Size: %u\\n\u0026#34;, pHeader -\u0026gt; size ); 29 printf( \u0026#34;Reserve: %u\\n\u0026#34;, pHeader -\u0026gt; reserve ); 30 printf( \u0026#34;Offset: %u\\n\u0026#34;, pHeader -\u0026gt; offset ); 31 printf( \u0026#34;Header Size: %u\\n\u0026#34;, pHeader -\u0026gt; header_size ); 32 printf( \u0026#34;Width: %u\\n\u0026#34;, pHeader -\u0026gt; width ); 33 printf( \u0026#34;Height: %u\\n\u0026#34;, pHeader -\u0026gt; height ); 34 printf( \u0026#34;Planes: %u\\n\u0026#34;, pHeader -\u0026gt; planes ); 35 printf( \u0026#34;Bits Per Pixel: %u\\n\u0026#34;, pHeader -\u0026gt; bpp ); 36 printf( \u0026#34;Compression: %u\\n\u0026#34;, pHeader -\u0026gt; compression ); 37 printf( \u0026#34;Bitmap Data Size: %u\\n\u0026#34;, pHeader -\u0026gt; bitmap_size ); 38 printf( \u0026#34;H-Resolution: %u\\n\u0026#34;, pHeader -\u0026gt; hres ); 39 printf( \u0026#34;V-Resolution: %u\\n\u0026#34;, pHeader -\u0026gt; vres ); 40 printf( \u0026#34;Used Colors: %u\\n\u0026#34;, pHeader -\u0026gt; used ); 41 printf( \u0026#34;Important Colors: %u\\n\u0026#34;, pHeader -\u0026gt; important ); 42 return; 43} 44 45int main() { 46 FILE *pFile = NULL; 47 if((pFile = fopen(\u0026#34;maldives_16.bmp\u0026#34;, \u0026#34;rb\u0026#34;)) == NULL) { 48 printf(\u0026#34;File could not be opened!\\n\u0026#34;); 49 return 0; 50 } 51 sBmpHeader header; 52 printf(\u0026#34;%lu\\n\u0026#34;, sizeof(header)); 53 fread(\u0026amp;header, 54, 1, pFile); 54 print_bmp_header(\u0026amp;header); 55 fclose(pFile); 56 return 0; 57} 修改 bmp 檔  翻轉顏色  1// ...略... 2int main() { 3 FILE *pFile = NULL; 4 FILE *pFile2 = NULL; 5 if((pFile = fopen(\u0026#34;maldives.bmp\u0026#34;, \u0026#34;rb\u0026#34;)) == NULL) { 6 printf( \u0026#34;File could not be opened!\\n\u0026#34; ); 7 return 0; 8 } 9 if((pFile2 = fopen(\u0026#34;maldives_gray.bmp\u0026#34;, \u0026#34;wb\u0026#34;)) == NULL) { 10 printf(\u0026#34;File could not be opened!\\n\u0026#34;); 11 return 0; 12 } 13 sBmpHeader\theader; 14 fread( \u0026amp;header, sizeof( header ), 1, pFile ); 15 fwrite( \u0026amp;header, sizeof( header ), 1, pFile2 ); 16 while(!feof(pFile)) { 17 uint8_t\toriginal[1024] = {0}; 18 uint8_t modified[1024] = {0}; 19 size_t count = fread( original, 1, 1024, pFile ); 20 for(size_t i = 0; i \u0026lt; count; ++i){ 21 modified[i] = 255 - original[i]; 22 } 23 fwrite( modified, count, 1, pFile2 ); 24 } 25 fclose( pFile ); 26 fclose( pFile2 ); 27 return 0; 28}  轉成灰階  1// ...略... 2while(!feof(pFile)) { 3 uint8_t\toriginal[999] = {0}; 4 uint8_t modified[999] = {0}; 5 size_t count = fread( original, 1, 999, pFile ); 6 for(size_t i = 0; i \u0026lt; count; i = i + 3) { 7 // BGR 8 uint8_t gray = 0.299 * original[i+2] + 0.587 * original[i+1] + 0.114 * original[i]; 9 for(size_t j = 0; j \u0026lt; 3; ++j) { 10 modified[i+j] = gray; 11 } 12 } 13 fwrite(modified, count, 1, pFile2); 14} 15// ...略...  Hex 編輯工具  Bless Hex Editor GHex  ","date":"2021-04-02T17:58:22+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_2-03/","title":"程式設計(二)-03：File Processing-01"},{"content":"Structure  Structures 就是將一堆相關的變數整合在一個名字下。  關鍵字：struct 資料型別：struct _name_ 成員：在 struct 的大括號內宣告的變數。 同一個結構體下的成員名稱是唯一的。  1struct _sCard{ 2 uint8_t suit, face; 3};  初始化 1struct _sCard a_card = {.suit = 1, .face = 2}; 2struct _sCard a_card = {1, 2};  structure member operator -\u0026gt; . structure pointer operator -\u0026gt; -\u0026gt; 1a_card_ptr = \u0026amp;a_card; 2a_card_ptr-\u0026gt;face = 5; 3// Equivalent to 4(*a_card_ptr).face = 5;   CPU Alignment  CPU 有時候會為了減少從記憶體呼叫變數的次數，而主動將變數的記憶體放在連續的地方。 為了避免 alignment，你可以使用以下兩種方法：  __attribute__((packed)) pragma 1#pragma pack(push) 2#pragma pack(1) 3#pragma pack(pop)   1// 法一 2struct st{ 3 ... 4}__attribute__((packed)); 5// 法二 6#pragma pack(push) 7#pragma pack(1) 8struct st{ 9 ... 10}; 11#pragma pack(pop)  Structure 不能包含自己，如果需要請用 pointer ! 1struct student { 2 char name [64]; 3 uint8_t age; 4 uint8_t gender; 5 struct student *leader; 6};   typedef  由於軟體開發者盡可能的保持懶惰，因此他們嘗試縮短程式碼。 為了提高可讀性  1typedef struct card Card; 2typedef struct card { 3 uint8_t suit; 4 uint8_t face; 5} Card; Structure With Functions  為什麼我們時常以傳址的方式傳送 Structures ?  因為效率   傳值 vs 傳址      const 1int *a; // declare a as pointer to int 2int const *a; // syntax error 3int * const a; // declare a as const pointer to int 4int const * const a; // syntax error 5const int *a; // declare a as pointer to const int 6const int * const a; // declare a as const pointer to const int  Although C and C++ read mostly from top-to-bottom and left-to-right, pointer declarations read, in a sense, backwards.  Union  Union 是所有成員共享相同記憶體空間的派生數據類型。 記憶體大小足以容納最大的成員。 實際應用  1struct ip_addr { 2 uint8_t fam; // socket family type 3 union { 4 struct in_addr ipv4_sin_addr; 5 struct in6_addr ipv6_sin_addr; 6 }addr; 7}; Bitwise Operation  \u0026amp;：AND -\u0026gt; 0\u0026amp;0 = 0; 0\u0026amp;1 = 0; 1\u0026amp;0 = 0; 1\u0026amp;1 = 1. |：OR -\u0026gt; 0|0 = 0; 0|1 = 1; 1|0 = 1; 1|1 = 1. ^：XOR -\u0026gt; 0^0 = 0; 0^1 = 1; 1^0 = 1; 1^1 = 0. ~：Complement -\u0026gt; \\(\\text{\\textasciitilde}4_{10}\\) =\u0018 \\(\\text{\\textasciitilde}100_2\\) = \\(011_2\\) = \\(3_{10}\\). \u0026lt;\u0026lt;：Left Shift 0012 \u0026laquo; 2 = 1002. \u0026gt;\u0026gt;：Right Shift 1002 \u0026raquo; 2 = 0012.    為什麼我們需要 bitwise operation ?  在大多數情況下，按位運算比算術運算要快。  a = a * 2 a = a \u0026laquo; 1   由於編譯器優化，這可能不是正確的。   Mask with better memory utilization. Game Cheating Example  ０１ ⽕炎術 １０ 電擊術 ０２ 烈炎術 ２０ 落雷術 ０４ 炎⿓術 ４０ 轟雷術 ０８ 天⽕術 ８０ 神雷術    Bit Fields 1typedef union { 2 struct { 3 unsigned char b1:1; 4 unsigned char b2:1; 5 unsigned char b3:1; 6 unsigned char b4:1; 7 unsigned char b5:1; 8 unsigned char b6:1; 9 unsigned char b7:1; 10 unsigned char b8:1; 11 } bits; 12 unsigned char byte; 13} uByte;  由於 alignment 問題，記憶體的空間可能不是安全的，這取決於你如何儲存你的資料。 實際上，bit fields 可能會增加編程時的難度。我不建議您使用此功能，但是，您需要了解此語法，因為其他人可能會使用它。 Do not take the address of a bit field.  Enumeration  A set of integer enumeration constants represented by identifiers.  1enum career { 2 SABER, LANCER, ARCHER, 3 RIDER, CASTER, ASSASSIN, 4 BERSAKER, RULER, 5 CAREER_MAX = 31 6}; 7typedef struct player { 8 char name[64]; 9 enum career role; 10 uint32_t role2; 11} Player;  你不能改變 enumeration constants 的值。 我是否可以使用 define 或 const 而不是 enum?  是，可以的。 但他們有什麼不同呢?    ","date":"2021-04-02T16:24:46+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_2-02/","title":"程式設計(二)-02：Structure"},{"content":"字元  在講字串之前我們先來看什麼是字元。  ASCII  American Standard Code for Information Interchange. 電子通訊的字元編碼標準 基於英文字母，ASCII 將 128 個字元編碼成 7 個位元長。  95 個可印字元：A-Z, a-z, 0-9, 標點符號 不可印字元：換行符號      在電腦中我們使用 8-bit 的記憶體儲存字元。 在 C 語言中，使用 char 這個型別。 %c -\u0026gt; 輸出字元 %x or %X -\u0026gt; 印出 hex or HEX 的值。    在以前，許多情況下，有些人使用 unsigned char 作為 one byte 的資料型別，但現今你應該使用的是 uint8_t。 請把 char 留給字串，盡管事實上對電腦來說都是一樣的。 其他編碼：Big5、UTF-8  字串  事實上，字串就是一連串的可印字元。 這樣看起來很像陣列對吧? Yes!    \n 在 C 語言中，字串是一個字元指標，並以 '\\0' 為結尾。 常見的錯誤：  沒有分配足夠的空間 輸出一個不包含 '\\0' 的字串 在 C 的標準中，字元指標是不可修改的，如果要修改字串，必須儲存在字元陣列中。    字串處理函式  首先，這部分有印象就好，不用記，畢竟到這邊大家應該都有能力自己實作出來吧!  字串轉整數  很久很久以前 1#include \u0026lt;stdlib.h\u0026gt;2int atoi(const char *nptr); 3long atol(const char *nptr);  現今 1#include \u0026lt;stdlib.h\u0026gt;2// string to double 3double strtod(const char *nptr, char **endptr); 4// string to long int 5long int strtol(const char *nptr, char **endptr, int base);   輸出入函式  輸出  1#include \u0026lt;stdio.h\u0026gt;2int putchar(int c); // 輸出字元 3int puts(const char *s); // 輸出字串 4int snprintf(char *restrict buffer, size_t bufsz, const char *restrict format, ... );  輸入  1#include \u0026lt;stdio.h\u0026gt;2int getchar(void); // 輸入字元 3char *fgets(char *s, int size, FILE *stream); // 輸入字串 4int sscanf(const char *restrict buffer, const char *restrict format, ... );   一些不推薦的函式，永遠不要用他們  char *gets(char *s); int sprintf(char *str, const char *format, ...);   有 buffer overflow 的風險  字串操作函式 1char *strncpy(char *dest, const char *src, size_t n); // 複製字串 2char *strncat(char *dest, const char *src, size_t n); // 串接字串   和上述理由一樣，不要使用下方的函式  char *strcpy(char *dest,const char *src); char *strcat(char *dest,const char *src);    字串比較函式 1#include \u0026lt;string.h\u0026gt;2int strcmp(const char *s1, const char *s2); 3int strncmp(const char *s1, const char *s2, size_t n);  如果s1（或其前n個字節）分別小於、匹配或大於s2，則函數將返回小於、等於或大於零的整數。  字串搜尋函式 1#include \u0026lt;string.h\u0026gt;2char *strchr(const char *s, int c); // 從頭找字元 3char *strrchr(const char *s, int c); // 從尾找字元 4// 計算 s 的前綴有多少字元在 accept 中 5size_t strspn(const char *s, const char *accept ); 6// 計算 s 的前綴有多少字元不在 reject 中 7size_t strcspn(const char *s, const char *reject ); 8// 回傳在 accept 中的任何字元在 s 字串首次出現位置的指標 9char *strpbrk(const char *s, const char *accept ); 10// 回傳 needle 在 haystack 中首次出現位置的指標 11char *strstr(const char *haystack, const char *needle ); 12// 依照 delim 中的字元分割 str 13char *strtok(char *str, const char *delim ); strtok 範例 1char str[] = \u0026#34;the value of pi is 3.14\u0026#34;; 2char *token = strtok(str, \u0026#34; \u0026#34;); 3while(token != NULL) { 4 printf(\u0026#34;%d: %s\\n\u0026#34;, i, token); 5 token = strtok(NULL, \u0026#34; \u0026#34;); 6}  為何第二次之後呼叫都是以 NULL 作為輸入?  因為這是一個 static 的變數。如果輸入 NULL，該函式將繼續從最後一個位置切割字串。   為甚麼我不能直接使用 const char *str?  因為 strtok 的實作，將會直接操作在輸入的字串上。    其他字串函式 1#include \u0026lt;string.h\u0026gt;2size_t strlen(const char *s); // 計算字串長度 3// 輸出錯誤訊息 4char *strerror(int errnum); 5void perror(const char *str);  strerror 搭配 errno 使用 (#include \u0026lt;errno.h\u0026gt;)  ","date":"2021-04-02T14:40:30+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_2-01/","title":"程式設計(二)-01：String"},{"content":"簡介  這部份是紀錄我修改的主題內容，並將 codeblocks 區塊美化，以及支援 KaTex 和 Google Analytics  教學開始  我使用的主題為 Stack  主題內容修改  找到 assets/scss/variables.scss，並修改 1--link-background-color: 90, 240, 250; //189, 195, 199; 2--code-text-color: #ef3982; //rgba(255, 255, 255, 0.9);   Codeblocks 區塊美化  到 static/css/ 下建立 copy-to-clipboard.css，內容如下 1.highlight { 2 position: relative; 3} 4.highlight .ln { 5 -moz-user-select: none; 6 -webkit-user-select: none; 7 -ms-user-select: none; 8 user-select: none; 9} 10.highlight-copy-btn { 11 position: absolute; 12 top: 7px; 13 right: 7px; 14 border: 0; 15 border-radius: 4px; 16 padding: 1px; 17 font-size: 0.8em; 18 line-height: 1.8; 19 color: #fff; 20 background-color: #777; 21 min-width: 55px; 22 text-align: center; 23} 24.highlight-copy-btn:hover { 25 background-color: #666; 26}  到 static/js/ 下建立 copy-to-clipboard.js，內容如下 1(function () { 2 \u0026#39;use strict\u0026#39;; 3 if (!document.queryCommandSupported(\u0026#39;copy\u0026#39;)) { 4 return; 5 } 6 function flashCopyMessage(el, msg) { 7 el.textContent = msg; 8 setTimeout(function () { 9 el.textContent = \u0026#34;Copy\u0026#34;; 10 }, 1000); 11 } 12 function selectText(node) { 13 var selection = window.getSelection(); 14 var range = document.createRange(); 15 range.selectNodeContents(node); 16 selection.removeAllRanges(); 17 selection.addRange(range); 18 return selection; 19 } 20 function addCopyButton(containerEl) { 21 var copyBtn = document.createElement(\u0026#34;button\u0026#34;); 22 copyBtn.className = \u0026#34;highlight-copy-btn\u0026#34;; 23 copyBtn.textContent = \u0026#34;Copy\u0026#34;; 24 25 var codeEl = containerEl.firstElementChild; 26 copyBtn.addEventListener(\u0026#39;click\u0026#39;, function () { 27 try { 28 var selection = selectText(codeEl); 29 document.execCommand(\u0026#39;copy\u0026#39;); 30 selection.removeAllRanges(); 31 32 flashCopyMessage(copyBtn, \u0026#39;Copied!\u0026#39;) 33 } catch (e) { 34 console \u0026amp;\u0026amp; console.log(e); 35 flashCopyMessage(copyBtn, \u0026#39;Failed :\\\u0026#39;(\u0026#39;) 36 } 37 }); 38 containerEl.appendChild(copyBtn); 39 } 40 // Add copy button to code blocks 41 var highlightBlocks = document.getElementsByClassName(\u0026#39;highlight\u0026#39;); 42 Array.prototype.forEach.call(highlightBlocks, addCopyButton); 43})();  修改 config.yaml 1custom_css:[\u0026#34;css/copy-to-clipboard.css\u0026#34;]23pygmentsUseClasses:true4markup:5highlight:6lineNos:true7lineNumbersInTable:false 修改 layouts/partials/head/custom.html 1{{ range .Site.Params.custom_css -}} 2 \u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt; 3{{- end }} 4{{ range .Site.Params.custom_js -}} 5 \u0026lt;script type=\u0026#34;text/javascript\u0026#34; src=\u0026#34;{{ . | absURL }}\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 6{{- end }}  修改 layouts/partials/footer/custom.html 1\u0026lt;script src=\u0026#34;/js/copy-to-clipboard.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;  這樣程式碼區塊就有 Copy Button，並且直接複製時不會選取到行號了  KaTex  到 layouts/partials/ 下新增 math.html，內容如下 1{{ if or .Params.math .Site.Params.math }} 2\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\u0026#34; integrity=\u0026#34;sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt; 3\u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\u0026#34; integrity=\u0026#34;sha384-g7c+Jr9ZivxKLnZTDUhnkOnsh30B4H0rpLUpJ4jAIKs4fnJI+sEnkvrMWph2EDg4\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 4\u0026lt;script defer src=\u0026#34;https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.min.js\u0026#34; integrity=\u0026#34;sha384-mll67QQFJfxn0IYznZYonOWZ644AWYC+Pt2cHqMaRhXVrursRwvLnLaebdGIlYNa\u0026#34; crossorigin=\u0026#34;anonymous\u0026#34; onload=\u0026#34;renderMathInElement(document.body);\u0026#34;\u0026gt;\u0026lt;/script\u0026gt; 5\u0026lt;script\u0026gt; 6 document.addEventListener(\u0026#34;DOMContentLoaded\u0026#34;, function() { 7 renderMathInElement(document.body, { 8 delimiters: [ 9 {left: \u0026#34;$$\u0026#34;, right: \u0026#34;$$\u0026#34;, display: true}, 10 {left: \u0026#34;\\\\[\u0026#34;, right: \u0026#34;\\\\]\u0026#34;, display: true}, 11 {left: \u0026#34;$\u0026#34;, right: \u0026#34;$\u0026#34;, display: false}, 12 {left: \u0026#34;\\\\(\u0026#34;, right: \u0026#34;\\\\)\u0026#34;, display: false} 13 ] 14 }); 15 }); 16\u0026lt;/script\u0026gt; 17{{ end }}  修改 layouts/partials/head/custom.html 1{{ partial \u0026#34;math.html\u0026#34; . }}   Google Analytics  到 Google Analytics 創建一個資料串流 由於 Hugo 內建的 GA 模板，似乎還不支援 GA4，因此我們使用 gtag.js 複製剛剛建立的資料串流中的 gtag.js 內容到 layouts/partials/google_analytics.html中 修改 layouts/partials/head/custom.html 1{{ if not .Site.IsServer }}{{ partial \u0026#34;google_analytics.html\u0026#34; . }}{{ end }}  這裡的 if 是避免在 local 測試時的數據也被紀錄下來     Hugo 於 0.82.0 版本已更新了對 GA4 的支援，使用方法如下\n  同上 在 config.yaml 中設定 googleAnalytics: G- 修改 layouts/partials/head/custom.html 1{{ template \u0026#34;_internal/google_analytics.html\u0026#34; . }}   ","date":"2021-02-07T04:06:17+08:00","permalink":"https://blog.smallten.tk/p/hugo-02/","title":"Hugo-02：優化 Blog"},{"content":"簡介  這篇內容將快速帶你建立一個 Hugo Blog 並將其部屬到 GitHub 上  相關連結  Hugo - Hugo 官網 Hugo Themes - 選擇自己喜歡的主題 Hugo Releases - 下載 Hugo 並安裝進電腦  教學開始 建立 Hugo Blog  安裝 Hugo  這裡以 Ubuntu 為示範 先至 Hugo Releases 下載自己所需的版本 1$ dpkg -i hugo_extended_0.79.0_Linux-64bit.deb # 記得依照檔案自行更改    創建一個 Hugo Site  這裡創建一個名為 blog 1$ cd ~ 2$ hugo new site blog # 可自行修改名稱    新增主題  這裡我選擇了 Stack 這個主題  1$ cd ~/blog/ 2$ git init 3$ git submodule add https://github.com/CaiJimmy/hugo-theme-stack/ themes/hugo-theme-stack  跟著主題的教學文檔修改 config file 如要建立新文章時 1$ hugo new post/test.md  此時會在 content/post/ 下，建立新文章，檔名為 test.md draft: 草稿 slug: 此文章的 url (可自行建立)   本機測試 1$ hugo server -D  -D: 將會連草稿都顯示出來    部署到 GitHub  在 GitHub 上建立一個新的 Repository  名稱為 \u0026quot;Your account\u0026quot;.github.io (\u0026ldquo;Your account\u0026rdquo; 使用自己 GitHub 的名稱)   將剛才建立好的 Blog 上到這個 Repo 1$ cd ~/blog/ 2$ git add --all 3$ git commit -m \u0026#34;blog init\u0026#34; 4$ git branch -M main 5$ git remote add origin git@github.com... #這裡使用了 ssh 的方式 6$ git push -u origin main  使用 GitHub Actions  建立一個 workflows 名叫 hugo_publish.yml (有些地方須自行依照情況修改) 內容：hugo_publish.yml   修改 Repo 的設定  先找到 GitHub Pages 的地方 將 Source 改成 Branch: gh-pages 有 custom domain 的記得填入 Enforce HTTPS 打勾   這樣就完成了，之後只要 push 時，便會自動更新網站了  ","date":"2021-02-07T03:22:22+08:00","permalink":"https://blog.smallten.tk/p/hugo-01/","title":"Hugo-01：建立一個Hugo Blog"},{"content":"Pointer  許多人不喜歡C是因為有「指標」 這可能是C中最困難的一個部分    指標是一個變數，其值為記憶體位置   宣告：int32_t *p  p 是一個指標 指向的記憶體區塊被視為整數   初始化：int32_t *p = NULL address operator \u0026amp;：返回其變數的記憶體位置  如果想要印出記憶體位置，你可以使用%p   indirection operator *：也被稱為dereferencing operator，返回指向對象的值   void *：是一個通用的指標型別(generic pointer type)，可以不透過explicit cast轉換成任意指標的型別  傳參數至函式  在C語言中，argument passing 稱為 call-by-value  電腦將會分配另一個記憶體區塊 複製輸入的參數到記憶體區塊 函式將會在新的記憶體區塊執行   這就是為什麼修改函式中的變數，並不會修改到原本外部的變數了。 在C++有另一種傳送方式稱為 call-by-reference，這邊我們不多加介紹。 普遍來說，傳址會比傳值更快。  陣列與指標  在大部分的情況下，我們可以把array視為第一個元素的指標  現在你應該明白為什麼陣列的值會在函式中被修改   為了避免模棱兩可(搞混)，我較喜歡\u0026amp;(array[0])而不是array、\u0026amp;array 然而你不能寫出 array = \u0026amp;a int32_t   int16_t   int8_t   ptr++  移動的大小是根據指標的型別 這在要讀取每一byte的詳細資料時非常好用   事實上，array[n] = *(ptr + n)  Endian Issue  \n函式指標  指標不過是一個記憶體位址。 當我們宣告某種類型的指標時，這意味著電腦將將訪問記憶體並根據給定的類型解釋存儲在該位址的值。 您是否知道函式也存儲在記憶體中？ 使用函式指標時，返回的型別和參數應該要和實際的定義相同。  Really??為什麼在編譯時不會產生errors? 這是個檢查definition的好習慣。   回呼函式 (Callback function) 你可以用陣列來儲存函式指標 void (*f[3])(int32_t) = {f1, f2, f3};    使用了函式指標的例子  Menu Driven Driver 1struct file_operations scull_fops = { 2 .owner = THIS_MODULE , 3 .llseek = scull_llseek , 4 .read = scull_read , 5 .write = scull_write , 6 .ioctl = scull_ioctl , 7 .open = scull_open , 8 .release = scull_release , 9};  Firewall  1static unsigned int hook_func( 2 const struct nf_hook_ops *ops , 3 struct sk_buff *skb , 4 const struct net_device *in , 5 const struct net_device *out , 6 int (*okfn)( struct sk_buff *) 7)   記憶體管理  記憶體管理  分配記憶體當你宣告一個變數 垃圾回收 ( GC )   為什麼許多現代的程式語言不支援記憶體管理  軟體工程師是人類 人是不可被信任的   然而，如果軟體工程師知道他們在做什麼，那麼他們可以更有效率的管理記憶體 如果不考慮記憶體，請使用陣列 如果你想陣列的大小可以被動態的改變，那麼去讀 C++ 並學習如何使用 container   malloc 1#include \u0026lt;stdlib.h\u0026gt;2ptr = malloc( sizeof(int) * size);  malloc() 分配 size bytes 並回傳一個指向所分配的記憶體的指標 記憶體沒有初始化 若要初始化，請使用 memset  1#include \u0026lt;string.h\u0026gt;2memset(ptr, 0, sizeof(int) * size); calloc 1#include \u0026lt;stdlib.h\u0026gt;2ptr = calloc(size, sizeof(int));  在現代的 C 中，你應該使用 calloc 第一個參數：多少個區塊你想去分配? 第二個參數：每個區塊的大小。 記憶體被初始化成 0  free  \n free(ptr)：釋放 ptr 指向的記憶體空間，該記憶體空間必須是由之前使用 malloc()、calloc()、realloc() 所回傳的。 此外，若已經 free(ptr)，再次使用會發生未定義行為。  Double Pointer  \n 使用場景：  在函式中分配記憶體  1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdint.h\u0026gt;3#include \u0026lt;stdlib.h\u0026gt;4void table(int32_t **pp, int32_t n){ 5 *pp = (int32_t *)calloc(n * n, sizeof(int32_t)); 6 for(int32_t i=1; i\u0026lt;=n; ++i){ 7 for(int32_t j=1; j\u0026lt;=n; ++j){ 8 *(*pp + (i-1) * n + (j-1)) = i * j; 9 } 10 } 11} 12int main(){ 13 int32_t number = 0; 14 scanf(\u0026#34;%d\u0026#34;, number); 15 int32_t *ptr = NULL; 16 table(\u0026amp;ptr, number); 17 return 0; 18}  分配一個二維陣列  1#include \u0026lt;stdio.h\u0026gt;2#include \u0026lt;stdint.h\u0026gt;3#include \u0026lt;stdlib.h\u0026gt;4int main() { 5 size_t size_row = 0, size_column = 0; 6 printf(\u0026#34;Please enter two integers for row and column: \u0026#34;); 7 scanf( \u0026#34;%lu %lu\u0026#34;, \u0026amp;size_row, \u0026amp;size_column ); 8 int32_t **ptr = NULL; 9 ptr = (int32_t **)calloc( sizeof( int32_t * ), size_row ); 10 for( size_t i = 0 ; i \u0026lt; size_row ; i++ ) { 11 *( ptr + i ) = (int32_t *)calloc( sizeof( int32_t ), size_column ); 12 for( size_t j = 0 ; j \u0026lt; size_column ; j++ ) { 13 *( *( ptr + i ) + j ) = ( i + 1 ) * ( j + 1 ); 14 } 15 } 16 for( size_t i = 0 ; i \u0026lt; size_row ; i++ ) { 17 for( size_t j = 0 ; j \u0026lt; size_column; j++ ) { 18 printf( \u0026#34;%4d \u0026#34;, *( *( ptr + i ) + j ) ); 19 } 20 printf( \u0026#34;\\n\u0026#34; ); 21 } 22 return 0; 23}    小工具 cdecl  安裝：sudo apt install cdecl 使用：cdecl -\u0026gt; explain int ***a;  資源查看  top / htop vmstat ( 較輕量化 )  vmstat -n 1 ( -n 1 為一秒輸出一次 )    ","date":"2020-12-23T19:38:14+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_1-08/","title":"程式設計(一)-08：Pointer"},{"content":"第一個 Hugo Blog  由於秉持著「人生總折騰」的道理，我來轉移 Blog 了(誤///)，好啦，其實是單純希望有個穩定且又能全天候供應的 Blog 而已，由於我的隊友兩人分別使用了 Hexo 及 Hugo ，因此一開始讓我有點難抉擇，但最終我還是選擇了 Hugo 。\n 至於第二個選擇的難關就是主題了，挑了好久都沒看到順眼的，差點就要聽吳文元說的沒有喜歡的就自己寫呀(怕///)，最終還是挑到了一個稍微滿意的主題 Stack。\n 至於架設的過程到目前為止還算是蠻順利的，希望之後也不會遇到什麼大坑。\n","date":"2020-12-18T01:16:06+08:00","permalink":"https://blog.smallten.tk/p/first-hugo-blog/","title":"First Hugo Blog"},{"content":"蓄水池抽樣法 (Reservoir Sampling)  從 N 個樣本中，隨機抽取 K 個樣本，其中 N 非常大(不能將所有數據都放進記憶體或是一個未知數)，而每個被抽出來的機率要相等。  定理 該算法保證每個元素以 \\( k \\over n \\) 的機率被選入蓄水池中。\n證明  第 i 個元素進入蓄水池的機率為 \\( k \\over i \\)，蓄水池內每個元素被替換的機率為\\( 1 \\over k \\) 因此在第 i 輪第 j 個元素被替換的機率為 \\( {k \\over i}\\times{1 \\over k} = {1 \\over i} \\)，接下來用 M.I. (數學歸納法)來證明，當 n 次循環結束時每個元素進入蓄水池的機率為 \\( k \\over n \\) 假設在 (i-1) 次迭代後，任意一個元素進入 蓄水池的概率為 \\( k \\over i-1 \\)。由上面的結論，在第 i 次迭代時，該元素被替換的概率為 \\( 1 \\over i \\)， 那麼其不被替換的概率則為 \\( 1 - {1 \\over i} = {i - 1 \\over i} \\) 故在第 i 次迭代後，該元素在蓄水池內的概率為 \\( {k \\over i-1} \\times {i-1 \\over i} = {k \\over i} \\)，歸納結束。 因此當循環結束時，每個元素進入蓄水池的概率為 \\( k \\over n \\)，命題得證。  例題  Leetcode 382.Linked List Random Node 解法： Cpp  1class Solution { 2 ListNode *p; 3public: 4 Solution(ListNode* head) { 5 p = head; 6 } 7 int getRandom() { 8 int ans = p-\u0026gt;val; 9 ListNode *t = p-\u0026gt;next; 10 for(int i=2; t; ++i){ 11 if(rand()%i == 0) ans = t-\u0026gt;val; 12 t = t-\u0026gt;next; 13 } 14 return ans; 15 } 16}; ","date":"2020-12-08T16:02:25+08:00","permalink":"https://blog.smallten.tk/p/algorithm-01/","title":"演算法-01：蓄水池抽樣法"},{"content":"Array  陣列是一種可以儲存大量相同型別資料的方法。 連續的記憶體位置。 永遠從0開始  int32_t a[10] -\u0026gt; a[0] ~ a[9]   計數變數 i 的型別可以宣告為 size_t，它是一個無號的整數型別。 初始化  int32_t a[5] = {0, 0, 0, 0, 0}; int32_t a[5] = {0};   存取陣列元素使用 variable[index] 專業說明：電腦將找到第一個元素的地址，然後根據索引移動記憶體位置以訪問數據。 事實上一維陣列可以處理所有情況，至於多維陣列只是給人類方便閱讀的。   define  是遇處理指令，不是C的詞(statement) 我們可以使用 #define 去做巨集(MACRO)  當開發時MACRO有些像function，然而對電腦而言他們是不同的。 當遇到MACRO，編譯器將簡單的依定義替換掉程式碼。 函式擁有自己的標記。    基本排序 氣泡排序法 1for(int i = 0; i \u0026lt; n; ++i) { 2 for(int j = i; j \u0026lt; n; ++j) { 3 if(a[j] \u0026lt; a[i]) { 4 a[i] = a[i] ^ a[j]; 5 a[j] = a[i] ^ a[j]; 6 a[i] = a[i] ^ a[j]; 7 } 8 } 9} qsort 1#include \u0026lt;stdlib.c\u0026gt;2int cmp(const void *a, const void *b) { 3 return (*(int*)a - *(int*)b); 4} 5qsort(a, n, sizeof(int), cmp); 傳陣列至函式 1int f(int [][n], int); 2 3f(a, 10); 4 5int f(int a[][n], int size){ 6 7}  除了第一個[]外，剩下的都必須要給大小。(電腦才能計算偏移量) 為甚麼要給size? 因為傳過去的只是陣列的記憶體起始位置而已。 在函式中依然會改到本身的值。  const  constant read-only  可變長度陣列  Variable Length Array 雖然有些編譯器支援了以下寫法(C99之後)，但有些依然不支援  1int n = 5; 2int a[n] = {0};  但你應該使用 malloc  準確來說，你應該使用 calloc，而不是 `malloc。   我的建議：當考試的時候不要使用這功能( a[n] )，因為你不知道編譯器的版本。  ","date":"2020-12-07T19:38:14+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_1-07/","title":"程式設計(一)-07：Array"},{"content":"Makefile for 程設一 1CC = gcc 2CFLAGS = -Wall -Wextra -O2 -std=c11 3LDFLAGS = -lm 4TARGETS = main01 main02 5main01_OBJ = main01.o func01.o 6main02_OBJ = main02.o func02.o 7 8.PHONY = all clean 9 10all: $(TARGETS) 11 12.SECONDEXPANSION: 13$(TARGETS): $$($$@_OBJ) 14\t$(CC) $^ -o $@ $(LDFLAGS) 15 16%.o: $@.c 17 18clean: 19\t-$(RM) $(TARGETS) $(foreach targ,$(TARGETS),$(foreach obj, $($(targ)_OBJ), $(obj))) ","date":"2020-12-02T21:45:51+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_1-06/","title":"程式設計(一)-06：Makefile"},{"content":"Function 函式 double  double 是一種浮點數型別，就像是 float 就如同它的名字，它使用的記憶體大小為 float 的兩倍 建議: 當你需要浮點數的話，一律使用 double    到目前為止我們最常使用到的函式為 printf 我們稱這些函式為 C standard functions (C標準函式) 所有的函式都被儲存在libraries中  如果你想要讀書，你需要知道書在哪，然後去圖書館借書 如果你想要使用函式，你需要知道函式在哪，然後include library去使用函式 例如: stdio.h \u0026lt;-\u0026gt; printf   使用 math.h 時，需下編譯參數 -lm    永不重新發明輪子 在開發前請先搜尋   1//原型宣告 2Return-Value-Type Function-Name (parameter-Type-list); 3 4Return-Value-Type Function-Name (parameter-list){ 5 Statements 6}  使用原型宣告並將自訂函式置於main function之後的好處?  不用管function之間的先後順序。     void  沒有型別 在這裡，代表不需要回傳值  標頭檔 (Header Files)  甚麼是header file?  是一個包含函式的原型宣告(prototypes)和其他定義(definitions)的檔案   為甚麼我們需要header file?  抽象層 有時我們想保護我們的實作(implementation)     1#ifndef 2#define 3... 4#endif  如同我所說，軟體工程師是懶惰的  1#pragma once 如何編譯多個檔案 1#static 2gcc -c library.c -o library.o 3gcc main.c library.o -o main 4 5#dynamic 6gcc -shared test.o -o libtest.so 7gcc main.c -o main -L. -ltest 8#執行 9LD_LIBRARY_PATH=. ./main Link  Static link: Static linking is the process of copying all library modules used in the program into the final executable image. Dynamic link: In dynamic linking the names of the external libraries (shared libraries) are placed in the final executable file while the actual linking takes place at run time when both executable file and libraries are placed in the memory. .a 是一堆 .o 包在一起  Random 1#include \u0026lt;stdlib.h\u0026gt;2#include \u0026lt;time.h\u0026gt;3 4srand(time(0)); 5n = rand % 6 //n: 0 ~ 5  有安全要求時，請勿使用 random()  Global, Static, Extern Variable global  變數的生命週期為整個程式。 也可被extern所存取到。  static  變數只會在程式開始之前分配和初始化一次。 在程式終止之前，儲存空間都不會被釋放。 加上 static 後， extern便無法存取了。  extern  使用外部的變數。  遞迴 Recursive  遞迴定義如下  遞迴: 參見「遞迴」。   什麼?這個定義什麼也沒有說啊!好吧，改一下:  遞迴: 如果你還是沒明白遞迴是什麼意思的話，參見「遞迴」。    1Return-Value-Type Function-Name ( parameter-list ) { 2 if ( Base case ) { 3 Return pre-defined value. 4 } 5 else { 6 Call itself with parameter modification. 7 } 8}  所有能使用遞迴表達的敘述，皆能以迴圈的方式編寫。 To iterate is human, to recurse, divine. — L. Peter Deutsch 遞迴只應天上有，人間該當用迴圈 我的觀點:  如果你找到關係式，遞迴是簡單的。 時常用在虛擬碼(pseudo-code)中。 性能效率可能比迭代差。    ","date":"2020-11-21T21:48:47+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_1-05/","title":"程式設計(一)-05：Function"},{"content":"Loop - `while` - `for` - `do while`  While Loop 1while(條件){ 2 執行區塊 3}  %.200f 會發生什麼事? -\u0026gt; 精度不夠沒有意義 while(1) -\u0026gt; 無窮迴圈  For Loop 1for(初始化; 條件; 執行後操作){ 2 執行區塊 3}  i++ -\u0026gt; Use the current value of i. -\u0026gt; i = i + 1 ++i -\u0026gt; i = i + 1 -\u0026gt; Use the new value of i. {} -\u0026gt; 變數生命週期範圍 %4d ( %# ) -\u0026gt; 給最小的位數去顯示 在 ANSI C, 變數只能被宣告在函式的開頭，而 Modern C 沒有任何限制  Do While Loop 1do{ 2 執行區塊 3}while(條件)  三種不同類型的迴圈毫無疑問的都可以互相轉換  除了 do while 至少會執行一次   大多數來說，如果你知道要執行幾次迴圈的話，會使用 for break：離開當前的區段 continue：跳過剩餘的敘述，直接執行下一次迭代 無窮迴圈不是個好東西? -\u0026gt; 不，或許你會需要他，例如：Web server   1#include \u0026lt;unistd.h\u0026gt;2sleep(sec); ","date":"2020-10-18T20:33:18+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_1-04/","title":"程式設計(一)-04：Loop"},{"content":"Condition Control 簡介  我們想要讓電腦去做基礎的判斷  if switch    If 1if (condition1) { 2 statements; 3} 4else if (condition2){ 5 ... 6} 7else { 8 ... 9}  如果條件不是錯誤，那麼將會執行大括號裡的敘述  簡而言之，false 被定義為 0   \u0026gt; -\u0026gt; 大於 \u0026lt; -\u0026gt; 小於 \u0026gt;= -\u0026gt; 大於等於 \u0026lt;= -\u0026gt; 小於等於 == -\u0026gt; 等於 != -\u0026gt; 不等於 \u0026amp;\u0026amp; -\u0026gt; and || -\u0026gt; or  Boolean  在 Cpp 裡，有個型別稱為 bool  它只有兩個值：true, false 那麼 bool 使用的記憶體大小為何能?( 1 bit or 1 byte ??)   在 ANSI C 裡，沒有一個型別為boolean的 從 C99 開始，有一個標頭檔可以使用，stdbool.h  Switch  你可以使用 if-else 來做每個條件判斷，但是有時候可能會寫一個巨大的巢狀程式，因此將介紹另一個方法 switch  1switch (){ 2 case 1: 3 ... 4 break; 5 ... 6 default: 7 ... 8}  break：從此處結束  那麼如果不使用 break 呢??   default：如果沒有 case 符合，執行這段  浮點數比較 1#include \u0026lt;stdio.h\u0026gt;2int main() { 3 float a = 0.3; 4 if (a == 0.3) printf(\u0026#34;if01\\n\u0026#34;); 5 else printf(\u0026#34;else01\\n\u0026#34;); 6 if (a == 0.3f) printf(\u0026#34;if02\\n\u0026#34;); 7 else printf(\u0026#34;else02\\n\u0026#34;); 8 return 0; 9}  結果： else01 if02 請使用 sizeof() 查看發生了什麼!(IEEE 754) 結論：浮點數的比較是相當危險的!!  ","date":"2020-10-15T20:53:14+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_1-03/","title":"程式設計(一)-03：Condition Control"},{"content":"Arithmetic 1#include \u0026lt;stdio.h\u0026gt;2int main(){ 3 int a = 1, b = 2, sum = 0; 4 sum = a + b; 5 printf(\u0026#34;%d\u0026#34;, sum); 6 return 0; 7}  變數  每個變數都必須有它的型別 在使用變數前必須先宣告它   在C裡面， = 意思為”指定”，而不是”相等”，指派右邊的數值給左邊的變數 一個好習慣，總是初始化變數 C Spec:  C89:If an object that has static storage duration is not initialized explicitly, it is initialized implicitly. C99: If it has arithmetic type, it is initialized to (positive or unsigned) zero.      In C99: a == (a / b) * b + a % b printf 是一個函式去印出格式化字串  %d -\u0026gt; 有號十進位整數 %f -\u0026gt; 十進位浮點數 %u -\u0026gt; 無號十進位整數 當然不只這些   小技巧  1a += b -\u0026gt; a = a + b 2a -= b -\u0026gt; a = a - b 3a *= b -\u0026gt; a = a * b 4a /= b -\u0026gt; a = a / b 5a %= b -\u0026gt; a = a % b   查看記憶體使用大小： sizeof()，回傳單位為 byte ( printf(\u0026quot;%lu\u0026quot;, sizeof()); ) #include \u0026lt;stdint.h\u0026gt;  int8_t: 8-bit signed interger int16_t: 16-bit signed interger int32_t: 32-bit signed interger int64_t: 64-bit signed interger uint8_t: 8-bit unsigned interger uint16_t: 16-bit unsigned interger uint32_t: 32-bit unsigned interger uint64_t: 64-bit unsigned interger      輸入：scanf(\u0026quot;%d\u0026quot;, \u0026amp;a);  至於為甚麼需要 \u0026amp;，之後會在指標的章節介紹到 scanf 是否有回傳值? ( man 3 scanf )      最後也最重要的技能：RTFM and STFG  ","date":"2020-10-15T11:19:09+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_1-02/","title":"程式設計(一)-02：Arithmetic"},{"content":"簡介  這篇將帶你下載m3u8檔並分析出ts的檔案，再透過多線程來加速下載，之後再由FFmpeg合併成mp4。\nPython 下載m3u8 1m3u8Url = \u0026#39;https://.../index.m3u8\u0026#39; 2 3def downloadM3u8(url): 4 r = requests.get(url) 5 with open(\u0026#39;./index.m3u8\u0026#39;, \u0026#39;wb\u0026#39;) as f: 6 f.write(r.content) 分析m3u8  這部份請依照你所取得的m3u8檔進行分析，並將完整的ts檔的url放進tsList即可。  1tsList = [] 2tsCnt = 0 3 4def analyzeM3u8(): 5 tsList.clear() 6 tempUrl = m3u8Url.rsplit(\u0026#39;/\u0026#39;, 1)[0] + \u0026#39;/\u0026#39; 7 with open(\u0026#39;./index.m3u8\u0026#39;, \u0026#39;r\u0026#39;) as f: 8 text = f.read() 9 textList = text.split(\u0026#39;\\n\u0026#39;) 10 while textList[-1] != \u0026#39;#EXT-X-ENDLIST\u0026#39;: 11 textList.pop(-1) 12 for i in textList: 13 if i[0] != \u0026#39;#\u0026#39;: 14 tsList.append(tempUrl + i) 15 global tsCnt 16 tsCnt = len(tsList) 下載ts檔 1q = queue.Queue() 2 3def downloadts(): 4 global tsList 5 while q.qsize() \u0026gt; 0: 6 num = q.get() 7 r = requests.get(tsList[num]) 8 with open(\u0026#39;./ts/\u0026#39; + str(num+1) + \u0026#39;.ts\u0026#39;, \u0026#39;wb\u0026#39;) as f: 9 f.write(r.content) 10 11if __name__ == \u0026#34;__main__\u0026#34;: 12 if not os.path.isdir(\u0026#39;./ts/\u0026#39;): 13 os.mkdir(\u0026#39;./ts/\u0026#39;) 14 for i in range(tsCnt): 15 q.put(i) 16 thList = [] 17 for i in range(tsCnt): 18 th = threading.Thread(target=downloadts) 19 th.start() 20 thList.append(th) 21 for th in thList: 22 th.join() 23 print(\u0026#39;下載ts完成\u0026#39;) 合併ts成mp4 1def merge(tsCnt, output): 2 for i in range(tsCnt): 3 with open(\u0026#39;./ts/ts.txt\u0026#39;, \u0026#39;a+\u0026#39;) as f: 4 f.write(\u0026#39;file \u0026#39; + str(i+1) + \u0026#39;.ts\\n\u0026#39;) 5 command = \u0026#39;ffmpeg -y -f concat -i %s-bsf:a aac_adtstoasc -c copy %s\u0026#39; % (\u0026#39;./ts/ts.txt\u0026#39;, output) 6 os.system(command) 7 print(\u0026#39;合併成功\u0026#39;) 移除無用檔案 1def remove(): 2 shutil.rmtree(\u0026#39;./ts/\u0026#39;) 3 os.remove(\u0026#39;./index.m3u8\u0026#39;)  完整程式碼 1# -*- coding: UTF-8 -*- 2import requests, os, threading, queue, shutil 3 4m3u8Url = \u0026#39;https://.../index.m3u8\u0026#39; 5tsList = [] 6tsCnt = 0 7q = queue.Queue() 8 9def downloadM3u8(url): 10 r = requests.get(url) 11 with open(\u0026#39;./index.m3u8\u0026#39;, \u0026#39;wb\u0026#39;) as f: 12 f.write(r.content) 13 14def analyzeM3u8(): 15 tsList.clear() 16 tempUrl = m3u8Url.rsplit(\u0026#39;/\u0026#39;, 1)[0] + \u0026#39;/\u0026#39; 17 with open(\u0026#39;./index.m3u8\u0026#39;, \u0026#39;r\u0026#39;) as f: 18 text = f.read() 19 textList = text.split(\u0026#39;\\n\u0026#39;) 20 while textList[-1] != \u0026#39;#EXT-X-ENDLIST\u0026#39;: 21 textList.pop(-1) 22 for i in textList: 23 if i[0] != \u0026#39;#\u0026#39;: 24 tsList.append(tempUrl + i) 25 global tsCnt 26 tsCnt = len(tsList) 27 28def downloadts(): 29 global tsList 30 while q.qsize() \u0026gt; 0: 31 num = q.get() 32 r = requests.get(tsList[num]) 33 with open(\u0026#39;./ts/\u0026#39; + str(num+1) + \u0026#39;.ts\u0026#39;, \u0026#39;wb\u0026#39;) as f: 34 f.write(r.content) 35 36def merge(tsCnt, output): 37 for i in range(tsCnt): 38 with open(\u0026#39;./ts/ts.txt\u0026#39;, \u0026#39;a+\u0026#39;) as f: 39 f.write(\u0026#39;file \u0026#39; + str(i+1) + \u0026#39;.ts\\n\u0026#39;) 40 command = \u0026#39;ffmpeg -y -f concat -i %s-bsf:a aac_adtstoasc -c copy %s\u0026#39; % (\u0026#39;./ts/ts.txt\u0026#39;, output) 41 os.system(command) 42 print(\u0026#39;合併成功\u0026#39;) 43 44def remove(): 45 shutil.rmtree(\u0026#39;./ts/\u0026#39;) 46 os.remove(\u0026#39;./index.m3u8\u0026#39;) 47 48if __name__ == \u0026#34;__main__\u0026#34;: 49 downloadM3u8(m3u8Url) 50 analyzeM3u8() 51 print(\u0026#39;m3u8下載且分析完畢\u0026#39;) 52 if not os.path.isdir(\u0026#39;./ts/\u0026#39;): 53 os.mkdir(\u0026#39;./ts/\u0026#39;) 54 for i in range(tsCnt): 55 q.put(i) 56 thList = [] 57 for i in range(tsCnt): 58 th = threading.Thread(target=downloadts) 59 th.start() 60 thList.append(th) 61 for th in thList: 62 th.join() 63 print(\u0026#39;下載ts完成\u0026#39;) 64 merge(tsCnt, \u0026#39;./test.mp4\u0026#39;) 65 remove() ","date":"2020-10-04T16:36:35+08:00","permalink":"https://blog.smallten.tk/p/python-04/","title":"Python-04：多線程-ts下載並合併成mp4"},{"content":"簡介  現今你時常能在影音媒體網站看到 .m3u8 的檔案，以及許多 .ts 的分段媒體，本篇將教你如何簡單的下載成 .mp4 檔。 這篇並不詳加敘述 HLS 之類的觀念，若有興趣深入了解請自行查找資料。  FFmpeg  FFmpeg官網 下載安裝完後，若為 windows 用戶請將 %ffmpeg%\\bin 的路徑加入環境變數中，並於terminal中執行 ffmpeg -version 來查看是否成功加入。 下載檔案，直接在 terminal 輸入 ffmpeg -i m3u8URL -c copy filname.mp4，即可完成下載。(下面將提供Python的寫法)  Python 1# -*- coding: UTF-8 -*- 2import ffmpeg_streaming 3from ffmpeg_streaming import Formats 4 5url = \u0026#39;https://.../index.m3u8\u0026#39; 6filename = \u0026#39;test.mp4\u0026#39; 7 8def ffmpeg_download(input_path, output_path): 9 video = ffmpeg_streaming.input(input_path) 10 stream = video.stream2file(Formats.h264()) 11 stream.output(output_path) 12 13if __name__ == \u0026#34;__main__\u0026#34;: 14 ffmpeg_download(url, \u0026#39;./\u0026#39; + filename)  下一篇將教你如何直接從 m3u8 裡讀取目錄，並使用多線程下載 ts 並合併成 mp4  ","date":"2020-10-04T11:07:24+08:00","permalink":"https://blog.smallten.tk/p/python-03/","title":"Python-03：m3u8影片下載"},{"content":"Hello World 1#include \u0026lt;stdio.h\u0026gt;2//Your first code. 3int main(){ 4 printf(\u0026#34;Hello World\\n\u0026#34;); 5 return 0; 6}  main是每個C程式的進入點，我們稱它為main function(主函式) int 及 return 是C裡面的Keywords  int代表這個函式將會回傳一個整數 每個函式都應該有一個回傳值   每個敘述的結尾都應該要有 ; printf 是一個會顯示格式化字串的函式 \\n -\u0026gt; 換行 \\t -\u0026gt; tab \\\\ -\u0026gt; \\ \\\u0026quot; -\u0026gt; “ # 的那一行是C的預處理器並且不需要;結尾 stdio.h -\u0026gt; standard input / output header(標準輸出/輸入標頭檔) 註解 -\u0026gt; 是給開發者看的  //Your code -\u0026gt; 單行 /*Your code*/ -\u0026gt; 多行      使用編譯器將程式碼編譯成組合語言，再由組譯器組議成機械碼或可執行的二進制檔 IDE -\u0026gt; Integrated Development Environment，不是編譯器 gcc是最受歡迎的C編譯器之一(不完全對!!因為它不只做了編譯的動作…) 一些基本的Linux的操作指令  man -\u0026gt; 不會就問那個男人吧，男人不會就Google ls cd rm pwd   gcc main.c 一些參數  -o -v -g -Wall -Wextra -O2 or -Og    Makefile 1all: 2 gcc main.c -o main 3clean: 4 rm -rf main  make 將執行all下的指令 中間縮排應為Tab而不是Space make clean 預設可執行的檔名為 makefile，Makefile，GNUmakefile，若為其他可下 -f 的參數  ","date":"2020-10-04T11:00:48+08:00","permalink":"https://blog.smallten.tk/p/computer_programming_1-01/","title":"程式設計(一)-01：Your first program"},{"content":"簡介  接續上一篇Python-01：爬蟲-圖片下載的內容，這篇文章將帶領大家使用多線程來加速圖片的下載  教學開始  首先我們先看個簡單的多線程範例  1import time, threading 2 3# 子執行緒的工作函數 4def job(): 5 for i in range(5): 6 print(\u0026#34;Child thread:\u0026#34;, i) 7 time.sleep(1) 8# 建立一個子執行緒 9t = threading.Thread(target = job) 10# 執行該子執行緒 11t.start() 12# 主執行緒繼續執行自己的工作 13for i in range(3): 14 print(\u0026#34;Main thread:\u0026#34;, i) 15 time.sleep(1) 16# 等待 t 這個子執行緒結束 17t.join() 18print(\u0026#34;Done.\u0026#34;) 1import time, threading 2 3# 子執行緒的工作函數 4def job(num): 5 print(\u0026#34;Thread\u0026#34;, num) 6 time.sleep(1) 7# 建立 5 個子執行緒 8threads = [] 9for i in range(5): 10 threads.append(threading.Thread(target = job, args = (i,))) 11 threads[i].start() 12# 主執行緒繼續執行自己的工作 13 14# 等待所有子執行緒結束 15for i in range(5): 16 threads[i].join() 17print(\u0026#34;Done.\u0026#34;)  接下來我們修改Python-01：爬蟲-圖片下載中下載圖片那部分的程式碼  1th_list = [] 2for i in range(img_count): 3 img = img_url + str(i + 1).zfill(m) + \u0026#39;.jpg\u0026#39; 4 th = threading.Thread(target=download_img, args=(img, i)) 5 th.start() 6 th_list.append(th) 7for th in th_list: 8 th.join() 完整程式碼 1# -*- coding: UTF-8 -*- 2from selenium import webdriver 3from bs4 import BeautifulSoup 4import requests, threading 5 6def download_img(img, num): 7 r = requests.get(img) 8 with open(save_url + str(num+1) + \u0026#39;.jpg\u0026#39;, \u0026#39;wb\u0026#39;) as f: 9 f.write(r.content) 10 11if __name__ == \u0026#34;__main__\u0026#34;: 12 save_url = \u0026#39;./test/\u0026#39; 13 url = \u0026#39;https://www.ohmanhua.com/13621/1/1.html\u0026#39; 14 chop = webdriver.ChromeOptions() 15 chop.add_extension(\u0026#39;Adblock-Plus_v3.8.4.crx\u0026#39;) 16 browser = webdriver.Chrome(options = chop) 17 browser.implicitly_wait(10) 18 browser.get(url) 19 soup = BeautifulSoup(browser.page_source, \u0026#39;lxml\u0026#39;) 20 img_count = int(soup.find(\u0026#39;select\u0026#39;, {\u0026#39;class\u0026#39;: \u0026#39;mh_select\u0026#39;}).find_all(\u0026#39;option\u0026#39;)[-1].get(\u0026#39;value\u0026#39;)) 21 img_url = soup.find_all(\u0026#39;div\u0026#39;, {\u0026#39;class\u0026#39;: \u0026#39;mh_comicpic\u0026#39;})[0].find(\u0026#39;img\u0026#39;).get(\u0026#39;src\u0026#39;) 22 if img_url[0] == \u0026#39;/\u0026#39;: 23 img_url = \u0026#39;https:\u0026#39; + img_url 24 m = len(img_url.rsplit(\u0026#39;/\u0026#39;, 1)[1].split(\u0026#39;.\u0026#39;)[0]) 25 img_url = img_url.rsplit(\u0026#39;/\u0026#39;, 1)[0] + \u0026#39;/\u0026#39; 26 th_list = [] 27 for i in range(img_count): 28 img = img_url + str(i + 1).zfill(m) + \u0026#39;.jpg\u0026#39; 29 th = threading.Thread(target=download_img, args=(img, i)) 30 th.start() 31 th_list.append(th) 32 for th in th_list: 33 th.join() 34 browser.quit() ","date":"2020-08-03T00:56:43+08:00","permalink":"https://blog.smallten.tk/p/python-02/","title":"Python-02：多線程-加速圖片下載"},{"content":"簡介  這一篇將帶領大家透過Python的爬蟲自動化的下載圖片  安裝  打開終端機，安裝下列套件  pip install requests pip install BeautifulSoup4 pip install lxml pip install selenium   至 Chrome Driver 下載當前電腦中Chrome所對應版本的Driver  教學開始  首先因為這次的主題為圖片下載，因此我們找了一個擁有大量圖片的漫畫網頁來進行教學。 由於這個網頁的圖片是由JavaScript加載的，因此一開始我們使用Selenium來開啟網頁 1from selenium import webdriver 2 3url = \u0026#39;https://www.ohmanhua.com/13621/1/1.html\u0026#39; 4#使用crx插件 5chop = webdriver.ChromeOptions() 6chop.add_extension(\u0026#39;Adblock-Plus_v3.8.4.crx\u0026#39;) 7browser = webdriver.Chrome(options = chop) 8browser.implicitly_wait(10) 9browser.get(url)  當然若不想顯示瀏覽器的視窗可以使用headless模式  1chop.add_argument(\u0026#39;--headless\u0026#39;) #規避google bug 2chop.add_argument(\u0026#39;--disable-gpu\u0026#39;)  接下來使用BeautifulSoup4來分析頁面，並取得圖片網址，和共幾張圖片  1img_count = int(soup.find(\u0026#39;select\u0026#39;, {\u0026#39;class\u0026#39;: \u0026#39;mh_select\u0026#39;}).find_all(\u0026#39;option\u0026#39;)[-1].get(\u0026#39;value\u0026#39;)) 2img_url = soup.find_all(\u0026#39;div\u0026#39;, {\u0026#39;class\u0026#39;: \u0026#39;mh_comicpic\u0026#39;})[0].find(\u0026#39;img\u0026#39;).get(\u0026#39;src\u0026#39;) 3if img_url[0] == \u0026#39;/\u0026#39;: 4 img_url = \u0026#39;https:\u0026#39; + img_url 5m = len(img_url.rsplit(\u0026#39;/\u0026#39;, 1)[1].split(\u0026#39;.\u0026#39;)[0]) 6img_url = img_url.rsplit(\u0026#39;/\u0026#39;, 1)[0] + \u0026#39;/\u0026#39;  最後便是下載圖片和關閉瀏覽器  1def download_img(img, num): 2 r = requests.get(img) 3 with open(save_url + str(num+1) + \u0026#39;.jpg\u0026#39;, \u0026#39;wb\u0026#39;) as f: 4 f.write(r.content) 5 6for i in range(img_count): 7 img = img_url + str(i + 1).zfill(m) + \u0026#39;.jpg\u0026#39; 8 download_img(img, i) 9browser.quit() 完整程式碼 1# -*- coding: UTF-8 -*- 2from selenium import webdriver 3from bs4 import BeautifulSoup 4import requests 5 6def download_img(img, num): 7 r = requests.get(img) 8 with open(save_url + str(num+1) + \u0026#39;.jpg\u0026#39;, \u0026#39;wb\u0026#39;) as f: 9 f.write(r.content) 10 11if __name__ == \u0026#34;__main__\u0026#34;: 12 save_url = \u0026#39;./download/\u0026#39; 13 url = \u0026#39;\u0026#39; 14 chop = webdriver.ChromeOptions() 15 chop.add_extension(\u0026#39;Adblock-Plus_v3.8.4.crx\u0026#39;) 16 browser = webdriver.Chrome(options = chop) 17 browser.implicitly_wait(10) 18 browser.get(url) 19 soup = BeautifulSoup(browser.page_source, \u0026#39;lxml\u0026#39;) 20 img_count = int(soup.find(\u0026#39;select\u0026#39;, {\u0026#39;class\u0026#39;: \u0026#39;mh_select\u0026#39;}).find_all(\u0026#39;option\u0026#39;)[-1].get(\u0026#39;value\u0026#39;)) 21 img_url = soup.find_all(\u0026#39;div\u0026#39;, {\u0026#39;class\u0026#39;: \u0026#39;mh_comicpic\u0026#39;})[0].find(\u0026#39;img\u0026#39;).get(\u0026#39;src\u0026#39;) 22 if img_url[0] == \u0026#39;/\u0026#39;: 23 img_url = \u0026#39;https:\u0026#39; + img_url 24 m = len(img_url.rsplit(\u0026#39;/\u0026#39;, 1)[1].split(\u0026#39;.\u0026#39;)[0]) 25 img_url = img_url.rsplit(\u0026#39;/\u0026#39;, 1)[0] + \u0026#39;/\u0026#39; 26 for i in range(img_count): 27 img = img_url + str(i + 1).zfill(m) + \u0026#39;.jpg\u0026#39; 28 download_img(img, i) 29 browser.quit() ","date":"2020-08-03T00:39:24+08:00","permalink":"https://blog.smallten.tk/p/python-01/","title":"Python-01：爬蟲-圖片下載"},{"content":"簡介  這系列主題將帶領大家建立一個簡易的氣象觀測站，而這一小節將製作在Raspberry pi用Python讀取Arduino Serial的數值，並且製作一個簡易的UI實時顯示出數值。  硬體  上一小節的成品 Raspberry pi * 1  教學開始  打開Raspberry pi的Terminal，並輸入 ls /dev/tty* 將Arduino的Usb接上Raspberry pi 再次於Terminal中輸入 ls /dev/tty*，比較兩次的差異，即可知Arduino使用的序列埠為何(例如此時為/ dev/ttyACM0，請依照情況自行修改) 於Terminal中輸入 python3 -m pip install pyserial 將以下程式碼建立成一個python檔，再以python3執行即可  1# -*- coding: UTF-8 -*- 2import serial 3import tkinter as tk 4 5def getData(): 6 ser = serial.Serial(\u0026#39;/dev/ttyACM0\u0026#39;, 9600, timeout=1) 7 ser.flush() 8 while True: 9 flag = False 10 if ser.in_waiting\u0026gt;0: 11 arduinoData = ser.readline().decode(encoding=\u0026#39;utf-8\u0026#39;, errors=\u0026#39;ignore\u0026#39;).rstrip().split(\u0026#39;;\u0026#39;) 12 if len(arduinoData)!=4 or arduinoData==\u0026#39;\u0026#39;: 13 continue 14 for i in range(0,3): 15 if arduinoData[i]==\u0026#39;0\u0026#39;: 16 flag = True 17 break 18 if flag: 19 continue 20 else: 21 temperature_value[\u0026#39;text\u0026#39;] = arduinoData[0] + \u0026#39; 度C\u0026#39; 22 humidity_value[\u0026#39;text\u0026#39;] = arduinoData[1] + \u0026#39; %\u0026#39; 23 pmat25_value[\u0026#39;text\u0026#39;] = arduinoData[2] + \u0026#39; ug/m^3\u0026#39; 24 wind_value[\u0026#39;text\u0026#39;] = arduinoData[3] + \u0026#39; 級\u0026#39; 25 break 26 window.after(1000, getData) 27 28if __name__==\u0026#39;__main__\u0026#39;: 29 window = tk.Tk() 30 window.title(\u0026#39;Weather\u0026#39;) 31 window.geometry(\u0026#39;500x250\u0026#39;) 32 window.resizable(False, False) 33 34 header_label = tk.Label(window, text=\u0026#39;環境監測\u0026#39;, font=(\u0026#39;Arial\u0026#39;, 20), width=30, height=2, borderwidth=2, relief=\u0026#39;solid\u0026#39;) 35 header_label.pack(side=tk.TOP) 36 37 temperature_frame = tk.Frame(window) 38 temperature_frame.pack(side=tk.TOP) 39 temperature_label = tk.Label(temperature_frame, text=\u0026#39;溫度: \u0026#39;, font=(\u0026#39;Arial\u0026#39;, 16)) 40 temperature_label.pack(side=tk.LEFT) 41 temperature_value = tk.Label(temperature_frame, font=(\u0026#39;Arial\u0026#39;, 16)) 42 temperature_value.pack(side=tk.LEFT) 43 44 humidity_frame = tk.Frame(window) 45 humidity_frame.pack(side=tk.TOP) 46 humidity_label = tk.Label(humidity_frame, text=\u0026#39;濕度: \u0026#39;, font=(\u0026#39;Arial\u0026#39;, 16)) 47 humidity_label.pack(side=tk.LEFT) 48 humidity_value = tk.Label(humidity_frame, font=(\u0026#39;Arial\u0026#39;, 16)) 49 humidity_value.pack(side=tk.LEFT) 50 51 pmat25_frame = tk.Frame(window) 52 pmat25_frame.pack(side=tk.TOP) 53 pmat25_label = tk.Label(pmat25_frame, text=\u0026#39;PM2.5: \u0026#39;, font=(\u0026#39;Arial\u0026#39;, 16)) 54 pmat25_label.pack(side=tk.LEFT) 55 pmat25_value = tk.Label(pmat25_frame, font=(\u0026#39;Arial\u0026#39;, 16)) 56 pmat25_value.pack(side=tk.LEFT) 57 58 wind_frame = tk.Frame(window) 59 wind_frame.pack(side=tk.TOP) 60 wind_label = tk.Label(wind_frame, text=\u0026#39;風速: \u0026#39;, font=(\u0026#39;Arial\u0026#39;, 16)) 61 wind_label.pack(side=tk.LEFT) 62 wind_value = tk.Label(wind_frame, font=(\u0026#39;Arial\u0026#39;, 16)) 63 wind_value.pack(side=tk.LEFT) 64 65 getData() 66 window.mainloop()  最終成果圖    ","date":"2020-07-12T09:31:38+08:00","permalink":"https://blog.smallten.tk/p/weather-02/","title":"簡易氣象站-02"},{"content":"簡介  這系列主題將帶領大家建立一個簡易的氣象觀測站，而這一小節將製作由Arduino抓取感測器數值的部分。  硬體  Arduino Uno R3 * 1 攀藤 G5 PMS5003 * 1 DFrobot 三杯式風速感測器 * 1  教學開始 連結電路  \nUno程式碼 1#include \u0026lt;SoftwareSerial.h\u0026gt;2#define windPin A0 3SoftwareSerial pmsSerial(2, 3); 4 5long pmValue=0; 6long pmcf25=0; 7long pmat25=0; 8unsigned int temperature = 0; 9unsigned int humandity = 0; 10 11void retrievepm25(){ 12 int count = 0; 13 unsigned char c; 14 unsigned char high; 15 while (pmsSerial.available()) { 16 c = pmsSerial.read(); 17 if((count==0 \u0026amp;\u0026amp; c!=0x42) || (count==1 \u0026amp;\u0026amp; c!=0x4d)) 18 break; 19 if(count \u0026gt; 27) 20 break; 21 else if(count == 4 || count == 6 || count == 8 || count == 10 || count == 12 || count == 14 || count == 24 || count == 26) 22 high = c; 23 else if(count == 7){ 24 pmcf25 = 256*high + c; 25 pmValue = pmcf25; 26 } 27 else if(count == 13){ 28 pmat25 = 256*high + c; 29 pmValue = pmat25; 30 } 31 else if(count == 25) 32 temperature = (256*high + c)/10; 33 else if(count == 27) 34 humandity = (256*high + c)/10; 35 count++; 36 } 37 while(pmsSerial.available()) 38 pmsSerial.read(); 39} 40 41void setup() { 42 Serial.begin(9600); 43 pmsSerial.begin(9600); 44} 45 46void loop() { 47 retrievepm25(); 48 Serial.print(temperature); 49 Serial.print(\u0026#34;;\u0026#34;); 50 Serial.print(humandity); 51 Serial.print(\u0026#34;;\u0026#34;); 52 Serial.print(pmat25); 53 54 int windValue = analogRead(windPin); 55 int Level = 6 * windValue * (5.0 / 1023.0); 56 Serial.print(\u0026#34;;\u0026#34;); 57 Serial.print(Level); 58 59 Serial.println(); 60 delay(1000); 61} ","date":"2020-07-12T09:02:34+08:00","permalink":"https://blog.smallten.tk/p/weather-01/","title":"簡易氣象站-01"},{"content":"簡介  這篇內容將教大家透過Arduino的序列埠設定HC-05的AT命令  硬體  Arduino Uno * 1 HC-05藍芽模組 * 1  教學 腳位連接    Arduino HC-05     5V VCC   GND GND   8 TX   9 RX    程式碼 1#include \u0026lt;SoftwareSerial.h\u0026gt;2 3SoftwareSerial BT(8, 9); 4char val; 5 6void setup() { 7 Serial.begin(9600); 8 BT.begin(38400); 9} 10 11void loop() { 12 if(Serial.available()){ 13 val = Serial.read(); 14 BT.print(val); 15 } 16 if(BT.available()){ 17 val = BT.read(); 18 Serial.print(val); 19 } 20}  連接腳位，並上傳程式碼，最後給HC-05供電前，先按住上面的按鈕，再提供電源，燈號將變成約兩秒一閃，及表示進入了AT命令模式 接下來打開序列埠監控視窗，將設定調成\u0026quot;9600 baud\u0026quot;和\u0026quot;NL與CR\u0026quot;，最後依需求輸入以下命令即可   AT -\u0026gt; 顯示OK表示連接成功 查看韌體版本 -\u0026gt; AT+VERSION 查看名稱 -\u0026gt; AT+NAME? 修改名稱 -\u0026gt; AT+NAME=你要的名字 查看密碼 -\u0026gt; AT+PSWD? 修改密碼 -\u0026gt; AT+PSWD=你要的密碼  ","date":"2020-05-10T21:56:45+08:00","permalink":"https://blog.smallten.tk/p/arduino-05/","title":"Arduino-05：HC-05 AT命令"},{"content":"簡介  這篇內容將帶領大家製作藍芽的遙控車，並且用Blynk的Joystick操控它  硬體  Arduino nano * 1 L298N 馬達控制板 * 1 HC-05 藍芽模組 * 1 二輪直流馬達遙控車 * 1  下載  至手機應用商店下載Blynk的App－Blynk官網 下載Blynk函式庫  教學開始  先上傳程式碼至Nano板中 依照下方圖示連接腳位，並且設定Blynk App內的物件  連接腳位  \n設定Blynk  創建3個元件，分別為Button、Bluetooth、Joystick，並且依下圖進行設置      nano程式碼 1#include \u0026lt;BlynkSimpleSerialBLE.h\u0026gt;2#define BLYNK_USE_DIRECT_CONNECT 3 4char auth[] = \u0026#34;Blynk Auth\u0026#34;; 5int d[2] = {0}; 6int car[2][2] = { {5, 6}, {11, 10} }; //in 1,2,4,3 7int en[2] = {3, 9}; 8 9void Controller(); 10void Move(int, int, int, int, int, int); 11 12BLYNK_WRITE(V0){ 13 for(int i=0; i\u0026lt;2; ++i){ 14 d[i] = param[i].asInt(); 15 if(d[i]\u0026lt;=64) d[i] = d[i]*2-255; 16 else if(d[i]\u0026gt;64 \u0026amp;\u0026amp; d[i]\u0026lt;=192) d[i]=0; 17 } 18} 19 20void setup() { 21 Serial.begin(9600); 22 Blynk.begin(Serial, auth); 23 for(int i=0; i\u0026lt;2; ++i){ 24 pinMode(en[i], OUTPUT); 25 for(int j=0; j\u0026lt;2; ++j){ 26 pinMode(car[i][j], OUTPUT); 27 } 28 } 29} 30 31void loop() { 32 Blynk.run(); 33 Controller(); 34} 35 36void Controller() { 37 if(d[0]\u0026gt;0){ 38 if(d[1]\u0026gt;0) Move(0, 1, 1, 0, min(d[0], d[1]), max(d[0], d[1])); 39 else if(d[1]==0) Move(0, 0, 1, 0, 0, d[0]); 40 else Move(1, 0, 0, 1, min(d[0], abs(d[1])), max(d[0], abs(d[1]))); 41 } 42 else if(d[0]==0){ 43 if(d[1]\u0026gt;0) Move(1, 0, 1, 0, d[1], d[1]); 44 else if(d[1]==0) Move(0, 0, 0, 0, 0, 0); 45 else Move(0, 1, 0, 1, abs(d[1]), abs(d[1])); 46 } 47 else{ 48 if(d[1]\u0026gt;0) Move(1, 0, 0, 1, max(abs(d[0]), d[1]), min(abs(d[0]), d[1])); 49 else if(d[1]==0) Move(1, 0, 0, 0, abs(d[0]), 0); 50 else Move(0, 1, 1, 0, max(abs(d[0]), abs(d[1])), min(abs(d[0]), abs(d[1]))); 51 } 52} 53 54void Move(int a1,int a2, int a3, int a4, int e1, int e2) { 55 digitalWrite(car[0][0], a1); 56 digitalWrite(car[0][1], a2); 57 digitalWrite(car[1][0], a3); 58 digitalWrite(car[1][1], a4); 59 analogWrite(en[0], e1); 60 analogWrite(en[1], e2); 61} 補充  由於這邊我們將HC-05和Nano板的RX、TX對接，因此自行修改程式碼後要重新上傳時，記得先移除連接Nano板的那兩條線，當然也可使用SoftwareSerial Library來進行，就不用拔除線路了 若要自行修改HC-05的設定，可參考下一篇文章 ARDUINO-05：HC-05 AT命令  ","date":"2020-05-03T16:29:01+08:00","permalink":"https://blog.smallten.tk/p/arduino-04/","title":"Arduino-04：藍芽遙控車"},{"content":"簡介  這篇內容將帶領大家製作點陣跑馬燈，並且用Blynk來操控它  硬體  WeMos D1R2 * 1 MAX7219 8*8LED點陣模組 * 2  下載  至手機應用商店下載Blynk的App－Blynk官網 下載Blynk函式庫 maxmatrix－下載並加入函式庫  教學開始 連接腳位    MAX7219 D1R2     VCC 5V   GND GND   DIN MOSI/D7   CS SS/D8   CLK SCK/D5     若要串聯多塊MAX7219的話，請將下一塊的DIN接至上一塊的DOUT連接腳位  設定Blynk  請照下圖拉出三個物件，並設定其相關參數      D1R2程式碼 1#include \u0026lt;MaxMatrix.h\u0026gt;2#include \u0026lt;avr/pgmspace.h\u0026gt;3#include \u0026lt;ESP8266WiFi.h\u0026gt;4#include \u0026lt;BlynkSimpleEsp8266.h\u0026gt;5 6char auth[] = \u0026#34;Blynk auth\u0026#34;; 7char ssid[] = \u0026#34;Wifi ssid\u0026#34;; 8char pass[] = \u0026#34;Wifi password\u0026#34;; 9 10PROGMEM const unsigned char CH[] = { 11 3, 8, B0000000, B0000000, B0000000, B0000000, B0000000, // space 12 1, 8, B1011111, B0000000, B0000000, B0000000, B0000000, // ! 13 3, 8, B0000011, B0000000, B0000011, B0000000, B0000000, // \u0026#34; 14 5, 8, B0010100, B0111110, B0010100, B0111110, B0010100, // # 15 4, 8, B0100100, B1101010, B0101011, B0010010, B0000000, // $ 16 5, 8, B1100011, B0010011, B0001000, B1100100, B1100011, // % 17 5, 8, B0110110, B1001001, B1010110, B0100000, B1010000, // \u0026amp; 18 1, 8, B0000011, B0000000, B0000000, B0000000, B0000000, // \u0026#39; 19 3, 8, B0011100, B0100010, B1000001, B0000000, B0000000, // ( 20 3, 8, B1000001, B0100010, B0011100, B0000000, B0000000, // ) 21 5, 8, B0101000, B0011000, B0001110, B0011000, B0101000, // * 22 5, 8, B0001000, B0001000, B0111110, B0001000, B0001000, // + 23 2, 8, B10110000, B1110000, B0000000, B0000000, B0000000, // , 24 4, 8, B0001000, B0001000, B0001000, B0001000, B0000000, // - 25 2, 8, B1100000, B1100000, B0000000, B0000000, B0000000, // . 26 4, 8, B1100000, B0011000, B0000110, B0000001, B0000000, // / 27 4, 8, B0111110, B1000001, B1000001, B0111110, B0000000, // 0 28 3, 8, B1000010, B1111111, B1000000, B0000000, B0000000, // 1 29 4, 8, B1100010, B1010001, B1001001, B1000110, B0000000, // 2 30 4, 8, B0100010, B1000001, B1001001, B0110110, B0000000, // 3 31 4, 8, B0011000, B0010100, B0010010, B1111111, B0000000, // 4 32 4, 8, B0100111, B1000101, B1000101, B0111001, B0000000, // 5 33 4, 8, B0111110, B1001001, B1001001, B0110000, B0000000, // 6 34 4, 8, B1100001, B0010001, B0001001, B0000111, B0000000, // 7 35 4, 8, B0110110, B1001001, B1001001, B0110110, B0000000, // 8 36 4, 8, B0000110, B1001001, B1001001, B0111110, B0000000, // 9 37 2, 8, B01010000, B0000000, B0000000, B0000000, B0000000, // : 38 2, 8, B10000000, B01010000, B0000000, B0000000, B0000000, // ; 39 3, 8, B0010000, B0101000, B1000100, B0000000, B0000000, // \u0026lt; 40 3, 8, B0010100, B0010100, B0010100, B0000000, B0000000, // = 41 3, 8, B1000100, B0101000, B0010000, B0000000, B0000000, // \u0026gt; 42 4, 8, B0000010, B1011001, B0001001, B0000110, B0000000, // ? 43 5, 8, B0111110, B1001001, B1010101, B1011101, B0001110, // @ 44 4, 8, B1111110, B0010001, B0010001, B1111110, B0000000, // A 45 4, 8, B1111111, B1001001, B1001001, B0110110, B0000000, // B 46 4, 8, B0111110, B1000001, B1000001, B0100010, B0000000, // C 47 4, 8, B1111111, B1000001, B1000001, B0111110, B0000000, // D 48 4, 8, B1111111, B1001001, B1001001, B1000001, B0000000, // E 49 4, 8, B1111111, B0001001, B0001001, B0000001, B0000000, // F 50 4, 8, B0111110, B1000001, B1001001, B1111010, B0000000, // G 51 4, 8, B1111111, B0001000, B0001000, B1111111, B0000000, // H 52 3, 8, B1000001, B1111111, B1000001, B0000000, B0000000, // I 53 4, 8, B0110000, B1000000, B1000001, B0111111, B0000000, // J 54 4, 8, B1111111, B0001000, B0010100, B1100011, B0000000, // K 55 4, 8, B1111111, B1000000, B1000000, B1000000, B0000000, // L 56 5, 8, B1111111, B0000010, B0001100, B0000010, B1111111, // M 57 5, 8, B1111111, B0000100, B0001000, B0010000, B1111111, // N 58 4, 8, B0111110, B1000001, B1000001, B0111110, B0000000, // O 59 4, 8, B1111111, B0001001, B0001001, B0000110, B0000000, // P 60 4, 8, B0111110, B1000001, B1000001, B10111110, B0000000, // Q 61 4, 8, B1111111, B0001001, B0001001, B1110110, B0000000, // R 62 4, 8, B1000110, B1001001, B1001001, B0110010, B0000000, // S 63 5, 8, B0000001, B0000001, B1111111, B0000001, B0000001, // T 64 4, 8, B0111111, B1000000, B1000000, B0111111, B0000000, // U 65 5, 8, B0001111, B0110000, B1000000, B0110000, B0001111, // V 66 5, 8, B0111111, B1000000, B0111000, B1000000, B0111111, // W 67 5, 8, B1100011, B0010100, B0001000, B0010100, B1100011, // X 68 5, 8, B0000111, B0001000, B1110000, B0001000, B0000111, // Y 69 4, 8, B1100001, B1010001, B1001001, B1000111, B0000000, // Z 70 2, 8, B1111111, B1000001, B0000000, B0000000, B0000000, // [ 71 4, 8, B0000001, B0000110, B0011000, B1100000, B0000000, // backslash 72 2, 8, B1000001, B1111111, B0000000, B0000000, B0000000, // ] 73 3, 8, B0000010, B0000001, B0000010, B0000000, B0000000, // hat 74 4, 8, B1000000, B1000000, B1000000, B1000000, B0000000, // _ 75 2, 8, B0000001, B0000010, B0000000, B0000000, B0000000, // ` 76 4, 8, B0100000, B1010100, B1010100, B1111000, B0000000, // a 77 4, 8, B1111111, B1000100, B1000100, B0111000, B0000000, // b 78 4, 8, B0111000, B1000100, B1000100, B0101000, B0000000, // c 79 4, 8, B0111000, B1000100, B1000100, B1111111, B0000000, // d 80 4, 8, B0111000, B1010100, B1010100, B0011000, B0000000, // e 81 3, 8, B0000100, B1111110, B0000101, B0000000, B0000000, // f 82 4, 8, B10011000, B10100100, B10100100, B01111000, B0000000, // g 83 4, 8, B1111111, B0000100, B0000100, B1111000, B0000000, // h 84 3, 8, B1000100, B1111101, B1000000, B0000000, B0000000, // i 85 4, 8, B1000000, B10000000, B10000100, B1111101, B0000000, // j 86 4, 8, B1111111, B0010000, B0101000, B1000100, B0000000, // k 87 3, 8, B1000001, B1111111, B1000000, B0000000, B0000000, // l 88 5, 8, B1111100, B0000100, B1111100, B0000100, B1111000, // m 89 4, 8, B1111100, B0000100, B0000100, B1111000, B0000000, // n 90 4, 8, B0111000, B1000100, B1000100, B0111000, B0000000, // o 91 4, 8, B11111100, B0100100, B0100100, B0011000, B0000000, // p 92 4, 8, B0011000, B0100100, B0100100, B11111100, B0000000, // q 93 4, 8, B1111100, B0001000, B0000100, B0000100, B0000000, // r 94 4, 8, B1001000, B1010100, B1010100, B0100100, B0000000, // s 95 3, 8, B0000100, B0111111, B1000100, B0000000, B0000000, // t 96 4, 8, B0111100, B1000000, B1000000, B1111100, B0000000, // u 97 5, 8, B0011100, B0100000, B1000000, B0100000, B0011100, // v 98 5, 8, B0111100, B1000000, B0111100, B1000000, B0111100, // w 99 5, 8, B1000100, B0101000, B0010000, B0101000, B1000100, // x 100 4, 8, B10011100, B10100000, B10100000, B1111100, B0000000, // y 101 3, 8, B1100100, B1010100, B1001100, B0000000, B0000000, // z 102 3, 8, B0001000, B0110110, B1000001, B0000000, B0000000, // { 103 1, 8, B1111111, B0000000, B0000000, B0000000, B0000000, // | 104 3, 8, B1000001, B0110110, B0001000, B0000000, B0000000, // } 105 4, 8, B0001000, B0000100, B0001000, B0000100, B0000000, // ~ 106}; 107 108const byte data = D7; 109const byte cs = D8; 110const byte clk = D5; 111const byte maxInUse = 2; //使用的點陣模塊數量 112MaxMatrix m(data, cs, clk, maxInUse); 113byte buffer[8]; 114String str; 115int speed = 100; //移動的速度，單位ms 116int light = 5; 117bool islight = false; 118 119void printChar(char); 120 121BLYNK_WRITE(V0){ 122 str = param.asStr(); 123 for(int i=0; i\u0026lt;maxInUse; ++i) 124 str+=\u0026#34; \u0026#34;; 125} 126 127BLYNK_WRITE(V1){ 128 light = param.asInt(); 129 islight = true; 130} 131 132BLYNK_WRITE(V2){ 133 speed = param.asInt(); 134} 135 136void setup() { 137 Serial.begin(115200); 138 //Blynk 139 Blynk.begin(auth, ssid, pass); 140 Blynk.virtualWrite(V1, light); 141 Blynk.virtualWrite(V2, speed); 142 //8*8 led 143 m.init(); 144 m.setIntensity(light); //點陣模組的亮度 145} 146 147void loop() { 148 if(Blynk.connected()){ 149 Blynk.run(); 150 if(islight){ 151 m.setIntensity(light); 152 islight = false; 153 } 154 int len = str.length(); 155 for(int i=0; i\u0026lt;len; ++i){ 156 printChar(str[i]); 157 } 158 } 159 else{ 160 Blynk.begin(auth, ssid, pass); 161 Serial.println(\u0026#34;Reconnected!\u0026#34;); 162 } 163} 164 165void printChar(char c) { 166 if(c\u0026lt;32) return; 167 c-=32; 168 memcpy_P(buffer, CH+7*c, 7); 169 m.writeSprite(32, 0, buffer); 170 m.setColumn(32+buffer[0], 0); 171 for(int i=0; i\u0026lt;=buffer[0]; ++i){ 172 delay(speed); 173 /*往左位移，第一個參數false，代表不旋轉； 174第二個參數false，代表不清空顯示；若設成true，顯示器將不呈現資料。*/ 175 m.shiftLeft(false, false); 176 } 177} 補充  若是覺得Blynk的能量太少，可自行架設 Server  ","date":"2020-04-09T14:50:56+08:00","permalink":"https://blog.smallten.tk/p/arduino-03/","title":"Arduino-03：跑馬燈"},{"content":"簡介  這篇內容將帶領大家把Arduino手把變成電腦手把  所需硬體  Arduino Uno R3 * 1 JoyStick 雙軸按鍵搖桿模組 * 1  下載檔案  FLIP － 請下載包含JRE的檔案(Java Runtime Environment included) UnoJoy － 將Uno變成電腦手把 x360ce － 將手把模擬成xbox 360的手把  教學開始  將下載好的FLIP安裝至電腦 確定電腦已安裝Arduino IDE，並已連接Uno板至電腦，可在裝置管理員查看狀態（如下圖）   打開剛剛下載的UnoJoy資料夾下的檔案，並將它上傳進Uno板中 UnoJoy-master\\UnoJoy\\UnoJoyArduinoSample\\UnoJoyArduinoSample.ino 關閉Arduino IDE，進入DFU Mode，進入方式：用導線同時接觸下圖框起處的兩根針腳   確認已進入 DFU Mode，如下圖    若找不到驅動可手動新增驅動，選擇資料夾為 C:\\Program Files (x86)\\Atmel\\Flip 3.4.7\\usb   打開UnoJoy資料夾，啟動TurnIntoAJoystick的批次檔，檔案路徑 UnoJoy-master\\UnoJoy\\TurnIntoAJoystick.bat，執行成功結果如下圖   至此已完成將Uno變成電腦搖桿，之後插上Uno板皆為UnoJoy Joystick，可在以下路徑查看 控制台\\硬體和音效\\裝置和印表機 將搖桿的vrx和vry分別連接至Uno板的A0和A1，在 控制台\\硬體和音效\\裝置和印表機 裡的UnoJoy Joystick圖示上右鍵-\u0026gt;遊戲控制器-\u0026gt;內容，可查看搖桿狀態，如下圖   最後進入起動x360ce，新建立一個搖桿的設定檔，並選取模擬的位置，點選[Record]，依圖示移動搖桿方向即設定完成  補充  如何將UnoJoy Joystick變回一般的Arduino Uno板  連接UnoJoy Joystick，並進入DFU Mode 打開UnoJoy資料夾，啟動TurnIntoAnArduino的批次檔，檔案路徑 UnoJoy-master\\UnoJoy\\TurnIntoAnArduino.bat 將Uno的usb重新接上電腦，即可看到已變回   如果UnoJoy檔案下載太慢，可至 這裡 下載，但此載點內容僅包含uno板的檔案（Github的檔案裡包含其他板子變成手把的檔案，故檔案相對較大） 如何在電腦遊戲中使用此手把  將剛剛x360ce創建的兩個檔案（x360ce.ini/xinput.dll）放進遊戲資料夾的根目錄即可   此範例檔案預設搖桿資訊  A0~A1 － 為左搖桿的x，y A2~A3 － 為右搖桿的x，y D2~D5 － 為PS搖桿的右側功能鍵 D6~D9 － 為PS搖桿的左側方向鍵 D10~D11 － 為PS搖桿的L1R1 D12 － select A4 － start A5 － home 但由於是模擬成xbox的手把，故可自由接線，再由x360ce中直接[Record]即可 若是腳位不夠可自行替換成mega板    ","date":"2020-04-09T08:16:57+08:00","permalink":"https://blog.smallten.tk/p/arduino-02/","title":"Arduino-02：UNOJOY"},{"content":"官方IDE  此IDE由官方提供，可在此查看官網 下載－官方載點    VSCode + PlatformIO  先下載 VSCode 再安裝 PlatformIO 的插件    ","date":"2020-04-09T08:08:43+08:00","permalink":"https://blog.smallten.tk/p/arduino-01/","title":"Arduino-01：安裝IDE"}]